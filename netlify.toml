[build]
  command = """
echo '=== Clean ===' \
&& rm -rf node_modules/.prisma node_modules/@prisma/client \
&& npm ci \
&& echo '=== Prisma generate (Node client) ===' \
&& PRISMA_SKIP_POSTINSTALL_GENERATE=true \
   PRISMA_GENERATE_DATAPROXY=false \
   PRISMA_CLIENT_ENGINE_TYPE=library \
   PRISMA_ENGINE_TYPE=library \
   npx prisma generate --schema=./prisma/schema.production.prisma | tee /tmp/prisma_generate.log \
&& ! grep -q 'engine=none' /tmp/prisma_generate.log || (echo '❌ Data-Proxy client detected (engine=none). Aborting.'; exit 1) \
&& npx prisma -v \
&& echo '=== Prisma Sanity Checks ===' \
&& echo "Schematics:" \
&& grep -n "generator client" prisma/schema*.prisma | sed -n '1,20p' \
&& echo '=== Webpack Guard Checks ===' \
&& node -e "try{console.log('webpack resolves to:', require.resolve('webpack'))}catch(e){console.log('webpack not installed (good)')}" \
&& node -e "try{const w=require('next/dist/compiled/webpack/webpack'); console.log('compiled webpack keys:', Object.keys(w).slice(0,5))}catch(e){console.error('cannot load compiled webpack', e)}" \
&& echo '=== Prisma Generator Sanity Checks ===' \
&& echo "Production schema generator block:" \
&& awk '/^generator client *{/,/^}/' prisma/schema.production.prisma \
&& if grep -q 'engineType *= *"dataproxy"' prisma/schema.production.prisma; then \
     echo "❌ schema.production.prisma sets engineType=dataproxy"; \
     exit 1; \
   fi \
&& if awk '/^generator client *{/,/^}/' prisma/schema.production.prisma | grep -q 'prisma://'; then \
     echo "❌ prisma:// detected in production schema generator block"; \
     exit 1; \
   fi \
&& echo '=== Next build ===' \
&& NODE_OPTIONS="--max-old-space-size=4096" npm run build
"""
  publish = ".next"

  # Force clean build - clear all caches
  ignore = "git diff --quiet HEAD~1 HEAD -- .next/"

  # Clear Netlify build cache
  clear_cache = true

[functions]
  node_bundler = "esbuild"
  external_node_modules = ["@prisma/client", "prisma"]
  included_files = ["node_modules/.prisma/**", "node_modules/@prisma/client/**"]

# Edge Functions completely disabled - using Node.js runtime for all routes
# Middleware temporarily disabled to prevent Edge Function conflicts
# No edge_functions configuration needed since we use Node.js runtime

[build.environment]
  # 🚨 IMPORTANT: Sensitive variables removed from VCS.
  # Set the following in Netlify UI (Site settings > Environment variables):
  #   DATABASE_URL (Neon cloud database), DIRECT_URL (Neon cloud database),
  #   NEXTAUTH_SECRET, JWT_SECRET, CSRF_SECRET, SESSION_ENCRYPTION_KEY,
  #   API_KEY, REDIS_URL, NEXT_PUBLIC_APP_URL, NEXTAUTH_URL
  #
  # ✅ CRITICAL: Use CLOUD_DATABASE_URL for production deployment
  # This ensures production uses the Neon cloud database with all synced data

  # Align with production environment (non-secrets)
  NODE_VERSION = "22"
  # Increase memory for TypeScript compilation (2GB)
  NODE_OPTIONS = "--max-old-space-size=2048"
  NETLIFY_LINT = "false"
  # Configure specific Next.js flags for Netlify
  NEXT_USE_NETLIFY_EDGE = "false"
  # Disable edge functions - using Node.js runtime for all routes
  NETLIFY_EDGE_FUNCTIONS = "false"
  # Force disable edge functions completely
  NETLIFY_EDGE_FUNCTIONS_DISABLED = "true"
  # Disable middleware Edge Function compilation
  NETLIFY_MIDDLEWARE_EDGE = "false"
  # Make sure no hidden/early generate runs with wrong defaults:
  PRISMA_SKIP_POSTINSTALL_GENERATE = "true"
  PRISMA_GENERATE_DATAPROXY = "false"
  # Disable Next.js telemetry in CI/build
  NEXT_TELEMETRY_DISABLED = "1"
  # Safe build-time toggles (non-secrets)
  ANALYTICS_ENABLED = "true"
  # Prefer configuring API_BASE_URL via Netlify UI; this is safe but optional
  # API_BASE_URL = "https://posalpro.netlify.app/api"

  # Prisma engine settings (non-secrets) - force library engine, not Data Proxy
  # (Prisma settings defined in build environment above)

  # Schema path specified directly in build command (./prisma/schema.prisma)

  # Build toggles (non-secrets)
  # Do NOT skip Prisma generate in Netlify — we must regenerate for linux
  PRISMA_GENERATE_SKIP_DOWNLOAD = "false"
  SKIP_PRISMA_GENERATE = "false"
  NETLIFY_BUILD_TIME = "true"
  BUILD_MODE = "static"

# Explicit production-context overrides (non-secrets only)
[context.production.environment]
  # Node & Next config
  NODE_VERSION = "22"
  NODE_OPTIONS = "--max-old-space-size=2048"
  NEXT_USE_NETLIFY_EDGE = "false"
  NEXT_TELEMETRY_DISABLED = "1"

  # Safe toggles
  ANALYTICS_ENABLED = "true"
  API_BASE_URL = "https://posalpro.netlify.app/api"

  # Prisma engine settings - consistent with build environment
  # (Prisma settings inherited from build environment above)
  # Binary engine type for direct PostgreSQL connections

[[plugins]]
  package = "@netlify/plugin-nextjs"

# API routes are handled automatically by @netlify/plugin-nextjs

# Set proper content type for API responses
[[headers]]
  for = "/api/*"
  [headers.values]
    Content-Type = "application/json; charset=utf-8"
    # CORS is handled dynamically in Next.js middleware with an origin allowlist.
    # Remove static wildcard CORS headers to avoid conflicts.
    Cache-Control = "no-cache, no-store, must-revalidate"
    Pragma = "no-cache"
    Expires = "0"

# Optimize static files
[[headers]]
  for = "/_next/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"

# Functions are managed by @netlify/plugin-nextjs

[functions.pdf]
  # Bundle Puppeteer/Chromium only for the dedicated PDF function
  node_bundler = "esbuild"
  external_node_modules = ["puppeteer-core", "@sparticuz/chromium"]

# Database initialization hook
[dev]
  command = "npm run dev:smart"

# Add specific image optimization handling
[[redirects]]
  from = "/_next/image"
  to = "/.netlify/images"
  status = 200

# Catch-all redirect removed - using Next.js App Router without SPA mode

[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    X-Content-Type-Options = "nosniff"
    Referrer-Policy = "strict-origin-when-cross-origin"
