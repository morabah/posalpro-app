generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                      @id @default(cuid())
  email                    String                      @unique
  name                     String
  password                 String
  department               String
  status                   UserStatus                  @default(ACTIVE)
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt
  lastLogin                DateTime?
  accessibilityConfig      AccessibilityConfiguration?
  approvalDecisions        ApprovalDecision[]
  approvalWorkflows        ApprovalWorkflow[]
  auditLogs                AuditLog[]
  communicationPrefs       CommunicationPreferences?
  createdContent           Content[]
  contentAccessLogs        ContentAccessLog[]
  hypothesisEvents         HypothesisValidationEvent[]
  notificationDeliveries   NotificationDelivery[]
  productRelationships     ProductRelationship[]
  createdProposals         Proposal[]                  @relation("ProposalCreator")
  securityEvents           SecurityEvent[]
  temporaryAccess          TemporaryAccess[]
  analyticsProfile         UserAnalyticsProfile?
  permissions              UserPermission[]
  preferences              UserPreferences?
  roles                    UserRole[]
  sessions                 UserSession[]
  validationExecutions     ValidationExecution[]
  validationIssuesResolved ValidationIssue[]
  validationRules          ValidationRule[]
  assignedProposals        Proposal[]                  @relation("ProposalAssignees")

  @@map("users")
}

model Role {
  id                      String           @id @default(cuid())
  name                    String           @unique
  description             String
  level                   Int
  isSystem                Boolean          @default(false)
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  parentId                String?
  performanceExpectations Json?
  contextRules            ContextRule[]
  permissions             RolePermission[]
  parent                  Role?            @relation("RoleHierarchy", fields: [parentId], references: [id])
  children                Role[]           @relation("RoleHierarchy")
  userRoles               UserRole[]

  @@map("roles")
}

model Permission {
  id              String           @id @default(cuid())
  resource        String
  action          String
  scope           PermissionScope  @default(ALL)
  constraints     Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([resource, action, scope])
  @@map("permissions")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime  @default(now())
  assignedBy String
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String
  expiresAt    DateTime?
  isActive     Boolean    @default(true)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model ContextRule {
  id        String          @id @default(cuid())
  roleId    String
  attribute String
  operator  ContextOperator
  value     Json
  effect    ContextEffect
  createdAt DateTime        @default(now())
  role      Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("context_rules")
}

model TemporaryAccess {
  id        String                @id @default(cuid())
  userId    String
  roleId    String
  grantedBy String
  reason    String
  expiresAt DateTime
  status    TemporaryAccessStatus @default(ACTIVE)
  createdAt DateTime              @default(now())
  revokedAt DateTime?
  revokedBy String?
  user      User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("temporary_access")
}

model UserPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  theme               String   @default("system")
  language            String   @default("en")
  analyticsConsent    Boolean  @default(false)
  performanceTracking Boolean  @default(false)
  dashboardLayout     Json?
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserAnalyticsProfile {
  id                      String             @id @default(cuid())
  userId                  String             @unique
  performanceMetrics      Json
  hypothesisContributions Json
  skillAssessments        Json
  efficiencyRatings       Json
  lastAssessment          DateTime           @default(now())
  performanceTrends       PerformanceTrend[]
  user                    User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_analytics_profiles")
}

model PerformanceTrend {
  id         String               @id @default(cuid())
  profileId  String
  metric     String
  values     Json
  trend      TrendDirection
  confidence Float
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  profile    UserAnalyticsProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("performance_trends")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  refreshToken String?  @unique
  ipAddress    String
  userAgent    String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastUsed     DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model AuditLog {
  id           String        @id @default(cuid())
  userId       String?
  userRole     String?
  action       String
  entity       String
  entityId     String
  changes      Json
  ipAddress    String
  userAgent    String
  success      Boolean
  errorMessage String?
  severity     AuditSeverity
  category     AuditCategory
  timestamp    DateTime      @default(now())
  user         User?         @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
  @@index([entity, entityId])
  @@index([timestamp, severity])
  @@map("audit_logs")
}

model SecurityEvent {
  id        String              @id @default(cuid())
  userId    String?
  type      SecurityEventType
  ipAddress String
  details   Json
  riskLevel RiskLevel
  status    SecurityEventStatus @default(DETECTED)
  timestamp DateTime            @default(now())
  user      User?               @relation(fields: [userId], references: [id])
  responses SecurityResponse[]

  @@index([timestamp, riskLevel])
  @@index([type, status])
  @@map("security_events")
}

model SecurityResponse {
  id          String        @id @default(cuid())
  eventId     String
  action      String
  performedBy String
  result      String
  notes       String?
  timestamp   DateTime      @default(now())
  event       SecurityEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("security_responses")
}

model CommunicationPreferences {
  id              String   @id @default(cuid())
  userId          String   @unique
  language        String   @default("en")
  timezone        String   @default("UTC")
  quietHoursStart String?
  quietHoursEnd   String?
  channels        Json
  frequency       Json
  categories      Json
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("communication_preferences")
}

model NotificationDelivery {
  id            String                    @id @default(cuid())
  templateId    String
  recipientId   String
  recipientType NotificationRecipientType
  channel       NotificationChannel
  status        NotificationStatus        @default(PENDING)
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  attempts      Int                       @default(0)
  errorMessage  String?
  metadata      Json?
  recipient     User                      @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([status, sentAt])
  @@index([recipientId, readAt])
  @@map("notification_deliveries")
}

model AccessibilityConfiguration {
  id                  String                    @id @default(cuid())
  userId              String                    @unique
  complianceLevel     AccessibilityLevel        @default(AA)
  preferences         Json
  assistiveTechnology Json
  customizations      Json
  lastUpdated         DateTime                  @updatedAt
  user                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  testResults         AccessibilityTestResult[]

  @@map("accessibility_configurations")
}

model AccessibilityTestResult {
  id          String                     @id @default(cuid())
  configId    String
  testType    AccessibilityTestType
  standard    AccessibilityStandard
  component   String
  passed      Boolean
  violations  Json
  testedAt    DateTime                   @default(now())
  testedBy    String
  environment String
  config      AccessibilityConfiguration @relation(fields: [configId], references: [id], onDelete: Cascade)

  @@map("accessibility_test_results")
}

model HypothesisValidationEvent {
  id                     String         @id @default(cuid())
  userId                 String
  hypothesis             HypothesisType
  userStoryId            String
  componentId            String
  action                 String
  measurementData        Json
  targetValue            Float
  actualValue            Float
  performanceImprovement Float
  userRole               String
  sessionId              String
  testCaseId             String?
  timestamp              DateTime       @default(now())
  user                   User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([hypothesis, timestamp])
  @@index([userId, hypothesis])
  @@map("hypothesis_validation_events")
}

model UserStoryMetrics {
  id                 String                @id @default(cuid())
  userStoryId        String                @unique
  hypothesis         String[]
  acceptanceCriteria String[]
  performanceTargets Json
  actualPerformance  Json
  completionRate     Float                 @default(0)
  passedCriteria     String[]              @default([])
  failedCriteria     String[]              @default([])
  baselineMetrics    Json?
  lastUpdated        DateTime              @default(now()) @updatedAt
  createdAt          DateTime              @default(now())
  testResults        TestExecutionResult[]

  @@index([userStoryId])
  @@index([completionRate])
  @@map("user_story_metrics")
}

model PerformanceBaseline {
  id                    String    @id @default(cuid())
  hypothesis            String
  metricName            String
  baselineValue         Float
  targetImprovement     Float
  currentValue          Float?
  improvementPercentage Float?
  measurementUnit       String
  collectionDate        DateTime  @default(now())
  validUntil            DateTime?
  sampleSize            Int
  confidence            Float
  environment           String    @default("development")
  methodology           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([hypothesis, metricName, collectionDate])
  @@index([hypothesis, metricName])
  @@index([collectionDate])
  @@map("performance_baselines")
}

model ComponentTraceability {
  id                 String               @id @default(cuid())
  componentName      String               @unique
  userStories        String[]             @default([])
  acceptanceCriteria String[]             @default([])
  methods            String[]             @default([])
  hypotheses         String[]             @default([])
  testCases          String[]             @default([])
  analyticsHooks     String[]             @default([])
  lastValidated      DateTime             @default(now())
  validationStatus   ValidationStatusType @default(PENDING)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  testCaseRelations  TestCase[]

  @@index([componentName])
  @@index([validationStatus])
  @@index([userStories])
  @@map("component_traceability")
}

model TestCase {
  id                          String                 @id @default(cuid())
  userStory                   String
  hypothesis                  String
  actor                       String
  preconditions               String[]               @default([])
  testSteps                   String[]               @default([])
  acceptanceCriteria          String[]               @default([])
  measurementPoints           Json
  successThresholds           Json
  instrumentationRequirements String[]               @default([])
  status                      TestStatusType         @default(DRAFT)
  lastExecuted                DateTime?
  passRate                    Float                  @default(0)
  componentId                 String?
  createdAt                   DateTime               @default(now())
  updatedAt                   DateTime               @updatedAt
  component                   ComponentTraceability? @relation(fields: [componentId], references: [id])
  executions                  TestExecutionResult[]

  @@index([userStory])
  @@index([hypothesis])
  @@index([status])
  @@map("test_cases")
}

model TestExecutionResult {
  id               String           @id @default(cuid())
  testCaseId       String
  userStoryId      String
  hypothesis       String
  executed         Boolean          @default(false)
  passed           Boolean?
  executionTime    Int
  metrics          Json?
  errors           String[]         @default([])
  environment      String           @default("development")
  executedBy       String?
  timestamp        DateTime         @default(now())
  testCase         TestCase         @relation(fields: [testCaseId], references: [id], onDelete: Cascade)
  userStoryMetrics UserStoryMetrics @relation(fields: [userStoryId], references: [userStoryId], onDelete: Cascade)

  @@index([testCaseId])
  @@index([userStoryId])
  @@index([hypothesis, timestamp])
  @@index([passed, timestamp])
  @@map("test_execution_results")
}

model BaselineMetrics {
  id          String    @id @default(cuid())
  hypothesis  String
  metric      String
  value       Float
  unit        String
  collectedAt DateTime  @default(now())
  validUntil  DateTime?
  sampleSize  Int
  environment String    @default("development")
  methodology String
  metadata    Json?
  createdAt   DateTime  @default(now())

  @@unique([hypothesis, metric, collectedAt])
  @@index([hypothesis, metric])
  @@index([collectedAt])
  @@map("baseline_metrics")
}

model Customer {
  id           String            @id @default(cuid())
  name         String
  email        String?
  phone        String?
  website      String?
  address      String?
  industry     String?
  companySize  String?
  revenue      Float?
  status       CustomerStatus    @default(ACTIVE)
  tier         CustomerTier      @default(STANDARD)
  tags         String[]
  metadata     Json?
  segmentation Json?
  riskScore    Float?
  ltv          Float?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  lastContact  DateTime?
  cloudId      String?
  lastSyncedAt DateTime?
  syncStatus   String?           @default("PENDING")
  contacts     CustomerContact[]
  proposals    Proposal[]

  @@index([status, tier])
  @@index([industry])
  @@index([cloudId])
  @@map("customers")
}

model CustomerContact {
  id         String   @id @default(cuid())
  customerId String
  name       String
  email      String
  phone      String?
  role       String?
  department String?
  isPrimary  Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId, isPrimary])
  @@map("customer_contacts")
}

model Proposal {
  id                String              @id @default(cuid())
  title             String
  description       String?
  customerId        String
  createdBy         String
  status            ProposalStatus      @default(DRAFT)
  version           Int                 @default(1)
  priority          Priority            @default(MEDIUM)
  value             Float?
  currency          String              @default("USD")
  validUntil        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  dueDate           DateTime?
  submittedAt       DateTime?
  approvedAt        DateTime?
  performanceData   Json?
  userStoryTracking Json?
  riskScore         Float?
  tags              String[]
  metadata          Json?
  cloudId           String?
  lastSyncedAt      DateTime?
  syncStatus        String?             @default("PENDING")
  projectType       String?

  // 🚀 STRATEGIC DENORMALIZATION: Pre-calculated metrics for performance
  // Eliminates N+1 queries and improves dashboard/list loading
  creatorName       String?             // Denormalized from User.name
  creatorEmail      String?             // Denormalized from User.email
  customerName      String?             // Denormalized from Customer.name
  customerTier      String?             // Denormalized from Customer.tier
  productCount      Int                 @default(0)    // Count of associated products
  sectionCount      Int                 @default(0)    // Count of proposal sections
  approvalCount     Int                 @default(0)    // Count of approvals
  totalValue        Float?              // Calculated total with products
  completionRate    Float               @default(0)    // Percentage complete (0-100)
  lastActivityAt    DateTime?           // Last modification timestamp
  // Stats updated via triggers or background jobs
  statsUpdatedAt    DateTime?           // When denormalized data was last updated
  approvals         ApprovalExecution[]
  products          ProposalProduct[]
  sections          ProposalSection[]
  creator           User                @relation("ProposalCreator", fields: [createdBy], references: [id])
  customer          Customer            @relation(fields: [customerId], references: [id])
  validationIssues  ValidationIssue[]
  assignedTo        User[]              @relation("ProposalAssignees")

  @@index([status, dueDate])
  @@index([customerId, status])
  @@index([createdBy])
  @@index([cloudId])
  @@map("proposals")
}

model ProposalSection {
  id               String           @id @default(cuid())
  proposalId       String
  title            String
  content          String
  order            Int
  type             SectionType      @default(TEXT)
  validationStatus ValidationStatus @default(NOT_VALIDATED)
  analyticsData    Json?
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  proposal         Proposal         @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId, order])
  @@map("proposal_sections")
}

model ProposalProduct {
  id                 String            @id @default(cuid())
  proposalId         String
  productId          String
  quantity           Int               @default(1)
  unitPrice          Float
  discount           Float             @default(0)
  total              Float
  configuration      Json?
  selectionAnalytics Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  product            Product           @relation(fields: [productId], references: [id])
  proposal           Proposal          @relation(fields: [proposalId], references: [id], onDelete: Cascade)
  validationIssues   ValidationIssue[]

  @@index([proposalId])
  @@index([productId])
  @@map("proposal_products")
}

model Product {
  id                String                @id @default(cuid())
  name              String
  description       String?
  sku               String                @unique
  price             Float
  currency          String                @default("USD")
  category          String[]
  tags              String[]
  attributes        Json?
  images            String[]
  isActive          Boolean               @default(true)
  version           Int                   @default(1)
  usageAnalytics    Json?
  userStoryMappings String[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  relationships     ProductRelationship[] @relation("SourceProduct")
  relatedFrom       ProductRelationship[] @relation("TargetProduct")
  proposalProducts  ProposalProduct[]
  validationRules   ValidationRule[]

  @@index([isActive, category])
  @@index([sku])
  @@index([isActive, category], map: "idx_products_active_category")
  @@map("products")
}

model ProductRelationship {
  id                String           @id @default(cuid())
  sourceProductId   String
  targetProductId   String
  type              RelationshipType
  quantity          Int?
  condition         Json?
  validationHistory Json?
  performanceImpact Json?
  createdBy         String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  creator           User             @relation(fields: [createdBy], references: [id])
  sourceProduct     Product          @relation("SourceProduct", fields: [sourceProductId], references: [id], onDelete: Cascade)
  targetProduct     Product          @relation("TargetProduct", fields: [targetProductId], references: [id], onDelete: Cascade)

  @@index([sourceProductId])
  @@index([targetProductId])
  @@index([type])
  @@map("product_relationships")
}

model Content {
  id                 String             @id @default(cuid())
  title              String
  description        String?
  type               ContentType        @default(TEXT)
  content            String
  tags               String[]
  category           String[]
  searchableText     String?
  keywords           String[]
  quality            Json?
  usage              Json?
  isPublic           Boolean            @default(false)
  allowedRoles       String[]
  searchOptimization Json?
  userStoryTracking  Json?
  version            Int                @default(1)
  isActive           Boolean            @default(true)
  createdBy          String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  cloudId            String?
  lastSyncedAt       DateTime?
  syncStatus         String?            @default("PENDING")
  creator            User               @relation(fields: [createdBy], references: [id])
  accessLogs         ContentAccessLog[]

  @@index([type, isActive])
  @@index([tags])
  @@index([category])
  @@index([cloudId])
  @@index([type, isActive], map: "idx_content_type_active")
  @@map("content")
}

model ContentAccessLog {
  id                String     @id @default(cuid())
  contentId         String
  userId            String
  accessType        AccessType
  userStory         String?
  performanceImpact Float?
  timestamp         DateTime   @default(now())
  content           Content    @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user              User       @relation(fields: [userId], references: [id])

  @@index([contentId, timestamp])
  @@index([userId, accessType])
  @@map("content_access_logs")
}

model ValidationRule {
  id                  String             @id @default(cuid())
  name                String
  description         String?
  category            String
  ruleType            ValidationRuleType
  conditions          Json
  actions             Json
  severity            Severity           @default(WARNING)
  isActive            Boolean            @default(true)
  productId           String?
  executionStats      Json?
  userStoryMappings   String[]
  hypothesesSupported String[]
  createdBy           String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  issues              ValidationIssue[]
  creator             User               @relation(fields: [createdBy], references: [id])
  product             Product?           @relation(fields: [productId], references: [id])

  @@index([category, isActive])
  @@index([ruleType])
  @@map("validation_rules")
}

model ValidationIssue {
  id                 String            @id @default(cuid())
  entityId           String
  entityType         EntityType
  ruleId             String
  severity           Severity
  message            String
  fixSuggestion      String?
  status             IssueStatus       @default(OPEN)
  proposalId         String?
  proposalProductId  String?
  detectedAt         DateTime          @default(now())
  resolvedAt         DateTime?
  resolvedBy         String?
  resolutionMethod   ResolutionMethod?
  performanceMetrics Json?
  userStoryContext   String[]
  proposal           Proposal?         @relation(fields: [proposalId], references: [id])
  proposalProduct    ProposalProduct?  @relation(fields: [proposalProductId], references: [id])
  resolver           User?             @relation(fields: [resolvedBy], references: [id])
  rule               ValidationRule    @relation(fields: [ruleId], references: [id])

  @@index([entityType, status])
  @@index([ruleId, status])
  @@index([severity, detectedAt])
  @@map("validation_issues")
}

model ValidationExecution {
  id                  String     @id @default(cuid())
  entityId            String
  entityType          EntityType
  rulesExecuted       String[]
  executionTime       Int
  issuesFound         Int
  issuesResolved      Int
  performanceScore    Float?
  triggeredBy         String
  userStoryContext    String[]
  hypothesesValidated String[]
  timestamp           DateTime   @default(now())
  trigger             User       @relation(fields: [triggeredBy], references: [id])

  @@index([entityType, timestamp])
  @@index([triggeredBy])
  @@map("validation_executions")
}

model ApprovalWorkflow {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  entityType         EntityType
  isActive           Boolean             @default(true)
  executionStats     Json?
  performanceMetrics Json?
  userStoryMappings  String[]
  createdBy          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  executions         ApprovalExecution[]
  creator            User                @relation(fields: [createdBy], references: [id])
  stages             WorkflowStage[]

  @@index([entityType, isActive])
  @@map("approval_workflows")
}

model WorkflowStage {
  id                  String              @id @default(cuid())
  workflowId          String
  name                String
  description         String?
  order               Int
  approvers           String[]
  conditions          Json?
  actions             Json?
  slaHours            Int?
  isParallel          Boolean             @default(false)
  isOptional          Boolean             @default(false)
  escalationRules     Json?
  performanceTracking Json?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  decisions           ApprovalDecision[]
  executions          ApprovalExecution[]
  workflow            ApprovalWorkflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId, order])
  @@map("workflow_stages")
}

model ApprovalExecution {
  id                 String             @id @default(cuid())
  workflowId         String
  entityId           String
  currentStage       String?
  status             ExecutionStatus    @default(PENDING)
  startedAt          DateTime           @default(now())
  completedAt        DateTime?
  slaCompliance      Boolean?
  proposalId         String?
  performanceMetrics Json?
  userStoryContext   String[]
  decisions          ApprovalDecision[]
  stageExecution     WorkflowStage?     @relation(fields: [currentStage], references: [id])
  proposal           Proposal?          @relation(fields: [proposalId], references: [id])
  workflow           ApprovalWorkflow   @relation(fields: [workflowId], references: [id])

  @@index([workflowId, status])
  @@index([proposalId])
  @@map("approval_executions")
}

model ApprovalDecision {
  id                String            @id @default(cuid())
  executionId       String
  stageId           String
  approverId        String
  decision          DecisionType
  comments          String?
  timeToDecision    Int?
  qualityScore      Float?
  performanceImpact Float?
  timestamp         DateTime          @default(now())
  approver          User              @relation(fields: [approverId], references: [id])
  execution         ApprovalExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)
  stage             WorkflowStage     @relation(fields: [stageId], references: [id])

  @@index([executionId])
  @@index([approverId])
  @@map("approval_decisions")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

enum PermissionScope {
  ALL
  TEAM
  OWN
}

enum ContextOperator {
  EQUALS
  NOT_EQUALS
  CONTAINS
  GREATER_THAN
  LESS_THAN
}

enum ContextEffect {
  GRANT
  DENY
}

enum TemporaryAccessStatus {
  ACTIVE
  EXPIRED
  REVOKED
}

enum TrendDirection {
  IMPROVING
  DECLINING
  STABLE
}

enum AuditSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AuditCategory {
  DATA
  ACCESS
  CONFIGURATION
  SECURITY
  SYSTEM
}

enum SecurityEventType {
  LOGIN_ATTEMPT
  PERMISSION_DENIED
  DATA_ACCESS
  CONFIG_CHANGE
  SUSPICIOUS_ACTIVITY
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SecurityEventStatus {
  DETECTED
  INVESTIGATING
  RESOLVED
  FALSE_POSITIVE
}

enum NotificationRecipientType {
  USER
  ROLE
  GROUP
  EXTERNAL
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  WEBHOOK
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  READ
}

enum AccessibilityLevel {
  AA
  AAA
}

enum AccessibilityTestType {
  AUTOMATED
  MANUAL
  USER_TESTING
}

enum AccessibilityStandard {
  WCAG_2_1_AA
  WCAG_2_1_AAA
  SECTION_508
  EN_301_549
}

enum HypothesisType {
  H1
  H3
  H4
  H6
  H7
  H8
}

enum ValidationStatusType {
  PENDING
  VALID
  INVALID
  NEEDS_REVIEW
}

enum TestStatusType {
  DRAFT
  ACTIVE
  EXECUTED
  PASSED
  FAILED
  DEPRECATED
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  CHURNED
}

enum CustomerTier {
  STANDARD
  PREMIUM
  ENTERPRISE
  VIP
}

enum ProposalStatus {
  DRAFT
  IN_REVIEW
  PENDING_APPROVAL
  APPROVED
  REJECTED
  SUBMITTED
  ACCEPTED
  DECLINED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SectionType {
  TEXT
  PRODUCTS
  TERMS
  PRICING
  CUSTOM
}

enum ValidationStatus {
  VALID
  INVALID
  WARNING
  NOT_VALIDATED
}

enum RelationshipType {
  REQUIRES
  RECOMMENDS
  INCOMPATIBLE
  ALTERNATIVE
  OPTIONAL
}

enum ContentType {
  TEXT
  TEMPLATE
  IMAGE
  DOCUMENT
  MEDIA
}

enum AccessType {
  VIEW
  EDIT
  USE
  DOWNLOAD
}

enum ValidationRuleType {
  COMPATIBILITY
  LICENSE
  CONFIGURATION
  COMPLIANCE
  CUSTOM
}

enum Severity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum IssueStatus {
  OPEN
  RESOLVED
  IGNORED
  FALSE_POSITIVE
}

enum ResolutionMethod {
  AUTO
  MANUAL
  SUGGESTION
}

enum ExecutionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
  ESCALATED
}

enum DecisionType {
  APPROVE
  REJECT
  DELEGATE
  REQUEST_CHANGES
}

enum EntityType {
  PROPOSAL
  CUSTOMER
  PRODUCT
  USER
  ROLE
  CONTENT
  VALIDATION_RULE
  APPROVAL_WORKFLOW
  PROPOSAL_SECTION
  PROPOSAL_PRODUCT
  PRODUCT_RELATIONSHIP
}
