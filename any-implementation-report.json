{
  "timestamp": "2025-09-07T18:51:16.742Z",
  "summary": {
    "totalFiles": 209,
    "totalAnyCount": 2376,
    "criticalFiles": 117,
    "highPriorityFiles": 67
  },
  "patternStats": {
    "typeAnnotation": 287,
    "functionParams": 181,
    "variableDeclarations": 48,
    "objectProperties": 96,
    "typeAssertions": 292,
    "interfaceProperties": 268,
    "classProperties": 268,
    "commentAny": 194,
    "stringAny": 479,
    "genericConstraints": 90,
    "optionalProperties": 11,
    "methodParams": 49,
    "importAny": 8,
    "arrayTypes": 38,
    "unionTypes": 4,
    "recordTypes": 28,
    "returnTypes": 7,
    "exportAny": 21,
    "promiseTypes": 6,
    "indexSignatures": 1
  },
  "results": [
    {
      "file": "src/services/versionHistoryService.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 79,
      "patterns": {
        "typeAnnotation": 12,
        "functionParams": 5,
        "variableDeclarations": 7,
        "objectProperties": 4,
        "typeAssertions": 10,
        "interfaceProperties": 12,
        "classProperties": 12,
        "commentAny": 4,
        "stringAny": 13
      },
      "lines": [
        {
          "lineNumber": 154,
          "content": "const where: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 160,
          "content": "const cursor: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 210,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 409,
          "content": "const cursor: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 459,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 671,
          "content": "const where: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 714,
          "content": "(acc: Record<string, number>, stat: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 792,
          "content": "const where: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 804,
          "content": "const cursor: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 854,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 951,
          "content": "const cursor: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 1001,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 210,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 459,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 714,
          "content": "(acc: Record<string, number>, stat: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 854,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 1001,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 154,
          "content": "const where: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 160,
          "content": "const cursor: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 409,
          "content": "const cursor: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 671,
          "content": "const where: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 792,
          "content": "const where: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 804,
          "content": "const cursor: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 951,
          "content": "const cursor: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 211,
          "content": "const snapshot = version.snapshot as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 216,
          "content": "changeType: version.changeType as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 322,
          "content": "changeType: version.changeType as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 460,
          "content": "const snapshot = version.snapshot as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 465,
          "content": "changeType: version.changeType as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 590,
          "content": "changeType: versionEntry.changeType as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 855,
          "content": "const snapshot = version.snapshot as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 860,
          "content": "changeType: version.changeType as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 1002,
          "content": "const snapshot = version.snapshot as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 1007,
          "content": "changeType: version.changeType as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 154,
          "content": "const where: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 160,
          "content": "const cursor: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 210,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 409,
          "content": "const cursor: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 459,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 671,
          "content": "const where: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 714,
          "content": "(acc: Record<string, number>, stat: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 792,
          "content": "const where: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 804,
          "content": "const cursor: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 854,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 951,
          "content": "const cursor: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 1001,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 154,
          "content": "const where: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 160,
          "content": "const cursor: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 210,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 409,
          "content": "const cursor: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 459,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 671,
          "content": "const where: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 714,
          "content": "(acc: Record<string, number>, stat: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 792,
          "content": "const where: any = {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 804,
          "content": "const cursor: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 854,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 951,
          "content": "const cursor: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 1001,
          "content": "const transformedItems = items.map((version: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/auth/RegistrationForm.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 61,
      "patterns": {
        "typeAnnotation": 11,
        "functionParams": 3,
        "genericConstraints": 1,
        "objectProperties": 4,
        "typeAssertions": 4,
        "interfaceProperties": 10,
        "optionalProperties": 1,
        "classProperties": 10,
        "methodParams": 3,
        "importAny": 4,
        "commentAny": 2,
        "stringAny": 8
      },
      "lines": [
        {
          "lineNumber": 233,
          "content": "data?: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 492,
          "content": "register: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 661,
          "content": "register: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 663,
          "content": "setValue: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 788,
          "content": "register: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 790,
          "content": "setValue: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 298,
          "content": "const Step = dynamic(() => import('./registration/StepUserInfo')) as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 302,
          "content": "const Step = dynamic(() => import('./registration/StepRoleAccess')) as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 306,
          "content": "const Step = dynamic(() => import('./registration/StepNotifications')) as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 310,
          "content": "const Step = dynamic(() => import('./registration/StepConfirmation')) as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 492,
          "content": "register: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 661,
          "content": "register: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 663,
          "content": "setValue: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 788,
          "content": "register: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 790,
          "content": "setValue: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 233,
          "content": "data?: any;",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 492,
          "content": "register: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 661,
          "content": "register: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 663,
          "content": "setValue: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 788,
          "content": "register: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 790,
          "content": "setValue: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 298,
          "content": "const Step = dynamic(() => import('./registration/StepUserInfo')) as any;",
          "pattern": "importAny"
        },
        {
          "lineNumber": 302,
          "content": "const Step = dynamic(() => import('./registration/StepRoleAccess')) as any;",
          "pattern": "importAny"
        },
        {
          "lineNumber": 306,
          "content": "const Step = dynamic(() => import('./registration/StepNotifications')) as any;",
          "pattern": "importAny"
        },
        {
          "lineNumber": 310,
          "content": "const Step = dynamic(() => import('./registration/StepConfirmation')) as any;",
          "pattern": "importAny"
        }
      ]
    },
    {
      "file": "src/components/proposals/ProposalWizard.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 38,
      "patterns": {
        "typeAnnotation": 7,
        "functionParams": 3,
        "variableDeclarations": 4,
        "objectProperties": 2,
        "typeAssertions": 1,
        "interfaceProperties": 7,
        "classProperties": 7,
        "commentAny": 1,
        "stringAny": 6
      },
      "lines": [
        {
          "lineNumber": 351,
          "content": "const s1: any = stepData[1] || {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 388,
          "content": "const s1: any = stepData[1] || {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 401,
          "content": "products: (s4?.products || []).map((p: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 534,
          "content": "stepData[4]?.products?.map((p: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 559,
          "content": "stepData[4]?.products?.map((p: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 401,
          "content": "products: (s4?.products || []).map((p: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 534,
          "content": "stepData[4]?.products?.map((p: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 559,
          "content": "stepData[4]?.products?.map((p: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 351,
          "content": "const s1: any = stepData[1] || {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 388,
          "content": "const s1: any = stepData[1] || {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 361,
          "content": "await createProposal.mutateAsync(proposalBody as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 351,
          "content": "const s1: any = stepData[1] || {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 388,
          "content": "const s1: any = stepData[1] || {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 401,
          "content": "products: (s4?.products || []).map((p: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 534,
          "content": "stepData[4]?.products?.map((p: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 559,
          "content": "stepData[4]?.products?.map((p: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 351,
          "content": "const s1: any = stepData[1] || {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 388,
          "content": "const s1: any = stepData[1] || {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 401,
          "content": "products: (s4?.products || []).map((p: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 534,
          "content": "stepData[4]?.products?.map((p: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 559,
          "content": "stepData[4]?.products?.map((p: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 463,
          "content": "// Allow jumping to any visible step",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/ui/FormField.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 25,
      "patterns": {
        "typeAnnotation": 5,
        "arrayTypes": 2,
        "functionParams": 3,
        "variableDeclarations": 1,
        "objectProperties": 1,
        "interfaceProperties": 4,
        "unionTypes": 1,
        "optionalProperties": 1,
        "classProperties": 4,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 12,
          "content": "value?: any; // Optional for RHF/uncontrolled compatibility",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 13,
          "content": "onChange?: (value: any | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void; // Supports both value and event signatures",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 77,
          "content": "let newValue: any = e.target.value;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 84,
          "content": "const handleBlur = (...args: any[]) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 14,
          "content": "onBlur?: (...args: any[]) => void; // Updated for React Hook Form compatibility",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 84,
          "content": "const handleBlur = (...args: any[]) => {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 13,
          "content": "onChange?: (value: any | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void; // Supports both value and event signatures",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 84,
          "content": "const handleBlur = (...args: any[]) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 77,
          "content": "let newValue: any = e.target.value;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 13,
          "content": "onChange?: (value: any | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void; // Supports both value and event signatures",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 77,
          "content": "let newValue: any = e.target.value;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 84,
          "content": "const handleBlur = (...args: any[]) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 13,
          "content": "onChange?: (value: any | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void; // Supports both value and event signatures",
          "pattern": "unionTypes"
        },
        {
          "lineNumber": 12,
          "content": "value?: any; // Optional for RHF/uncontrolled compatibility",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 13,
          "content": "onChange?: (value: any | React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void; // Supports both value and event signatures",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 77,
          "content": "let newValue: any = e.target.value;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 84,
          "content": "const handleBlur = (...args: any[]) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/proposals/ApprovalQueue.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 22,
      "patterns": {
        "typeAnnotation": 3,
        "recordTypes": 1,
        "functionParams": 1,
        "genericConstraints": 1,
        "variableDeclarations": 1,
        "objectProperties": 2,
        "typeAssertions": 2,
        "interfaceProperties": 3,
        "classProperties": 3,
        "commentAny": 1,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 164,
          "content": "const items: QueueItem[] = (responseData?.items || []).map((item: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 366,
          "content": "let aValue: any, bValue: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 37,
          "content": "list: (filters: Record<string, any>) => [...APPROVAL_QUEUE_QUERY_KEYS.lists(), { filters }] as const,",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 164,
          "content": "const items: QueueItem[] = (responseData?.items || []).map((item: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 37,
          "content": "list: (filters: Record<string, any>) => [...APPROVAL_QUEUE_QUERY_KEYS.lists(), { filters }] as const,",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 366,
          "content": "let aValue: any, bValue: any;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 161,
          "content": "const apiResponse = response as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 225,
          "content": "const responseData = (response as any)?.data || response;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 164,
          "content": "const items: QueueItem[] = (responseData?.items || []).map((item: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 366,
          "content": "let aValue: any, bValue: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 164,
          "content": "const items: QueueItem[] = (responseData?.items || []).map((item: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 366,
          "content": "let aValue: any, bValue: any;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/proposals/ProposalList.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 22,
      "patterns": {
        "typeAnnotation": 3,
        "functionParams": 3,
        "objectProperties": 3,
        "interfaceProperties": 3,
        "classProperties": 3,
        "methodParams": 1,
        "commentAny": 3,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 264,
          "content": "filters: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 473,
          "content": "function ProposalCard({ proposal }: { proposal: any }) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 698,
          "content": "{proposal.teamMembers.slice(0, 3).map((member: any, index: number) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 473,
          "content": "function ProposalCard({ proposal }: { proposal: any }) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 698,
          "content": "{proposal.teamMembers.slice(0, 3).map((member: any, index: number) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 473,
          "content": "function ProposalCard({ proposal }: { proposal: any }) {",
          "pattern": "objectProperties"
        },
        {
          "lineNumber": 264,
          "content": "filters: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 473,
          "content": "function ProposalCard({ proposal }: { proposal: any }) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 698,
          "content": "{proposal.teamMembers.slice(0, 3).map((member: any, index: number) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 264,
          "content": "filters: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 473,
          "content": "function ProposalCard({ proposal }: { proposal: any }) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 698,
          "content": "{proposal.teamMembers.slice(0, 3).map((member: any, index: number) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 473,
          "content": "function ProposalCard({ proposal }: { proposal: any }) {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/components/products/AdvancedProductModal.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 21,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 2,
        "objectProperties": 1,
        "typeAssertions": 3,
        "interfaceProperties": 2,
        "classProperties": 2,
        "commentAny": 4,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 62,
          "content": "onSuccess?: (product: any) => void;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 140,
          "content": "const updateCustomizationOption = useCallback((index: number, updates: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 62,
          "content": "onSuccess?: (product: any) => void;",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 140,
          "content": "const updateCustomizationOption = useCallback((index: number, updates: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 329,
          "content": "onClick={() => setActiveTab(tab.id as any)}",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 443,
          "content": "setFormData(prev => ({ ...prev, priceModel: e.target.value as any }))",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 678,
          "content": "setFormData(prev => ({ ...prev, status: e.target.value as any }))",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 62,
          "content": "onSuccess?: (product: any) => void;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 140,
          "content": "const updateCustomizationOption = useCallback((index: number, updates: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 62,
          "content": "onSuccess?: (product: any) => void;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 140,
          "content": "const updateCustomizationOption = useCallback((index: number, updates: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/dashboard/ExecutiveDashboard.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 20,
      "patterns": {
        "typeAnnotation": 3,
        "functionParams": 3,
        "typeAssertions": 1,
        "interfaceProperties": 3,
        "classProperties": 3,
        "commentAny": 2,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 155,
          "content": "const revenueData = (responseData.revenueChart || []).map((item: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 162,
          "content": "const teamData = (responseData.teamPerformance || []).map((item: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 171,
          "content": "const pipelineStages = (responseData.pipelineStages || []).map((item: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 155,
          "content": "const revenueData = (responseData.revenueChart || []).map((item: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 162,
          "content": "const teamData = (responseData.teamPerformance || []).map((item: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 171,
          "content": "const pipelineStages = (responseData.pipelineStages || []).map((item: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 110,
          "content": "const dashboardData = data as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 155,
          "content": "const revenueData = (responseData.revenueChart || []).map((item: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 162,
          "content": "const teamData = (responseData.teamPerformance || []).map((item: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 171,
          "content": "const pipelineStages = (responseData.pipelineStages || []).map((item: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 155,
          "content": "const revenueData = (responseData.revenueChart || []).map((item: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 162,
          "content": "const teamData = (responseData.teamPerformance || []).map((item: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 171,
          "content": "const pipelineStages = (responseData.pipelineStages || []).map((item: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 454,
          "content": "{/* Main Dashboard Sections (vertical flow to avoid any overlap) */}",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/proposals/wizard/persistence.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 17,
      "patterns": {
        "typeAnnotation": 3,
        "arrayTypes": 1,
        "genericConstraints": 1,
        "variableDeclarations": 2,
        "interfaceProperties": 2,
        "returnTypes": 1,
        "classProperties": 2,
        "exportAny": 1,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 80,
          "content": "const dbProducts: any[] = Array.isArray(verify?.products) ? verify.products : [];",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 89,
          "content": "const localStep4: any = useProposalStore.getState().stepData[4] || {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 128,
          "content": "export function buildCreateBodyFromStore(): any {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 80,
          "content": "const dbProducts: any[] = Array.isArray(verify?.products) ? verify.products : [];",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 78,
          "content": "const verify = await http.get<any>(`/api/proposals/${proposalId}?_t=${Date.now()}`);",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 80,
          "content": "const dbProducts: any[] = Array.isArray(verify?.products) ? verify.products : [];",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 89,
          "content": "const localStep4: any = useProposalStore.getState().stepData[4] || {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 80,
          "content": "const dbProducts: any[] = Array.isArray(verify?.products) ? verify.products : [];",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 89,
          "content": "const localStep4: any = useProposalStore.getState().stepData[4] || {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 128,
          "content": "export function buildCreateBodyFromStore(): any {",
          "pattern": "returnTypes"
        },
        {
          "lineNumber": 80,
          "content": "const dbProducts: any[] = Array.isArray(verify?.products) ? verify.products : [];",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 89,
          "content": "const localStep4: any = useProposalStore.getState().stepData[4] || {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 128,
          "content": "export function buildCreateBodyFromStore(): any {",
          "pattern": "exportAny"
        }
      ]
    },
    {
      "file": "src/components/coordination/CommunicationCenter.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 16,
      "patterns": {
        "typeAnnotation": 1,
        "objectProperties": 1,
        "typeAssertions": 4,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 2,
        "stringAny": 6
      },
      "lines": [
        {
          "lineNumber": 519,
          "content": "// Heuristic: any @mention in content",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 524,
          "content": "list = list.filter(m => (m as any).type === 'task' || (m.tags || []).includes('task'));",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 531,
          "content": "list = list.filter(m => (m as any).type === 'task' || (m.tags || []).includes('task'));",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 569,
          "content": "messages.filter(m => (m as any).type === 'task' || (m.tags || []).includes('task')).length,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 850,
          "content": "m => (m as any).type === 'task' || (m.tags || []).includes('task')",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 519,
          "content": "// Heuristic: any @mention in content",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 519,
          "content": "// Heuristic: any @mention in content",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 397,
          "content": "// Coercion helpers to satisfy strict typing without using any",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 519,
          "content": "// Heuristic: any @mention in content",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/features/admin/components/RoleManager.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 16,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 2,
        "objectProperties": 2,
        "interfaceProperties": 2,
        "classProperties": 2,
        "commentAny": 3,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 507,
          "content": "{roles.map((role: any) => (",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 562,
          "content": "{role.permissionsList.slice(0, 3).map((permission: any, index: number) => (",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 507,
          "content": "{roles.map((role: any) => (",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 562,
          "content": "{role.permissionsList.slice(0, 3).map((permission: any, index: number) => (",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 507,
          "content": "{roles.map((role: any) => (",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 562,
          "content": "{role.permissionsList.slice(0, 3).map((permission: any, index: number) => (",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 507,
          "content": "{roles.map((role: any) => (",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 562,
          "content": "{role.permissionsList.slice(0, 3).map((permission: any, index: number) => (",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 216,
          "content": "// âœ… FIXED: Use proper type instead of any",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/layout/AppLayout.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 14,
      "patterns": {
        "typeAnnotation": 1,
        "arrayTypes": 3,
        "functionParams": 1,
        "genericConstraints": 2,
        "objectProperties": 1,
        "typeAssertions": 2,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 277,
          "content": "items: any[];",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 260,
          "content": "<Section title=\"Overdue\" items={(overdueQuery.data as any[]) || []} onClose={() => setNotifOpen(false)} />",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 261,
          "content": "<Section title=\"Due in next 14 days\" items={(nearDueQuery.data as any[]) || []} onClose={() => setNotifOpen(false)} />",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 277,
          "content": "items: any[];",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 260,
          "content": "<Section title=\"Overdue\" items={(overdueQuery.data as any[]) || []} onClose={() => setNotifOpen(false)} />",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 260,
          "content": "<Section title=\"Overdue\" items={(overdueQuery.data as any[]) || []} onClose={() => setNotifOpen(false)} />",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 261,
          "content": "<Section title=\"Due in next 14 days\" items={(nearDueQuery.data as any[]) || []} onClose={() => setNotifOpen(false)} />",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 277,
          "content": "items: any[];",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 277,
          "content": "items: any[];",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/dashboard/EnhancedDashboard.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 13,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 2,
        "typeAssertions": 1,
        "interfaceProperties": 2,
        "classProperties": 2,
        "commentAny": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 705,
          "content": "(data.revenueHistory || []).map((item: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 714,
          "content": "const funnelData: ConversionFunnel[] = (data.conversionFunnel || []).map((stage: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 705,
          "content": "(data.revenueHistory || []).map((item: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 714,
          "content": "const funnelData: ConversionFunnel[] = (data.conversionFunnel || []).map((stage: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 670,
          "content": "const responseData = dashboardData as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 705,
          "content": "(data.revenueHistory || []).map((item: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 714,
          "content": "const funnelData: ConversionFunnel[] = (data.conversionFunnel || []).map((stage: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 705,
          "content": "(data.revenueHistory || []).map((item: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 714,
          "content": "const funnelData: ConversionFunnel[] = (data.conversionFunnel || []).map((stage: any) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/services/userService.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 13,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 2,
        "objectProperties": 2,
        "interfaceProperties": 2,
        "classProperties": 2,
        "methodParams": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 83,
          "content": "private transformUserForComponent(user: any): UserEntity {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 104,
          "content": "user.roles = user.roles.map((roleEntry: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 83,
          "content": "private transformUserForComponent(user: any): UserEntity {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 104,
          "content": "user.roles = user.roles.map((roleEntry: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 83,
          "content": "private transformUserForComponent(user: any): UserEntity {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 104,
          "content": "user.roles = user.roles.map((roleEntry: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 83,
          "content": "private transformUserForComponent(user: any): UserEntity {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 104,
          "content": "user.roles = user.roles.map((roleEntry: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 83,
          "content": "private transformUserForComponent(user: any): UserEntity {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/components/products/ProductFormFields.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 9,
      "patterns": {
        "typeAnnotation": 2,
        "objectProperties": 1,
        "interfaceProperties": 2,
        "classProperties": 2,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 17,
          "content": "categoriesData: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 17,
          "content": "categoriesData: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 17,
          "content": "categoriesData: any;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/features/admin/components/DatabaseSyncPanel.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 9,
      "patterns": {
        "typeAnnotation": 2,
        "objectProperties": 1,
        "interfaceProperties": 2,
        "classProperties": 2,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 82,
          "content": "localValue: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 82,
          "content": "localValue: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 82,
          "content": "localValue: any;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/hooks/useProductForm.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 9,
      "patterns": {
        "typeAnnotation": 2,
        "genericConstraints": 1,
        "objectProperties": 1,
        "interfaceProperties": 2,
        "classProperties": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 30,
          "content": "categoriesData: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 26,
          "content": "validation: ReturnType<typeof useFormValidation<any>>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 30,
          "content": "categoriesData: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 30,
          "content": "categoriesData: any;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/ui/forms/CategoryDropdown.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 8,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "objectProperties": 1,
        "typeAssertions": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 89,
          "content": "return data.categories.map((cat: any) => cat.name);",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 89,
          "content": "return data.categories.map((cat: any) => cat.name);",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 87,
          "content": "const data = (categoriesData as any).data;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 89,
          "content": "return data.categories.map((cat: any) => cat.name);",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 89,
          "content": "return data.categories.map((cat: any) => cat.name);",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/hooks/useApiClient.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 8,
      "patterns": {
        "typeAssertions": 4,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 127,
          "content": "if ('error' in parsed && typeof (parsed as any).error === 'string') {",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 130,
          "content": "if ('message' in parsed && typeof (parsed as any).message === 'string') {",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 127,
          "content": "if ('error' in parsed && typeof (parsed as any).error === 'string') {",
          "pattern": "stringAny"
        },
        {
          "lineNumber": 130,
          "content": "if ('message' in parsed && typeof (parsed as any).message === 'string') {",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/hooks/useEmailValidation.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 7,
      "patterns": {
        "typeAnnotation": 1,
        "objectProperties": 1,
        "optionalProperties": 1,
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 38,
          "content": "conflictingCustomer?: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 38,
          "content": "conflictingCustomer?: any;",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 157,
          "content": "// Clear any existing timer",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/hooks/useFormValidation.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 7,
      "patterns": {
        "recordTypes": 1,
        "genericConstraints": 1,
        "typeAssertions": 1,
        "exportAny": 1,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 67,
          "content": "export function useFormValidation<T extends Record<string, any>>(",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 67,
          "content": "export function useFormValidation<T extends Record<string, any>>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 149,
          "content": "// âœ… Check if form has any errors",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 67,
          "content": "export function useFormValidation<T extends Record<string, any>>(",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 149,
          "content": "// âœ… Check if form has any errors",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/dashboard/analytics/NLQComponents.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 352,
          "content": "onBuildQuery: (query: any) => void;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 352,
          "content": "onBuildQuery: (query: any) => void;",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 352,
          "content": "onBuildQuery: (query: any) => void;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 352,
          "content": "onBuildQuery: (query: any) => void;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/dashboard/integrations/MarketingAutomationComponents.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 240,
          "content": "onSave: (workflow: any) => void;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 240,
          "content": "onSave: (workflow: any) => void;",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 240,
          "content": "onSave: (workflow: any) => void;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 240,
          "content": "onSave: (workflow: any) => void;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/proposals/ProposalForm.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 85,
          "content": "const onSubmit = async (data: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 85,
          "content": "const onSubmit = async (data: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 85,
          "content": "const onSubmit = async (data: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 85,
          "content": "const onSubmit = async (data: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "commentAny": 1,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 62,
          "content": "// âœ… FIXED: Replace any with proper type",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 79,
          "content": "// âœ… FIXED: Replace any with proper type",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 112,
          "content": "// âœ… FIXED: Replace any with proper type",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 114,
          "content": "// âœ… FIXED: Replace any with proper type",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 116,
          "content": "// âœ… FIXED: Replace any with proper type",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 148,
          "content": "// âœ… FIXED: Replace any with proper type",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 302,
          "content": "// âœ… FIXED: Use proper type instead of any",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/proposals/steps/ReviewStep.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 90,
          "content": "productData?.products?.reduce((sum: number, product: any) => sum + (product.unitPrice * product.quantity), 0) || 0",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 90,
          "content": "productData?.products?.reduce((sum: number, product: any) => sum + (product.unitPrice * product.quantity), 0) || 0",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 90,
          "content": "productData?.products?.reduce((sum: number, product: any) => sum + (product.unitPrice * product.quantity), 0) || 0",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 90,
          "content": "productData?.products?.reduce((sum: number, product: any) => sum + (product.unitPrice * product.quantity), 0) || 0",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/features/dashboard/hooks/useDashboard.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 805,
          "content": "notifications: oldData.notifications.map((notification: any) =>",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 805,
          "content": "notifications: oldData.notifications.map((notification: any) =>",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 805,
          "content": "notifications: oldData.notifications.map((notification: any) =>",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 805,
          "content": "notifications: oldData.notifications.map((notification: any) =>",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/features/proposals/hooks/useProposalServerState.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "methodParams": 1
      },
      "lines": [
        {
          "lineNumber": 27,
          "content": "wizardData: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 27,
          "content": "wizardData: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 27,
          "content": "wizardData: any;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/hooks/useHybridProducts.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "arrayTypes": 1,
        "functionParams": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 313,
          "content": "(productId: string, customizations: any[] = []) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 313,
          "content": "(productId: string, customizations: any[] = []) => {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 313,
          "content": "(productId: string, customizations: any[] = []) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 313,
          "content": "(productId: string, customizations: any[] = []) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 313,
          "content": "(productId: string, customizations: any[] = []) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/hooks/useSkuValidation.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "objectProperties": 1,
        "optionalProperties": 1,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 24,
          "content": "conflictingProduct?: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 24,
          "content": "conflictingProduct?: any;",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 131,
          "content": "// Clear any existing timer",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/services/proposalService.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "methodParams": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 288,
          "content": "private transformWizardPayloadForAPI(proposal: any): ProposalUpdate {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 288,
          "content": "private transformWizardPayloadForAPI(proposal: any): ProposalUpdate {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 288,
          "content": "private transformWizardPayloadForAPI(proposal: any): ProposalUpdate {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 288,
          "content": "private transformWizardPayloadForAPI(proposal: any): ProposalUpdate {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 288,
          "content": "private transformWizardPayloadForAPI(proposal: any): ProposalUpdate {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/components/customers/CustomerCreationSidebar.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 107,
          "content": "const onSubmit = async (data: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 107,
          "content": "const onSubmit = async (data: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 107,
          "content": "const onSubmit = async (data: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 107,
          "content": "const onSubmit = async (data: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/components/dashboard/analytics/AnomalyDetectionComponents.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 301,
          "content": "onUpdateSettings: (settings: any) => void;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 301,
          "content": "onUpdateSettings: (settings: any) => void;",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 301,
          "content": "onUpdateSettings: (settings: any) => void;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 301,
          "content": "onUpdateSettings: (settings: any) => void;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/features/version-history/hooks/useVersionHistory.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 16,
          "content": "let versionHistoryService: any = null;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 16,
          "content": "let versionHistoryService: any = null;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 16,
          "content": "let versionHistoryService: any = null;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 16,
          "content": "let versionHistoryService: any = null;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/hooks/useHttpClient.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 5,
      "patterns": {
        "typeAssertions": 2,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 210,
          "content": "code: error instanceof Error && 'code' in error ? (error as any).code : 'UNKNOWN_ERROR',",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 229,
          "content": "code: error instanceof Error && 'code' in error ? (error as any).code : 'UNKNOWN_ERROR',",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 210,
          "content": "code: error instanceof Error && 'code' in error ? (error as any).code : 'UNKNOWN_ERROR',",
          "pattern": "stringAny"
        },
        {
          "lineNumber": 229,
          "content": "code: error instanceof Error && 'code' in error ? (error as any).code : 'UNKNOWN_ERROR',",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/components/proposals/ApprovalQueue.backup.before-react-query.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 4,
      "patterns": {
        "commentAny": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 132,
          "content": "// âœ… FIXED: Use proper type instead of any",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 139,
          "content": "// âœ… FIXED: Use proper type instead of any",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 304,
          "content": "// âœ… FIXED: Use proper type instead of any",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/proposals/UnifiedProposalList.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 4,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 247,
          "content": "const apiStatus = dashboardStatus === 'won' ? ('ACCEPTED' as any) : undefined; // 'active'/'overdue' handled client-side",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 257,
          "content": "// Extract proposals from infinite query data and filter out any undefined/null items",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 247,
          "content": "const apiStatus = dashboardStatus === 'won' ? ('ACCEPTED' as any) : undefined; // 'active'/'overdue' handled client-side",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/features/proposals/hooks/useProposals.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 4,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 226,
          "content": "sortBy: sortBy as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 353,
          "content": "// 5. Additional invalidation for any proposal-related queries",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/analytics/RealTimeAnalyticsOptimizer.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 552,
          "content": "onClick={() => setSelectedView(tab.id as any)}",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/components/dashboard/UnifiedDashboardStats.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 138,
          "content": "const responseData = dashboardData as any;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/components/products/AdvancedProductList.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 543,
          "content": "onChange={e => onFiltersChange({ ...filters, status: e.target.value as any })}",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/components/products/ProductCreateFormRefactored.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 36,
          "content": "resolver: zodResolver(productCreateValidationSchema as any),",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/features/proposals/schemas.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "stringAny": 3
      },
      "lines": []
    },
    {
      "file": "src/hooks/auth/useRBAC.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 70,
          "content": "// Check if user has any admin role (both formats)",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 70,
          "content": "// Check if user has any admin role (both formats)",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/hooks/useMemoryOptimization.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "commentAny": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 79,
          "content": "// Clear any existing interval",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 85,
          "content": "// Clear any cached data",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/services/adminService.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 350,
          "content": "status: error instanceof Error && 'status' in error ? (error as any).status : undefined,",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/services/dashboardService.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 3,
      "patterns": {
        "promiseTypes": 1,
        "genericConstraints": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 209,
          "content": "async getDashboardStats(options: DashboardServiceOptions = {}): Promise<any> {",
          "pattern": "promiseTypes"
        },
        {
          "lineNumber": 209,
          "content": "async getDashboardStats(options: DashboardServiceOptions = {}): Promise<any> {",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/components/customers/CustomerEditForm.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 36,
          "content": "resolver: zodResolver(customerValidationSchema as any),",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/components/customers/CustomerMenu.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 14,
          "content": "// âœ… FIXED: Replace any type with proper Customer interface",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/dashboard/MobileDashboardEnhancement.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 88,
          "content": "// Local shapes compatible with ModernDashboard props to avoid any-casts",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/dashboard/PDFExportButton.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 163,
          "content": "// Clear any existing timeout",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/dashboard/sections/InteractiveRevenueChart.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/components/performance/PerformanceMonitor.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 48,
          "content": "// Local browser entry shaping to avoid `any` while reading PerformanceObserver entries",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 48,
          "content": "// Local browser entry shaping to avoid `any` while reading PerformanceObserver entries",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/components/products/ProductCreateForm.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 39,
          "content": "resolver: zodResolver(productCreateValidationSchema as any),",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/components/products/ProductDetail.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 26,
          "content": "const imgs = (product as any)?.images as string[] | undefined;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/components/products/ProductEditForm.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 49,
          "content": "resolver: zodResolver(productCreateValidationSchema as any),",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 361,
          "content": "// Clear any pending save",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/features/admin/schemas.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 47,
          "content": "status: z.string().optional(), // Can be any status string for filtering",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/features/customers/hooks/useCustomers.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 50,
          "content": "industry: industry as any,",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/hooks/validation/useValidation.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 69,
          "content": "// Minimal local types to avoid implicit any from ValidationEngine output",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/components/analytics/DashboardInteractionTracker.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 1,
      "patterns": {
        "typeAssertions": 1
      },
      "lines": [
        {
          "lineNumber": 42,
          "content": "return () => container.removeEventListener('click', handleSummaryClick, { capture: true } as any);",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/components/common/AnalyticsStorageMonitor.tsx",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 1,
      "patterns": {
        "commentAny": 1
      },
      "lines": [
        {
          "lineNumber": 79,
          "content": "// âœ… CRITICAL: Return null to prevent any DOM impact",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/features/customers/schemas.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 1,
      "patterns": {
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/features/products/schemas.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 1,
      "patterns": {
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/features/search/index.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 1,
      "patterns": {
        "commentAny": 1
      },
      "lines": [
        {
          "lineNumber": 53,
          "content": "// Export any search-related hooks here when they are implemented",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/features/validation/index.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 1,
      "patterns": {
        "commentAny": 1
      },
      "lines": [
        {
          "lineNumber": 16,
          "content": "// Export any validation-related hooks here when they are implemented",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/hooks/useErrorHandler.ts",
      "criticality": "ðŸŸ  HIGH",
      "totalAnyCount": 1,
      "patterns": {
        "commentAny": 1
      },
      "lines": [
        {
          "lineNumber": 29,
          "content": "// Clear any application-level error state if needed",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/types/compatibility.ts",
      "criticality": "ðŸŸ¡ MEDIUM",
      "totalAnyCount": 29,
      "patterns": {
        "typeAnnotation": 4,
        "recordTypes": 1,
        "functionParams": 3,
        "genericConstraints": 1,
        "objectProperties": 1,
        "interfaceProperties": 4,
        "classProperties": 4,
        "methodParams": 3,
        "exportAny": 3,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 74,
          "content": "value: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 317,
          "content": "export const isCompatibilityResult = (obj: any): obj is CompatibilityResult => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 321,
          "content": "export const isCircularDependency = (obj: any): obj is CircularDependency => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 325,
          "content": "export const isLicenseConflict = (obj: any): obj is LicenseConflict => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 63,
          "content": "parameters: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 317,
          "content": "export const isCompatibilityResult = (obj: any): obj is CompatibilityResult => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 321,
          "content": "export const isCircularDependency = (obj: any): obj is CircularDependency => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 325,
          "content": "export const isLicenseConflict = (obj: any): obj is LicenseConflict => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 63,
          "content": "parameters: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 74,
          "content": "value: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 317,
          "content": "export const isCompatibilityResult = (obj: any): obj is CompatibilityResult => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 321,
          "content": "export const isCircularDependency = (obj: any): obj is CircularDependency => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 325,
          "content": "export const isLicenseConflict = (obj: any): obj is LicenseConflict => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 74,
          "content": "value: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 317,
          "content": "export const isCompatibilityResult = (obj: any): obj is CompatibilityResult => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 321,
          "content": "export const isCircularDependency = (obj: any): obj is CircularDependency => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 325,
          "content": "export const isLicenseConflict = (obj: any): obj is LicenseConflict => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 317,
          "content": "export const isCompatibilityResult = (obj: any): obj is CompatibilityResult => {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 321,
          "content": "export const isCircularDependency = (obj: any): obj is CircularDependency => {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 325,
          "content": "export const isLicenseConflict = (obj: any): obj is LicenseConflict => {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 317,
          "content": "export const isCompatibilityResult = (obj: any): obj is CompatibilityResult => {",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 321,
          "content": "export const isCircularDependency = (obj: any): obj is CircularDependency => {",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 325,
          "content": "export const isLicenseConflict = (obj: any): obj is LicenseConflict => {",
          "pattern": "exportAny"
        }
      ]
    },
    {
      "file": "src/types/entities/product.ts",
      "criticality": "ðŸŸ¡ MEDIUM",
      "totalAnyCount": 25,
      "patterns": {
        "typeAnnotation": 6,
        "functionParams": 3,
        "genericConstraints": 3,
        "objectProperties": 3,
        "interfaceProperties": 3,
        "optionalProperties": 3,
        "classProperties": 3,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 222,
          "content": "get: (url: string, config?: any) => Promise<{ data: any }>;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 223,
          "content": "post: (url: string, data?: any) => Promise<{ data: any }>;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 222,
          "content": "get: (url: string, config?: any) => Promise<{ data: any }>;",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 224,
          "content": "put: (url: string, data?: any) => Promise<{ data: any }>;",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 222,
          "content": "get: (url: string, config?: any) => Promise<{ data: any }>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 224,
          "content": "put: (url: string, data?: any) => Promise<{ data: any }>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 222,
          "content": "get: (url: string, config?: any) => Promise<{ data: any }>;",
          "pattern": "objectProperties"
        },
        {
          "lineNumber": 224,
          "content": "put: (url: string, data?: any) => Promise<{ data: any }>;",
          "pattern": "objectProperties"
        },
        {
          "lineNumber": 222,
          "content": "get: (url: string, config?: any) => Promise<{ data: any }>;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 224,
          "content": "put: (url: string, data?: any) => Promise<{ data: any }>;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 222,
          "content": "get: (url: string, config?: any) => Promise<{ data: any }>;",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 224,
          "content": "put: (url: string, data?: any) => Promise<{ data: any }>;",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 222,
          "content": "get: (url: string, config?: any) => Promise<{ data: any }>;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 224,
          "content": "put: (url: string, data?: any) => Promise<{ data: any }>;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/types/shared.ts",
      "criticality": "ðŸŸ¡ MEDIUM",
      "totalAnyCount": 12,
      "patterns": {
        "recordTypes": 2,
        "genericConstraints": 4,
        "exportAny": 2,
        "commentAny": 3,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 160,
          "content": "metadata: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 177,
          "content": "metadata?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 22,
          "content": "export interface ApiResponse<T = any> {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 97,
          "content": "export interface ValidationResult<T = any> {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 160,
          "content": "metadata: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 177,
          "content": "metadata?: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 22,
          "content": "export interface ApiResponse<T = any> {",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 97,
          "content": "export interface ValidationResult<T = any> {",
          "pattern": "exportAny"
        }
      ]
    },
    {
      "file": "src/types/proposals/index.ts",
      "criticality": "ðŸŸ¡ MEDIUM",
      "totalAnyCount": 9,
      "patterns": {
        "recordTypes": 3,
        "genericConstraints": 3,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 120,
          "content": "metadata?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 246,
          "content": "configuration?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 388,
          "content": "details?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 120,
          "content": "metadata?: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 246,
          "content": "configuration?: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 388,
          "content": "details?: Record<string, any>;",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/types/dashboard/AIAnalyticsTypes.ts",
      "criticality": "ðŸŸ¡ MEDIUM",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 52,
          "content": "result: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 52,
          "content": "result: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 52,
          "content": "result: any;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/types/deadlines/index.ts",
      "criticality": "ðŸŸ¡ MEDIUM",
      "totalAnyCount": 5,
      "patterns": {
        "recordTypes": 2,
        "genericConstraints": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 183,
          "content": "parameters: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 333,
          "content": "details?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 183,
          "content": "parameters: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 333,
          "content": "details?: Record<string, any>;",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/types/analytics.ts",
      "criticality": "ðŸŸ¡ MEDIUM",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 223,
          "content": "* ðŸ”§ CRITICAL TYPE SAFETY FIX: Enhanced analytics interfaces to replace 'any' types",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/types/proposals/proposalSchemas.ts",
      "criticality": "ðŸŸ¡ MEDIUM",
      "totalAnyCount": 1,
      "patterns": {
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/app/(dashboard)/proposals/[id]/preview/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 77,
      "patterns": {
        "typeAnnotation": 13,
        "functionParams": 13,
        "objectProperties": 5,
        "typeAssertions": 8,
        "interfaceProperties": 13,
        "classProperties": 13,
        "commentAny": 3,
        "stringAny": 9
      },
      "lines": [
        {
          "lineNumber": 117,
          "content": "products: proposal.products.map((p: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 281,
          "content": "const getProductData = (metadata: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 289,
          "content": "const getTeamData = (metadata: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 301,
          "content": "const getSectionData = (metadata: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 308,
          "content": "const calculateTotal = (proposal: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 310,
          "content": "return proposal.products.reduce((sum: number, product: any) => sum + (product.total || 0), 0);",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 315,
          "content": "return productData!.products.reduce((sum: number, product: any) => sum + (product.total || 0), 0);",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 321,
          "content": "const getProducts = (proposal: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 337,
          "content": "totalItems: products?.reduce((sum: number, p: any) => sum + (p.quantity || 1), 0) || 0,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 339,
          "content": "avgPrice: products?.length ? totalValue / products.reduce((sum: number, p: any) => sum + (p.quantity || 1), 0) : 0,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 498,
          "content": "{products.map((product: any, index: number) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 624,
          "content": "{sectionData.sections.map((section: any, index: number) => (",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 117,
          "content": "products: proposal.products.map((p: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 281,
          "content": "const getProductData = (metadata: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 289,
          "content": "const getTeamData = (metadata: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 301,
          "content": "const getSectionData = (metadata: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 308,
          "content": "const calculateTotal = (proposal: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 310,
          "content": "return proposal.products.reduce((sum: number, product: any) => sum + (product.total || 0), 0);",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 315,
          "content": "return productData!.products.reduce((sum: number, product: any) => sum + (product.total || 0), 0);",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 321,
          "content": "const getProducts = (proposal: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 337,
          "content": "totalItems: products?.reduce((sum: number, p: any) => sum + (p.quantity || 1), 0) || 0,",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 339,
          "content": "avgPrice: products?.length ? totalValue / products.reduce((sum: number, p: any) => sum + (p.quantity || 1), 0) : 0,",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 498,
          "content": "{products.map((product: any, index: number) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 624,
          "content": "{sectionData.sections.map((section: any, index: number) => (",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 108,
          "content": "industry: (proposal.customer as any)?.industry || 'Industry',",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 449,
          "content": "<strong>Phone:</strong> {(proposal.customer as any).phone || 'N/A'}",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 456,
          "content": "<div>{(proposal.customer as any).address || 'N/A'}</div>",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 458,
          "content": "{(proposal.customer as any).city && (proposal.customer as any).state",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 459,
          "content": "? `${(proposal.customer as any).city}, ${(proposal.customer as any).state}`",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 462,
          "content": "<div>{(proposal.customer as any).zipCode || ''}</div>",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 117,
          "content": "products: proposal.products.map((p: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 281,
          "content": "const getProductData = (metadata: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 289,
          "content": "const getTeamData = (metadata: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 301,
          "content": "const getSectionData = (metadata: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 308,
          "content": "const calculateTotal = (proposal: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 310,
          "content": "return proposal.products.reduce((sum: number, product: any) => sum + (product.total || 0), 0);",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 315,
          "content": "return productData!.products.reduce((sum: number, product: any) => sum + (product.total || 0), 0);",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 321,
          "content": "const getProducts = (proposal: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 337,
          "content": "totalItems: products?.reduce((sum: number, p: any) => sum + (p.quantity || 1), 0) || 0,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 339,
          "content": "avgPrice: products?.length ? totalValue / products.reduce((sum: number, p: any) => sum + (p.quantity || 1), 0) : 0,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 498,
          "content": "{products.map((product: any, index: number) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 624,
          "content": "{sectionData.sections.map((section: any, index: number) => (",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 117,
          "content": "products: proposal.products.map((p: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 281,
          "content": "const getProductData = (metadata: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 289,
          "content": "const getTeamData = (metadata: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 301,
          "content": "const getSectionData = (metadata: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 308,
          "content": "const calculateTotal = (proposal: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 310,
          "content": "return proposal.products.reduce((sum: number, product: any) => sum + (product.total || 0), 0);",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 315,
          "content": "return productData!.products.reduce((sum: number, product: any) => sum + (product.total || 0), 0);",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 321,
          "content": "const getProducts = (proposal: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 337,
          "content": "totalItems: products?.reduce((sum: number, p: any) => sum + (p.quantity || 1), 0) || 0,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 339,
          "content": "avgPrice: products?.length ? totalValue / products.reduce((sum: number, p: any) => sum + (p.quantity || 1), 0) : 0,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 498,
          "content": "{products.map((product: any, index: number) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 624,
          "content": "{sectionData.sections.map((section: any, index: number) => (",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 459,
          "content": "? `${(proposal.customer as any).city}, ${(proposal.customer as any).state}`",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/server/api/errorHandler.ts",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 45,
      "patterns": {
        "typeAnnotation": 7,
        "arrayTypes": 7,
        "functionParams": 7,
        "typeAssertions": 1,
        "interfaceProperties": 7,
        "classProperties": 7,
        "methodParams": 1,
        "commentAny": 4,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 44,
          "content": "...args: any[]",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 179,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 181,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 184,
          "content": "return async (...args: any[]): Promise<NextResponse<ApiResponse<T> | ErrorResponse>> => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 318,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 320,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 341,
          "content": "handler: (...args: any[]) => Promise<NextResponse<SuccessResponse<T>>>,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 44,
          "content": "...args: any[]",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 179,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 181,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 184,
          "content": "return async (...args: any[]): Promise<NextResponse<ApiResponse<T> | ErrorResponse>> => {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 318,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 320,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 341,
          "content": "handler: (...args: any[]) => Promise<NextResponse<SuccessResponse<T>>>,",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 179,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 181,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 184,
          "content": "return async (...args: any[]): Promise<NextResponse<ApiResponse<T> | ErrorResponse>> => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 318,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 320,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 341,
          "content": "handler: (...args: any[]) => Promise<NextResponse<SuccessResponse<T>>>,",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 91,
          "content": "defaultCode as any",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 44,
          "content": "...args: any[]",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 179,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 181,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 184,
          "content": "return async (...args: any[]): Promise<NextResponse<ApiResponse<T> | ErrorResponse>> => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 318,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 320,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 341,
          "content": "handler: (...args: any[]) => Promise<NextResponse<SuccessResponse<T>>>,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 44,
          "content": "...args: any[]",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 179,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 181,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 184,
          "content": "return async (...args: any[]): Promise<NextResponse<ApiResponse<T> | ErrorResponse>> => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 318,
          "content": "handler: (...args: any[]) => Promise<NextResponse<ApiResponse<T>>>,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 320,
          "content": "): (...args: any[]) => Promise<NextResponse<ApiResponse<T> | ErrorResponse>> {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 341,
          "content": "handler: (...args: any[]) => Promise<NextResponse<SuccessResponse<T>>>,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 184,
          "content": "return async (...args: any[]): Promise<NextResponse<ApiResponse<T> | ErrorResponse>> => {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/workflows/approval/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 40,
      "patterns": {
        "typeAnnotation": 7,
        "promiseTypes": 1,
        "functionParams": 7,
        "genericConstraints": 2,
        "objectProperties": 4,
        "interfaceProperties": 7,
        "classProperties": 7,
        "commentAny": 1,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 349,
          "content": "const handleTemplateApply = useCallback((template: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 351,
          "content": "const newRules = template.rules.map((rule: any, index: number) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 668,
          "content": "onRuleSave={handleRuleSave as unknown as (rule: any) => void}",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 672,
          "content": "rule: any,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 712,
          "content": "(comment: any, index: number) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 723,
          "content": "attachments: (selectedTask.attachments || []).map((att: any, index: number) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 674,
          "content": ") => Promise<any>",
          "pattern": "promiseTypes"
        },
        {
          "lineNumber": 349,
          "content": "const handleTemplateApply = useCallback((template: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 351,
          "content": "const newRules = template.rules.map((rule: any, index: number) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 668,
          "content": "onRuleSave={handleRuleSave as unknown as (rule: any) => void}",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 712,
          "content": "(comment: any, index: number) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 723,
          "content": "attachments: (selectedTask.attachments || []).map((att: any, index: number) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 674,
          "content": ") => Promise<any>",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 668,
          "content": "onRuleSave={handleRuleSave as unknown as (rule: any) => void}",
          "pattern": "objectProperties"
        },
        {
          "lineNumber": 349,
          "content": "const handleTemplateApply = useCallback((template: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 351,
          "content": "const newRules = template.rules.map((rule: any, index: number) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 668,
          "content": "onRuleSave={handleRuleSave as unknown as (rule: any) => void}",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 672,
          "content": "rule: any,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 712,
          "content": "(comment: any, index: number) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 723,
          "content": "attachments: (selectedTask.attachments || []).map((att: any, index: number) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 349,
          "content": "const handleTemplateApply = useCallback((template: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 351,
          "content": "const newRules = template.rules.map((rule: any, index: number) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 668,
          "content": "onRuleSave={handleRuleSave as unknown as (rule: any) => void}",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 672,
          "content": "rule: any,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 712,
          "content": "(comment: any, index: number) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 723,
          "content": "attachments: (selectedTask.attachments || []).map((att: any, index: number) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/admin/billing/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 23,
      "patterns": {
        "typeAnnotation": 3,
        "functionParams": 3,
        "typeAssertions": 3,
        "interfaceProperties": 3,
        "classProperties": 3,
        "methodParams": 3,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 46,
          "content": "} catch (e: any) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 74,
          "content": "} catch (e: any) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 91,
          "content": "} catch (e: any) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 46,
          "content": "} catch (e: any) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 74,
          "content": "} catch (e: any) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 91,
          "content": "} catch (e: any) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 119,
          "content": "onChange={e => setPlanName(e.target.value as any)}",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 160,
          "content": "Stripe Subscription: {subscription && (subscription as any).stripeSubscriptionId ? (subscription as any).stripeSubscriptionId : 'â€”'}",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 46,
          "content": "} catch (e: any) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 74,
          "content": "} catch (e: any) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 91,
          "content": "} catch (e: any) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 46,
          "content": "} catch (e: any) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 74,
          "content": "} catch (e: any) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 91,
          "content": "} catch (e: any) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 46,
          "content": "} catch (e: any) {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 74,
          "content": "} catch (e: any) {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 91,
          "content": "} catch (e: any) {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/server/api/idempotency.ts",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 20,
      "patterns": {
        "typeAnnotation": 3,
        "functionParams": 2,
        "variableDeclarations": 1,
        "objectProperties": 2,
        "interfaceProperties": 3,
        "classProperties": 3,
        "methodParams": 1,
        "commentAny": 2,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 100,
          "content": "} catch (error: any) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 221,
          "content": "const where: any = { key: idempotencyKey };",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 273,
          "content": "byRoute: byRoute.map((item: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 100,
          "content": "} catch (error: any) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 273,
          "content": "byRoute: byRoute.map((item: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 221,
          "content": "const where: any = { key: idempotencyKey };",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 100,
          "content": "} catch (error: any) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 221,
          "content": "const where: any = { key: idempotencyKey };",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 273,
          "content": "byRoute: byRoute.map((item: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 100,
          "content": "} catch (error: any) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 221,
          "content": "const where: any = { key: idempotencyKey };",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 273,
          "content": "byRoute: byRoute.map((item: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 100,
          "content": "} catch (error: any) {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/validation/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 12,
      "patterns": {
        "typeAnnotation": 2,
        "arrayTypes": 2,
        "variableDeclarations": 2,
        "interfaceProperties": 2,
        "classProperties": 2,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 123,
          "content": "const validationIssues: any[] = [];",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 123,
          "content": "const validationIssues: any[] = [];",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 123,
          "content": "const validationIssues: any[] = [];",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 123,
          "content": "const validationIssues: any[] = [];",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 123,
          "content": "const validationIssues: any[] = [];",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/proposals/version-history/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 11,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "typeAssertions": 3,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 305,
          "content": "(type: 'search' | 'timeRange' | 'changeType' | 'user', value: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 305,
          "content": "(type: 'search' | 'timeRange' | 'changeType' | 'user', value: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 212,
          "content": "if (!filters.changeTypeFilters.includes(bucket as any)) return false;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 583,
          "content": "const active = filters.changeTypeFilters.includes(cfg.key as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 588,
          "content": "filterActions.toggleChangeTypeFilter(cfg.key as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 305,
          "content": "(type: 'search' | 'timeRange' | 'changeType' | 'user', value: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 305,
          "content": "(type: 'search' | 'timeRange' | 'changeType' | 'user', value: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/proposals/preview/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 11,
      "patterns": {
        "typeAnnotation": 1,
        "genericConstraints": 1,
        "objectProperties": 1,
        "typeAssertions": 3,
        "optionalProperties": 1,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 141,
          "content": "const res = await apiClient.get<{ success?: boolean; data?: BatchProduct[]; meta?: any }>(",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 141,
          "content": "const res = await apiClient.get<{ success?: boolean; data?: BatchProduct[]; meta?: any }>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 141,
          "content": "const res = await apiClient.get<{ success?: boolean; data?: BatchProduct[]; meta?: any }>(",
          "pattern": "objectProperties"
        },
        {
          "lineNumber": 103,
          "content": "typeof (obj.company as any).name === 'string';",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 107,
          "content": "typeof (obj.proposal as any).title === 'string';",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 144,
          "content": "const list: BatchProduct[] = (res as any)?.data ?? (res as unknown as BatchProduct[]);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 141,
          "content": "const res = await apiClient.get<{ success?: boolean; data?: BatchProduct[]; meta?: any }>(",
          "pattern": "optionalProperties"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/admin/AdminSystemClient.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 8,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "genericConstraints": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 204,
          "content": "const handleEditUser = (user: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 204,
          "content": "const handleEditUser = (user: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 88,
          "content": "const [editingUser, setEditingUser] = useState<any>(null);",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 204,
          "content": "const handleEditUser = (user: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 204,
          "content": "const handleEditUser = (user: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/products/demo/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 8,
      "patterns": {
        "typeAnnotation": 1,
        "arrayTypes": 1,
        "functionParams": 1,
        "genericConstraints": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 45,
          "content": "const handleProductCreated = (product: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 39,
          "content": "const [createdProducts, setCreatedProducts] = useState<any[]>([]);",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 45,
          "content": "const handleProductCreated = (product: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 39,
          "content": "const [createdProducts, setCreatedProducts] = useState<any[]>([]);",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 45,
          "content": "const handleProductCreated = (product: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 45,
          "content": "const handleProductCreated = (product: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/coordination/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 7,
      "patterns": {
        "typeAnnotation": 1,
        "genericConstraints": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 802,
          "content": "const tabs: ReadonlyArray<{ key: TabKey; label: string; icon: any }> = [",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 802,
          "content": "const tabs: ReadonlyArray<{ key: TabKey; label: string; icon: any }> = [",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 802,
          "content": "const tabs: ReadonlyArray<{ key: TabKey; label: string; icon: any }> = [",
          "pattern": "objectProperties"
        },
        {
          "lineNumber": 802,
          "content": "const tabs: ReadonlyArray<{ key: TabKey; label: string; icon: any }> = [",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 802,
          "content": "const tabs: ReadonlyArray<{ key: TabKey; label: string; icon: any }> = [",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/dashboard/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 7,
      "patterns": {
        "genericConstraints": 2,
        "typeAssertions": 2,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 119,
          "content": "sectionProps={{ 'aria-labelledby': 'enhanced-dashboard-heading' } as any}",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 155,
          "content": "sectionProps={{ 'aria-labelledby': 'detailed-analytics-heading' } as any}",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/customers/create/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 291,
          "content": "const response: any = await apiClient.post('/api/customers', data);",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 291,
          "content": "const response: any = await apiClient.post('/api/customers', data);",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 291,
          "content": "const response: any = await apiClient.post('/api/customers', data);",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 291,
          "content": "const response: any = await apiClient.post('/api/customers', data);",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 209,
          "content": "tier: customer.tier as any,",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/settings/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 254,
          "content": "{/* Show error if any */}",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/app/(dashboard)/sme/assignments/page.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 310,
          "content": ": 'You have not completed any assignments yet.'}",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/app/global-error.tsx",
      "criticality": "ðŸŸ¢ LOW",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/lib/performance/ApiResponseOptimizer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 67,
      "patterns": {
        "typeAnnotation": 12,
        "functionParams": 5,
        "genericConstraints": 2,
        "variableDeclarations": 2,
        "objectProperties": 5,
        "interfaceProperties": 10,
        "returnTypes": 2,
        "classProperties": 10,
        "methodParams": 5,
        "commentAny": 5,
        "stringAny": 9
      },
      "lines": [
        {
          "lineNumber": 43,
          "content": "data: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 64,
          "content": "optimizedData: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 262,
          "content": "data: any,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 305,
          "content": "private async compressData(data: any): Promise<{",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 364,
          "content": "private removeEmptyValues(obj: any): any {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 372,
          "content": "const cleaned: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 387,
          "content": "private optimizeDataStructure(data: any): any {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 393,
          "content": "const optimized: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 418,
          "content": "private calculateDataSize(data: any): number {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 305,
          "content": "private async compressData(data: any): Promise<{",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 364,
          "content": "private removeEmptyValues(obj: any): any {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 387,
          "content": "private optimizeDataStructure(data: any): any {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 418,
          "content": "private calculateDataSize(data: any): number {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 146,
          "content": "public async optimizeResponse<T = any>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 372,
          "content": "const cleaned: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 393,
          "content": "const optimized: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 43,
          "content": "data: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 64,
          "content": "optimizedData: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 262,
          "content": "data: any,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 305,
          "content": "private async compressData(data: any): Promise<{",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 364,
          "content": "private removeEmptyValues(obj: any): any {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 372,
          "content": "const cleaned: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 387,
          "content": "private optimizeDataStructure(data: any): any {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 393,
          "content": "const optimized: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 418,
          "content": "private calculateDataSize(data: any): number {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 364,
          "content": "private removeEmptyValues(obj: any): any {",
          "pattern": "returnTypes"
        },
        {
          "lineNumber": 387,
          "content": "private optimizeDataStructure(data: any): any {",
          "pattern": "returnTypes"
        },
        {
          "lineNumber": 43,
          "content": "data: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 64,
          "content": "optimizedData: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 262,
          "content": "data: any,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 305,
          "content": "private async compressData(data: any): Promise<{",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 364,
          "content": "private removeEmptyValues(obj: any): any {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 372,
          "content": "const cleaned: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 387,
          "content": "private optimizeDataStructure(data: any): any {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 393,
          "content": "const optimized: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 418,
          "content": "private calculateDataSize(data: any): number {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 305,
          "content": "private async compressData(data: any): Promise<{",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 364,
          "content": "private removeEmptyValues(obj: any): any {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 387,
          "content": "private optimizeDataStructure(data: any): any {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 418,
          "content": "private calculateDataSize(data: any): number {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/app/api/workflows/[id]/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 55,
      "patterns": {
        "typeAnnotation": 10,
        "functionParams": 9,
        "variableDeclarations": 1,
        "objectProperties": 2,
        "typeAssertions": 3,
        "interfaceProperties": 10,
        "classProperties": 10,
        "commentAny": 2,
        "stringAny": 8
      },
      "lines": [
        {
          "lineNumber": 135,
          "content": "const completedExecutions = workflow.executions.filter((e: any) => e.status === 'COMPLETED');",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 154,
          "content": "workflow.stages.length + workflow.stages.filter((s: any) => s.isParallel).length * 0.5,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 156,
          "content": "recentExecutions: workflow.executions.slice(0, 5).map((execution: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 220,
          "content": "(execution: any) => execution.status === 'IN_PROGRESS' || execution.status === 'PENDING'",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 251,
          "content": "const updatedWorkflow = await prisma.$transaction(async (tx: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 253,
          "content": "const workflowData: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 376,
          "content": "(execution: any) => execution.status === 'IN_PROGRESS' || execution.status === 'PENDING'",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 420,
          "content": "await prisma.$transaction(async (tx: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 135,
          "content": "const completedExecutions = workflow.executions.filter((e: any) => e.status === 'COMPLETED');",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 154,
          "content": "workflow.stages.length + workflow.stages.filter((s: any) => s.isParallel).length * 0.5,",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 156,
          "content": "recentExecutions: workflow.executions.slice(0, 5).map((execution: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 220,
          "content": "(execution: any) => execution.status === 'IN_PROGRESS' || execution.status === 'PENDING'",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 251,
          "content": "const updatedWorkflow = await prisma.$transaction(async (tx: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 376,
          "content": "(execution: any) => execution.status === 'IN_PROGRESS' || execution.status === 'PENDING'",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 420,
          "content": "await prisma.$transaction(async (tx: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 253,
          "content": "const workflowData: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 132,
          "content": "const executionStats = (workflow.executionStats as any) || {};",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 133,
          "content": "const performanceMetrics = (workflow.performanceMetrics as any) || {};",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 396,
          "content": "...((workflow.performanceMetrics as any) || {}),",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 135,
          "content": "const completedExecutions = workflow.executions.filter((e: any) => e.status === 'COMPLETED');",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 154,
          "content": "workflow.stages.length + workflow.stages.filter((s: any) => s.isParallel).length * 0.5,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 156,
          "content": "recentExecutions: workflow.executions.slice(0, 5).map((execution: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 220,
          "content": "(execution: any) => execution.status === 'IN_PROGRESS' || execution.status === 'PENDING'",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 251,
          "content": "const updatedWorkflow = await prisma.$transaction(async (tx: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 253,
          "content": "const workflowData: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 376,
          "content": "(execution: any) => execution.status === 'IN_PROGRESS' || execution.status === 'PENDING'",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 420,
          "content": "await prisma.$transaction(async (tx: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 135,
          "content": "const completedExecutions = workflow.executions.filter((e: any) => e.status === 'COMPLETED');",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 154,
          "content": "workflow.stages.length + workflow.stages.filter((s: any) => s.isParallel).length * 0.5,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 156,
          "content": "recentExecutions: workflow.executions.slice(0, 5).map((execution: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 220,
          "content": "(execution: any) => execution.status === 'IN_PROGRESS' || execution.status === 'PENDING'",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 251,
          "content": "const updatedWorkflow = await prisma.$transaction(async (tx: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 253,
          "content": "const workflowData: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 376,
          "content": "(execution: any) => execution.status === 'IN_PROGRESS' || execution.status === 'PENDING'",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 420,
          "content": "await prisma.$transaction(async (tx: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/proposals/[id]/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 52,
      "patterns": {
        "typeAnnotation": 10,
        "functionParams": 8,
        "variableDeclarations": 2,
        "objectProperties": 1,
        "typeAssertions": 3,
        "interfaceProperties": 10,
        "classProperties": 10,
        "stringAny": 8
      },
      "lines": [
        {
          "lineNumber": 116,
          "content": ".filter((pp: any) => pp.product) // Remove orphaned ProposalProduct records",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 230,
          "content": "const updateData: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 417,
          "content": ".filter((pp: any) => pp.product)",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 498,
          "content": "const processedUpdateData: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 583,
          "content": "products: updatedProposal.products?.map((p: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 622,
          "content": ".filter((pp: any) => pp.product)",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 698,
          "content": "await prisma.$transaction(async (tx: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 116,
          "content": ".filter((pp: any) => pp.product) // Remove orphaned ProposalProduct records",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 417,
          "content": ".filter((pp: any) => pp.product)",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 583,
          "content": "products: updatedProposal.products?.map((p: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 622,
          "content": ".filter((pp: any) => pp.product)",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 698,
          "content": "await prisma.$transaction(async (tx: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 230,
          "content": "const updateData: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 498,
          "content": "const processedUpdateData: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 222,
          "content": "} = body as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 495,
          "content": "const { changesSummary, ...updateData } = body as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 598,
          "content": "snapshot: snapshot as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 116,
          "content": ".filter((pp: any) => pp.product) // Remove orphaned ProposalProduct records",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 230,
          "content": "const updateData: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 417,
          "content": ".filter((pp: any) => pp.product)",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 498,
          "content": "const processedUpdateData: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 583,
          "content": "products: updatedProposal.products?.map((p: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 622,
          "content": ".filter((pp: any) => pp.product)",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 698,
          "content": "await prisma.$transaction(async (tx: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 116,
          "content": ".filter((pp: any) => pp.product) // Remove orphaned ProposalProduct records",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 230,
          "content": "const updateData: any = {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 417,
          "content": ".filter((pp: any) => pp.product)",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 498,
          "content": "const processedUpdateData: any = {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 583,
          "content": "products: updatedProposal.products?.map((p: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 622,
          "content": ".filter((pp: any) => pp.product)",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 698,
          "content": "await prisma.$transaction(async (tx: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/performance/reportGenerator.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 49,
      "patterns": {
        "typeAnnotation": 8,
        "arrayTypes": 6,
        "functionParams": 6,
        "objectProperties": 2,
        "interfaceProperties": 7,
        "returnTypes": 1,
        "classProperties": 7,
        "methodParams": 4,
        "stringAny": 8
      },
      "lines": [
        {
          "lineNumber": 48,
          "content": "detailedResults: any[];",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 100,
          "content": "private generateSummary(allResults: any[]): TestReport['summary'] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 137,
          "content": "private generatePerformanceAnalysis(allResults: any[]): TestReport['performance'] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 244,
          "content": "private generateRecommendations(allResults: any[]): TestReport['recommendations'] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 300,
          "content": "private identifyOptimizationOpportunities(allResults: any[]): string[] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 373,
          "content": "): any[] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 446,
          "content": "category.results.forEach((result: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 592,
          "content": "(result: any) => `",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 48,
          "content": "detailedResults: any[];",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 100,
          "content": "private generateSummary(allResults: any[]): TestReport['summary'] {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 137,
          "content": "private generatePerformanceAnalysis(allResults: any[]): TestReport['performance'] {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 244,
          "content": "private generateRecommendations(allResults: any[]): TestReport['recommendations'] {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 300,
          "content": "private identifyOptimizationOpportunities(allResults: any[]): string[] {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 373,
          "content": "): any[] {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 100,
          "content": "private generateSummary(allResults: any[]): TestReport['summary'] {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 137,
          "content": "private generatePerformanceAnalysis(allResults: any[]): TestReport['performance'] {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 244,
          "content": "private generateRecommendations(allResults: any[]): TestReport['recommendations'] {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 300,
          "content": "private identifyOptimizationOpportunities(allResults: any[]): string[] {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 446,
          "content": "category.results.forEach((result: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 592,
          "content": "(result: any) => `",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 48,
          "content": "detailedResults: any[];",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 100,
          "content": "private generateSummary(allResults: any[]): TestReport['summary'] {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 137,
          "content": "private generatePerformanceAnalysis(allResults: any[]): TestReport['performance'] {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 244,
          "content": "private generateRecommendations(allResults: any[]): TestReport['recommendations'] {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 300,
          "content": "private identifyOptimizationOpportunities(allResults: any[]): string[] {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 446,
          "content": "category.results.forEach((result: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 592,
          "content": "(result: any) => `",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 373,
          "content": "): any[] {",
          "pattern": "returnTypes"
        },
        {
          "lineNumber": 48,
          "content": "detailedResults: any[];",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 100,
          "content": "private generateSummary(allResults: any[]): TestReport['summary'] {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 137,
          "content": "private generatePerformanceAnalysis(allResults: any[]): TestReport['performance'] {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 244,
          "content": "private generateRecommendations(allResults: any[]): TestReport['recommendations'] {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 300,
          "content": "private identifyOptimizationOpportunities(allResults: any[]): string[] {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 446,
          "content": "category.results.forEach((result: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 592,
          "content": "(result: any) => `",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 100,
          "content": "private generateSummary(allResults: any[]): TestReport['summary'] {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 137,
          "content": "private generatePerformanceAnalysis(allResults: any[]): TestReport['performance'] {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 244,
          "content": "private generateRecommendations(allResults: any[]): TestReport['recommendations'] {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 300,
          "content": "private identifyOptimizationOpportunities(allResults: any[]): string[] {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/lib/performance/DatabaseOptimizer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 46,
      "patterns": {
        "typeAnnotation": 7,
        "recordTypes": 2,
        "functionParams": 4,
        "genericConstraints": 4,
        "variableDeclarations": 1,
        "objectProperties": 2,
        "interfaceProperties": 6,
        "unionTypes": 1,
        "returnTypes": 1,
        "classProperties": 6,
        "methodParams": 4,
        "commentAny": 2,
        "stringAny": 6
      },
      "lines": [
        {
          "lineNumber": 39,
          "content": "private queryCache = new Map<string, { data: any; timestamp: number }>();",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 229,
          "content": "const optimized: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 248,
          "content": "private generateCacheKey(queryId: string, context: any): string {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 252,
          "content": "private getCachedResult(key: string): any | null {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 266,
          "content": "private setCachedResult(key: string, data: any): void {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 294,
          "content": "private inferIndexesUsed(context: any): string[] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 305,
          "content": "private getOptimizationsApplied(context: any, queryTimeMs: number): string[] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 69,
          "content": "filters?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 228,
          "content": "public optimizeQueryFilters(filters: Record<string, any>) {",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 248,
          "content": "private generateCacheKey(queryId: string, context: any): string {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 266,
          "content": "private setCachedResult(key: string, data: any): void {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 294,
          "content": "private inferIndexesUsed(context: any): string[] {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 305,
          "content": "private getOptimizationsApplied(context: any, queryTimeMs: number): string[] {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 39,
          "content": "private queryCache = new Map<string, { data: any; timestamp: number }>();",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 69,
          "content": "filters?: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 228,
          "content": "public optimizeQueryFilters(filters: Record<string, any>) {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 229,
          "content": "const optimized: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 39,
          "content": "private queryCache = new Map<string, { data: any; timestamp: number }>();",
          "pattern": "objectProperties"
        },
        {
          "lineNumber": 39,
          "content": "private queryCache = new Map<string, { data: any; timestamp: number }>();",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 229,
          "content": "const optimized: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 248,
          "content": "private generateCacheKey(queryId: string, context: any): string {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 266,
          "content": "private setCachedResult(key: string, data: any): void {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 294,
          "content": "private inferIndexesUsed(context: any): string[] {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 305,
          "content": "private getOptimizationsApplied(context: any, queryTimeMs: number): string[] {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 252,
          "content": "private getCachedResult(key: string): any | null {",
          "pattern": "unionTypes"
        },
        {
          "lineNumber": 252,
          "content": "private getCachedResult(key: string): any | null {",
          "pattern": "returnTypes"
        },
        {
          "lineNumber": 39,
          "content": "private queryCache = new Map<string, { data: any; timestamp: number }>();",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 229,
          "content": "const optimized: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 248,
          "content": "private generateCacheKey(queryId: string, context: any): string {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 266,
          "content": "private setCachedResult(key: string, data: any): void {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 294,
          "content": "private inferIndexesUsed(context: any): string[] {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 305,
          "content": "private getOptimizationsApplied(context: any, queryTimeMs: number): string[] {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 248,
          "content": "private generateCacheKey(queryId: string, context: any): string {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 266,
          "content": "private setCachedResult(key: string, data: any): void {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 294,
          "content": "private inferIndexesUsed(context: any): string[] {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 305,
          "content": "private getOptimizationsApplied(context: any, queryTimeMs: number): string[] {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/app/api/products/[id]/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 44,
      "patterns": {
        "typeAnnotation": 2,
        "objectProperties": 2,
        "typeAssertions": 23,
        "interfaceProperties": 2,
        "classProperties": 2,
        "commentAny": 3,
        "stringAny": 10
      },
      "lines": [
        {
          "lineNumber": 51,
          "content": "condition: any; // JsonValue from Prisma",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 67,
          "content": "condition: any; // JsonValue from Prisma",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 251,
          "content": "delete (transformedProduct as any).relationships;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 253,
          "content": "delete (transformedProduct as any).proposalProducts;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 399,
          "content": "updateCount: (existingProduct as any).usageAnalytics?.updateCount + 1 || 1,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 403,
          "content": "} as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 423,
          "content": "} as any),",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 445,
          "content": "usageAnalytics: (updatedProduct as any).usageAnalytics || undefined,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 581,
          "content": "description: (archivedProduct as any).description || '',",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 583,
          "content": "typeof (archivedProduct as any).price === 'object' &&",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 585,
          "content": "? Number((archivedProduct as any).price.toString())",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 587,
          "content": "category: Array.isArray((archivedProduct as any).category)",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 589,
          "content": ": (archivedProduct as any).category",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 592,
          "content": "stockQuantity: (archivedProduct as any).stockQuantity || 0,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 594,
          "content": "attributes: (archivedProduct as any).attributes || undefined,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 870,
          "content": "} as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 901,
          "content": "} as any),",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 51,
          "content": "condition: any; // JsonValue from Prisma",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 67,
          "content": "condition: any; // JsonValue from Prisma",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 51,
          "content": "condition: any; // JsonValue from Prisma",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 67,
          "content": "condition: any; // JsonValue from Prisma",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/auth.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 44,
      "patterns": {
        "genericConstraints": 1,
        "typeAssertions": 34,
        "commentAny": 2,
        "stringAny": 7
      },
      "lines": [
        {
          "lineNumber": 78,
          "content": "logError(`[NEXTAUTH] ${code}`, metadata as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 81,
          "content": "logWarn(`[NEXTAUTH] ${code}`, metadata as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 84,
          "content": "if (AUTH_DEBUG_ENABLED) logDebug(`[NEXTAUTH] ${code}`, metadata as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 278,
          "content": "token.roles = Array.isArray((user as any).roles) ? ((user as any).roles as string[]) : [];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 279,
          "content": "token.permissions = Array.isArray((user as any).permissions)",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 305,
          "content": "const rolesArr = Array.isArray((token as any).roles)",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 308,
          "content": "const permsArr = Array.isArray((token as any).permissions)",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 314,
          "content": "if (needRefresh && (token as any).sessionId) {",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 316,
          "content": "(token as any).sessionId as string",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 319,
          "content": "(token as any).roles = session.roles || [];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 321,
          "content": "needRefresh = (token as any).roles.length === 0;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 329,
          "content": "(token as any).roles = roles;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 343,
          "content": "rolesCount: Array.isArray((token as any).roles) ? (token as any).roles.length : 0,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 344,
          "content": "permissionsCount: Array.isArray((token as any).permissions)",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 347,
          "content": "hasSessionId: Boolean((token as any).sessionId),",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 390,
          "content": "(session as any).user = (session as any).user || ({} as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 391,
          "content": "session.user.id = token.id as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 392,
          "content": "session.user.email = token.email as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 394,
          "content": "session.user.department = token.department as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 396,
          "content": "session.user.roles = (token.roles as any) || [];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 397,
          "content": "session.user.permissions = (token.permissions as any) || [];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 402,
          "content": "const sid = (token as any).sessionId as string | undefined;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/auth/securityAudit.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 36,
      "patterns": {
        "typeAnnotation": 4,
        "arrayTypes": 5,
        "functionParams": 3,
        "genericConstraints": 1,
        "variableDeclarations": 1,
        "objectProperties": 2,
        "typeAssertions": 5,
        "interfaceProperties": 4,
        "classProperties": 4,
        "commentAny": 3,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 301,
          "content": "const whereClause: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 538,
          "content": "(acc: Record<string, number>, event: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 551,
          "content": "(acc: Record<RiskLevel, number>, item: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 563,
          "content": "(e: any) => e.riskLevel === 'HIGH' || e.riskLevel === 'CRITICAL'",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 300,
          "content": "): Promise<any[]> {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 534,
          "content": "// Use any[] for Prisma query results due to complex enum type mismatches",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 537,
          "content": "const threatCounts = (events as any[]).reduce(",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 550,
          "content": "const riskDist = (riskDistribution as any[]).reduce(",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 562,
          "content": "recentAlerts: (events as any[]).filter(",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 538,
          "content": "(acc: Record<string, number>, event: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 551,
          "content": "(acc: Record<RiskLevel, number>, item: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 563,
          "content": "(e: any) => e.riskLevel === 'HIGH' || e.riskLevel === 'CRITICAL'",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 300,
          "content": "): Promise<any[]> {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 301,
          "content": "const whereClause: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 157,
          "content": "}) as unknown as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 189,
          "content": "diff: event.changes as unknown as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 537,
          "content": "const threatCounts = (events as any[]).reduce(",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 550,
          "content": "const riskDist = (riskDistribution as any[]).reduce(",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 562,
          "content": "recentAlerts: (events as any[]).filter(",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 301,
          "content": "const whereClause: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 538,
          "content": "(acc: Record<string, number>, event: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 551,
          "content": "(acc: Record<RiskLevel, number>, item: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 563,
          "content": "(e: any) => e.riskLevel === 'HIGH' || e.riskLevel === 'CRITICAL'",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 301,
          "content": "const whereClause: any = {};",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 538,
          "content": "(acc: Record<string, number>, event: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 551,
          "content": "(acc: Record<RiskLevel, number>, item: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 563,
          "content": "(e: any) => e.riskLevel === 'HIGH' || e.riskLevel === 'CRITICAL'",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 534,
          "content": "// Use any[] for Prisma query results due to complex enum type mismatches",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/app/api/proposals/dashboard-metrics/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 34,
      "patterns": {
        "typeAnnotation": 7,
        "functionParams": 7,
        "genericConstraints": 1,
        "interfaceProperties": 7,
        "classProperties": 7,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 46,
          "content": "const inProgress = allProposals.filter((p: any) =>",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 50,
          "content": "const approved = allProposals.filter((p: any) =>",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 54,
          "content": "const overdue = allProposals.filter((p: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 61,
          "content": "const totalValue = allProposals.reduce((sum: number, p: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 76,
          "content": "(p: any) => new Date(p.createdAt) >= thirtyDaysAgo || new Date(p.updatedAt) >= thirtyDaysAgo",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 81,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 90,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 46,
          "content": "const inProgress = allProposals.filter((p: any) =>",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 50,
          "content": "const approved = allProposals.filter((p: any) =>",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 54,
          "content": "const overdue = allProposals.filter((p: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 61,
          "content": "const totalValue = allProposals.reduce((sum: number, p: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 76,
          "content": "(p: any) => new Date(p.createdAt) >= thirtyDaysAgo || new Date(p.updatedAt) >= thirtyDaysAgo",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 81,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 90,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 46,
          "content": "const inProgress = allProposals.filter((p: any) =>",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 50,
          "content": "const approved = allProposals.filter((p: any) =>",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 54,
          "content": "const overdue = allProposals.filter((p: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 61,
          "content": "const totalValue = allProposals.reduce((sum: number, p: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 76,
          "content": "(p: any) => new Date(p.createdAt) >= thirtyDaysAgo || new Date(p.updatedAt) >= thirtyDaysAgo",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 81,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 90,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 46,
          "content": "const inProgress = allProposals.filter((p: any) =>",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 50,
          "content": "const approved = allProposals.filter((p: any) =>",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 54,
          "content": "const overdue = allProposals.filter((p: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 61,
          "content": "const totalValue = allProposals.reduce((sum: number, p: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 76,
          "content": "(p: any) => new Date(p.createdAt) >= thirtyDaysAgo || new Date(p.updatedAt) >= thirtyDaysAgo",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 81,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 90,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/utils/dynamicImportOptimizer.tsx",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 32,
      "patterns": {
        "promiseTypes": 2,
        "genericConstraints": 7,
        "typeAssertions": 2,
        "importAny": 4,
        "exportAny": 7,
        "commentAny": 4,
        "stringAny": 6
      },
      "lines": [
        {
          "lineNumber": 214,
          "content": "export function preloadComponent(importFn: () => Promise<any>): void {",
          "pattern": "promiseTypes"
        },
        {
          "lineNumber": 226,
          "content": "export function analyzeBundleSize(componentName: string, importFn: () => Promise<any>): void {",
          "pattern": "promiseTypes"
        },
        {
          "lineNumber": 12,
          "content": "export type MemoryOptimizedComponent<T extends ComponentType<any>> = ComponentType<",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 21,
          "content": "export function createOptimizedDynamicImport<T extends ComponentType<any>>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 48,
          "content": "export function createMemoryOptimizedImport<T extends ComponentType<any>>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 130,
          "content": "export function createRouteOptimizedImport<T extends ComponentType<any>>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 141,
          "content": "export function createMemoryAwareImport<T extends ComponentType<any>>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 214,
          "content": "export function preloadComponent(importFn: () => Promise<any>): void {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 226,
          "content": "export function analyzeBundleSize(componentName: string, importFn: () => Promise<any>): void {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 81,
          "content": "componentCache = (importedModule as any).default;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 177,
          "content": "componentCache = (importedModule as any).default;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 81,
          "content": "componentCache = (importedModule as any).default;",
          "pattern": "importAny"
        },
        {
          "lineNumber": 177,
          "content": "componentCache = (importedModule as any).default;",
          "pattern": "importAny"
        },
        {
          "lineNumber": 214,
          "content": "export function preloadComponent(importFn: () => Promise<any>): void {",
          "pattern": "importAny"
        },
        {
          "lineNumber": 226,
          "content": "export function analyzeBundleSize(componentName: string, importFn: () => Promise<any>): void {",
          "pattern": "importAny"
        },
        {
          "lineNumber": 12,
          "content": "export type MemoryOptimizedComponent<T extends ComponentType<any>> = ComponentType<",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 21,
          "content": "export function createOptimizedDynamicImport<T extends ComponentType<any>>(",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 48,
          "content": "export function createMemoryOptimizedImport<T extends ComponentType<any>>(",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 130,
          "content": "export function createRouteOptimizedImport<T extends ComponentType<any>>(",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 141,
          "content": "export function createMemoryAwareImport<T extends ComponentType<any>>(",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 214,
          "content": "export function preloadComponent(importFn: () => Promise<any>): void {",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 226,
          "content": "export function analyzeBundleSize(componentName: string, importFn: () => Promise<any>): void {",
          "pattern": "exportAny"
        }
      ]
    },
    {
      "file": "src/app/api/admin/db-sync/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 31,
      "patterns": {
        "typeAnnotation": 4,
        "recordTypes": 2,
        "genericConstraints": 4,
        "objectProperties": 2,
        "typeAssertions": 4,
        "interfaceProperties": 4,
        "classProperties": 4,
        "commentAny": 2,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 50,
          "content": "localValue: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 77,
          "content": "localValue: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 813,
          "content": "roles: string[] | string | Record<string, any> | null;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 824,
          "content": "roles: string[] | string | Record<string, any> | null | undefined",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 813,
          "content": "roles: string[] | string | Record<string, any> | null;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 824,
          "content": "roles: string[] | string | Record<string, any> | null | undefined",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 628,
          "content": "attributes: product.attributes as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 634,
          "content": "usageAnalytics: product.usageAnalytics as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 944,
          "content": "? `${session.user.email} (roles: ${getUserRoleString((session.user as any).roles)})`",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 952,
          "content": "? { email: session?.user?.email, roles: (session?.user as any)?.roles }",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 50,
          "content": "localValue: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 77,
          "content": "localValue: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 50,
          "content": "localValue: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 77,
          "content": "localValue: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 944,
          "content": "? `${session.user.email} (roles: ${getUserRoleString((session.user as any).roles)})`",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 31,
      "patterns": {
        "typeAnnotation": 6,
        "arrayTypes": 2,
        "functionParams": 2,
        "objectProperties": 3,
        "interfaceProperties": 5,
        "optionalProperties": 1,
        "classProperties": 5,
        "methodParams": 2,
        "commentAny": 3,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 70,
          "content": "parameters?: any[];",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 77,
          "content": "parameters: any[];",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 100,
          "content": "private analytics: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 153,
          "content": "initializeAnalytics(analytics: any) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 296,
          "content": "result: any,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 70,
          "content": "parameters?: any[];",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 77,
          "content": "parameters: any[];",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 153,
          "content": "initializeAnalytics(analytics: any) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 77,
          "content": "parameters: any[];",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 100,
          "content": "private analytics: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 153,
          "content": "initializeAnalytics(analytics: any) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 296,
          "content": "result: any,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 70,
          "content": "parameters?: any[];",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 77,
          "content": "parameters: any[];",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 100,
          "content": "private analytics: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 153,
          "content": "initializeAnalytics(analytics: any) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 296,
          "content": "result: any,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 153,
          "content": "initializeAnalytics(analytics: any) {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/app/api/customers/[id]/proposals/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 27,
      "patterns": {
        "typeAnnotation": 6,
        "functionParams": 6,
        "objectProperties": 1,
        "interfaceProperties": 6,
        "classProperties": 6,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 238,
          "content": "totalValue: allProposals.reduce((sum: number, p: any) => sum + Number(p.value || 0), 0),",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 241,
          "content": "? allProposals.reduce((sum: number, p: any) => sum + Number(p.value || 0), 0) /",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 245,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 252,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 258,
          "content": "proposalsThisMonth: allProposals.filter((p: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 263,
          "content": "proposalsThisYear: allProposals.filter((p: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 238,
          "content": "totalValue: allProposals.reduce((sum: number, p: any) => sum + Number(p.value || 0), 0),",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 241,
          "content": "? allProposals.reduce((sum: number, p: any) => sum + Number(p.value || 0), 0) /",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 245,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 252,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 258,
          "content": "proposalsThisMonth: allProposals.filter((p: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 263,
          "content": "proposalsThisYear: allProposals.filter((p: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 238,
          "content": "totalValue: allProposals.reduce((sum: number, p: any) => sum + Number(p.value || 0), 0),",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 241,
          "content": "? allProposals.reduce((sum: number, p: any) => sum + Number(p.value || 0), 0) /",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 245,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 252,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 258,
          "content": "proposalsThisMonth: allProposals.filter((p: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 263,
          "content": "proposalsThisYear: allProposals.filter((p: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 238,
          "content": "totalValue: allProposals.reduce((sum: number, p: any) => sum + Number(p.value || 0), 0),",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 241,
          "content": "? allProposals.reduce((sum: number, p: any) => sum + Number(p.value || 0), 0) /",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 245,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 252,
          "content": "(acc: Record<string, number>, p: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 258,
          "content": "proposalsThisMonth: allProposals.filter((p: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 263,
          "content": "proposalsThisYear: allProposals.filter((p: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/approval-queue/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 25,
      "patterns": {
        "typeAnnotation": 5,
        "functionParams": 2,
        "variableDeclarations": 2,
        "objectProperties": 2,
        "interfaceProperties": 5,
        "classProperties": 5,
        "commentAny": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 115,
          "content": "const where: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 166,
          "content": "const queueItems = executions.map((execution: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 172,
          "content": "const currentStage = workflow?.stages?.find((stage: any) => stage.id === currentStageId);",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 320,
          "content": "let aValue: any, bValue: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 166,
          "content": "const queueItems = executions.map((execution: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 172,
          "content": "const currentStage = workflow?.stages?.find((stage: any) => stage.id === currentStageId);",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 115,
          "content": "const where: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 320,
          "content": "let aValue: any, bValue: any;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 115,
          "content": "const where: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 166,
          "content": "const queueItems = executions.map((execution: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 172,
          "content": "const currentStage = workflow?.stages?.find((stage: any) => stage.id === currentStageId);",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 320,
          "content": "let aValue: any, bValue: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 115,
          "content": "const where: any = {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 166,
          "content": "const queueItems = executions.map((execution: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 172,
          "content": "const currentStage = workflow?.stages?.find((stage: any) => stage.id === currentStageId);",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 320,
          "content": "let aValue: any, bValue: any;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/performance/EnhancedPerformanceService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 25,
      "patterns": {
        "typeAnnotation": 2,
        "promiseTypes": 1,
        "functionParams": 1,
        "genericConstraints": 1,
        "objectProperties": 1,
        "typeAssertions": 4,
        "interfaceProperties": 2,
        "classProperties": 2,
        "methodParams": 1,
        "commentAny": 4,
        "stringAny": 6
      },
      "lines": [
        {
          "lineNumber": 160,
          "content": "private analytics: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 190,
          "content": "initializeAnalytics(analytics: any): void {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 603,
          "content": "async generateComprehensiveReport(): Promise<any> {",
          "pattern": "promiseTypes"
        },
        {
          "lineNumber": 190,
          "content": "initializeAnalytics(analytics: any): void {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 603,
          "content": "async generateComprehensiveReport(): Promise<any> {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 376,
          "content": "const memory = (performance as any).memory;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 763,
          "content": "const firstInputEntry = entry as any; // First Input Delay entries have processingStart",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 774,
          "content": "if (!(entry as any).hadRecentInput) {",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 775,
          "content": "clsValue += (entry as any).value;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 160,
          "content": "private analytics: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 190,
          "content": "initializeAnalytics(analytics: any): void {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 160,
          "content": "private analytics: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 190,
          "content": "initializeAnalytics(analytics: any): void {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 190,
          "content": "initializeAnalytics(analytics: any): void {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/app/api/users/[id]/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 24,
      "patterns": {
        "typeAnnotation": 4,
        "functionParams": 4,
        "objectProperties": 1,
        "typeAssertions": 2,
        "interfaceProperties": 4,
        "classProperties": 4,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 176,
          "content": "roles: userRecord.roles.map((ur: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 275,
          "content": "...auditLogs.map((log: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 285,
          "content": "...hypothesisEvents.map((event: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 294,
          "content": "...proposalActivity.map((proposal: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 176,
          "content": "roles: userRecord.roles.map((ur: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 275,
          "content": "...auditLogs.map((log: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 285,
          "content": "...hypothesisEvents.map((event: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 294,
          "content": "...proposalActivity.map((proposal: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 70,
          "content": "const userPermissions = ((user as any).permissions as string[]) || [];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 199,
          "content": "const tenantId = (user as any).tenantId;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 176,
          "content": "roles: userRecord.roles.map((ur: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 275,
          "content": "...auditLogs.map((log: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 285,
          "content": "...hypothesisEvents.map((event: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 294,
          "content": "...proposalActivity.map((proposal: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 176,
          "content": "roles: userRecord.roles.map((ur: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 275,
          "content": "...auditLogs.map((log: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 285,
          "content": "...hypothesisEvents.map((event: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 294,
          "content": "...proposalActivity.map((proposal: any) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/performance/PerformanceMonitor.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 24,
      "patterns": {
        "typeAnnotation": 2,
        "arrayTypes": 1,
        "functionParams": 2,
        "objectProperties": 1,
        "typeAssertions": 7,
        "interfaceProperties": 2,
        "classProperties": 2,
        "methodParams": 2,
        "commentAny": 1,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 512,
          "content": "return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 515,
          "content": "descriptor.value = function (...args: any[]) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 515,
          "content": "descriptor.value = function (...args: any[]) {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 512,
          "content": "return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 515,
          "content": "descriptor.value = function (...args: any[]) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 197,
          "content": "(this as any).alertCallbacks = (this as any).alertCallbacks || [];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 201,
          "content": "const callbacks = (this as any).alertCallbacks;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 267,
          "content": "const lastEntry = entries[entries.length - 1] as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 296,
          "content": "const fid = (entry as any).processingStart - entry.startTime;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 452,
          "content": "const callbacks = (this as any).alertCallbacks || [];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 512,
          "content": "return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 515,
          "content": "descriptor.value = function (...args: any[]) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 512,
          "content": "return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 515,
          "content": "descriptor.value = function (...args: any[]) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 512,
          "content": "return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 515,
          "content": "descriptor.value = function (...args: any[]) {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/lib/validation/proposalValidation.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 24,
      "patterns": {
        "typeAnnotation": 4,
        "functionParams": 3,
        "genericConstraints": 1,
        "interfaceProperties": 3,
        "returnTypes": 1,
        "classProperties": 3,
        "methodParams": 3,
        "exportAny": 3,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 407,
          "content": "export function transformApiToWizardFormat(apiData: any): Partial<ProposalWizardData> {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 426,
          "content": "export function validateApiResponse(response: any): boolean {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 433,
          "content": "export function extractApiData(response: any): any {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 407,
          "content": "export function transformApiToWizardFormat(apiData: any): Partial<ProposalWizardData> {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 426,
          "content": "export function validateApiResponse(response: any): boolean {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 433,
          "content": "export function extractApiData(response: any): any {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 407,
          "content": "export function transformApiToWizardFormat(apiData: any): Partial<ProposalWizardData> {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 426,
          "content": "export function validateApiResponse(response: any): boolean {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 433,
          "content": "export function extractApiData(response: any): any {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 433,
          "content": "export function extractApiData(response: any): any {",
          "pattern": "returnTypes"
        },
        {
          "lineNumber": 407,
          "content": "export function transformApiToWizardFormat(apiData: any): Partial<ProposalWizardData> {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 426,
          "content": "export function validateApiResponse(response: any): boolean {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 433,
          "content": "export function extractApiData(response: any): any {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 407,
          "content": "export function transformApiToWizardFormat(apiData: any): Partial<ProposalWizardData> {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 426,
          "content": "export function validateApiResponse(response: any): boolean {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 433,
          "content": "export function extractApiData(response: any): any {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 407,
          "content": "export function transformApiToWizardFormat(apiData: any): Partial<ProposalWizardData> {",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 426,
          "content": "export function validateApiResponse(response: any): boolean {",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 433,
          "content": "export function extractApiData(response: any): any {",
          "pattern": "exportAny"
        }
      ]
    },
    {
      "file": "src/lib/performance/BundleOptimizer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 23,
      "patterns": {
        "genericConstraints": 8,
        "exportAny": 1,
        "commentAny": 6,
        "stringAny": 8
      },
      "lines": [
        {
          "lineNumber": 18,
          "content": "const COMPONENT_IMPORTERS: Record<string, () => Promise<{ default: ReactComponentType<any> }>> = {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 23,
          "content": ") as unknown as Promise<{ default: ReactComponentType<any> }>,",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 28,
          "content": ") as unknown as Promise<{ default: ReactComponentType<any> }>,",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 34,
          "content": ") as unknown as Promise<{ default: ReactComponentType<any> }>,",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 39,
          "content": ") as unknown as Promise<{ default: ReactComponentType<any> }>,",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 218,
          "content": "): Promise<{ default: ReactComponentType<any> }> {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 326,
          "content": "): ReactComponentType<any> {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 576,
          "content": "export function withBundleOptimization<T extends ReactComponentType<any>>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 576,
          "content": "export function withBundleOptimization<T extends ReactComponentType<any>>(",
          "pattern": "exportAny"
        }
      ]
    },
    {
      "file": "src/app/api/billing/webhook/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 22,
      "patterns": {
        "typeAnnotation": 3,
        "functionParams": 2,
        "variableDeclarations": 1,
        "objectProperties": 1,
        "typeAssertions": 3,
        "interfaceProperties": 3,
        "classProperties": 3,
        "methodParams": 2,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 13,
          "content": "let data: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 45,
          "content": "} catch (e: any) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 139,
          "content": "} catch (e: any) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 45,
          "content": "} catch (e: any) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 139,
          "content": "} catch (e: any) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 13,
          "content": "let data: any;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 24,
          "content": "data = (event.data?.object ?? {}) as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 25,
          "content": "subscriptionId = (data as any)?.id || (data as any)?.subscription || undefined;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 13,
          "content": "let data: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 45,
          "content": "} catch (e: any) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 139,
          "content": "} catch (e: any) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 13,
          "content": "let data: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 45,
          "content": "} catch (e: any) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 139,
          "content": "} catch (e: any) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 45,
          "content": "} catch (e: any) {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 139,
          "content": "} catch (e: any) {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/lib/performance/optimization.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 22,
      "patterns": {
        "typeAnnotation": 1,
        "arrayTypes": 1,
        "recordTypes": 3,
        "functionParams": 1,
        "genericConstraints": 3,
        "typeAssertions": 4,
        "interfaceProperties": 1,
        "classProperties": 1,
        "methodParams": 1,
        "exportAny": 1,
        "commentAny": 1,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 297,
          "content": "export function useVirtualScrolling(items: any[], itemHeight: number, containerHeight: number) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 297,
          "content": "export function useVirtualScrolling(items: any[], itemHeight: number, containerHeight: number) {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 109,
          "content": "const report: Record<string, any> = {};",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 212,
          "content": "const [metrics, setMetrics] = useState<Record<string, any>>({});",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 328,
          "content": "static generateReport(): Record<string, any> {",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 297,
          "content": "export function useVirtualScrolling(items: any[], itemHeight: number, containerHeight: number) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 109,
          "content": "const report: Record<string, any> = {};",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 212,
          "content": "const [metrics, setMetrics] = useState<Record<string, any>>({});",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 328,
          "content": "static generateReport(): Record<string, any> {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 50,
          "content": "const fidEntry = entry as any; // Cast to any for FID-specific properties",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 67,
          "content": "if (!(entry as any).hadRecentInput) {",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 77,
          "content": "clsValue += (entry as any).value;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 195,
          "content": "const memory = (performance as any).memory;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 297,
          "content": "export function useVirtualScrolling(items: any[], itemHeight: number, containerHeight: number) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 297,
          "content": "export function useVirtualScrolling(items: any[], itemHeight: number, containerHeight: number) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 297,
          "content": "export function useVirtualScrolling(items: any[], itemHeight: number, containerHeight: number) {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 297,
          "content": "export function useVirtualScrolling(items: any[], itemHeight: number, containerHeight: number) {",
          "pattern": "exportAny"
        },
        {
          "lineNumber": 50,
          "content": "const fidEntry = entry as any; // Cast to any for FID-specific properties",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/app/api/content/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 21,
      "patterns": {
        "typeAnnotation": 4,
        "functionParams": 3,
        "variableDeclarations": 1,
        "typeAssertions": 1,
        "interfaceProperties": 4,
        "classProperties": 4,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 67,
          "content": "const hasPermission = userRoles.some((userRole: any) =>",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 69,
          "content": "(rolePermission: any) =>",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 193,
          "content": "const where: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 238,
          "content": "const content = rawContent.map((item: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 67,
          "content": "const hasPermission = userRoles.some((userRole: any) =>",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 69,
          "content": "(rolePermission: any) =>",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 238,
          "content": "const content = rawContent.map((item: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 193,
          "content": "const where: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 363,
          "content": "type: dbType as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 67,
          "content": "const hasPermission = userRoles.some((userRole: any) =>",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 69,
          "content": "(rolePermission: any) =>",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 193,
          "content": "const where: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 238,
          "content": "const content = rawContent.map((item: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 67,
          "content": "const hasPermission = userRoles.some((userRole: any) =>",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 69,
          "content": "(rolePermission: any) =>",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 193,
          "content": "const where: any = {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 238,
          "content": "const content = rawContent.map((item: any) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/workflows/[id]/executions/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 21,
      "patterns": {
        "typeAnnotation": 4,
        "functionParams": 4,
        "objectProperties": 1,
        "interfaceProperties": 4,
        "classProperties": 4,
        "commentAny": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 103,
          "content": "const transformedExecutions = executions.map((execution: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 120,
          "content": "stageExecutions?.filter((s: any) => s.status === 'COMPLETED').length || 0;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 132,
          "content": "stageExecutions?.find((s: any) => s.status === 'ACTIVE')?.stage?.name || null,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 230,
          "content": "const newExecution = await prisma.$transaction(async (tx: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 103,
          "content": "const transformedExecutions = executions.map((execution: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 120,
          "content": "stageExecutions?.filter((s: any) => s.status === 'COMPLETED').length || 0;",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 132,
          "content": "stageExecutions?.find((s: any) => s.status === 'ACTIVE')?.stage?.name || null,",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 230,
          "content": "const newExecution = await prisma.$transaction(async (tx: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 103,
          "content": "const transformedExecutions = executions.map((execution: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 120,
          "content": "stageExecutions?.filter((s: any) => s.status === 'COMPLETED').length || 0;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 132,
          "content": "stageExecutions?.find((s: any) => s.status === 'ACTIVE')?.stage?.name || null,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 230,
          "content": "const newExecution = await prisma.$transaction(async (tx: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 103,
          "content": "const transformedExecutions = executions.map((execution: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 120,
          "content": "stageExecutions?.filter((s: any) => s.status === 'COMPLETED').length || 0;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 132,
          "content": "stageExecutions?.find((s: any) => s.status === 'ACTIVE')?.stage?.name || null,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 230,
          "content": "const newExecution = await prisma.$transaction(async (tx: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/api/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 20,
      "patterns": {
        "typeAssertions": 11,
        "stringAny": 9
      },
      "lines": [
        {
          "lineNumber": 211,
          "content": "if ((config as any).requireAuth !== false && (config as any).requirePaid) {",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 224,
          "content": "(user as any).tenantId,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 234,
          "content": "const userPermissions = (user as any).permissions || [];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 248,
          "content": "query = config.query.parse(queryParams) as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 256,
          "content": "query = undefined as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 266,
          "content": "body = config.body.parse(jsonBody) as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 277,
          "content": "body = undefined as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 310,
          "content": "const response = await runWithTenantContext({ tenantId: user.tenantId } as any, async () =>",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 397,
          "content": "query: undefined as any,",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/tenant.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 20,
      "patterns": {
        "typeAnnotation": 1,
        "recordTypes": 1,
        "genericConstraints": 1,
        "variableDeclarations": 1,
        "typeAssertions": 6,
        "interfaceProperties": 1,
        "classProperties": 1,
        "exportAny": 1,
        "commentAny": 3,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 12,
          "content": "let AsyncLocalStorage: any = null;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 164,
          "content": "export function applyTenantFilter<T extends Record<string, any>>(",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 164,
          "content": "export function applyTenantFilter<T extends Record<string, any>>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 12,
          "content": "let AsyncLocalStorage: any = null;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 43,
          "content": "? new (AsyncLocalStorage as any)()",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 59,
          "content": "return await tenantAls.run(tenant, fn as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 72,
          "content": "return await tenantAls.run(tenant, fn as any);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 94,
          "content": "const jwtTenant = (token as any)?.tenantId as string | undefined;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 176,
          "content": "} as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 181,
          "content": "} as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 12,
          "content": "let AsyncLocalStorage: any = null;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 12,
          "content": "let AsyncLocalStorage: any = null;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 164,
          "content": "export function applyTenantFilter<T extends Record<string, any>>(",
          "pattern": "exportAny"
        }
      ]
    },
    {
      "file": "src/app/api/products/tags/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 19,
      "patterns": {
        "typeAnnotation": 4,
        "functionParams": 4,
        "objectProperties": 2,
        "interfaceProperties": 4,
        "classProperties": 4,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 77,
          "content": "products.forEach((product: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 103,
          "content": "const tagProducts = products.filter((p: any) => p.tags.includes(tagName));",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 104,
          "content": "const totalPrice = tagProducts.reduce((sum: number, p: any) => sum + Number(p.price), 0);",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 77,
          "content": "products.forEach((product: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 103,
          "content": "const tagProducts = products.filter((p: any) => p.tags.includes(tagName));",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 77,
          "content": "products.forEach((product: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 103,
          "content": "const tagProducts = products.filter((p: any) => p.tags.includes(tagName));",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 104,
          "content": "const totalPrice = tagProducts.reduce((sum: number, p: any) => sum + Number(p.price), 0);",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 77,
          "content": "products.forEach((product: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 103,
          "content": "const tagProducts = products.filter((p: any) => p.tags.includes(tagName));",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 104,
          "content": "const totalPrice = tagProducts.reduce((sum: number, p: any) => sum + Number(p.price), 0);",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/auth/apiAuthorization.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 18,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 1,
        "variableDeclarations": 1,
        "typeAssertions": 3,
        "interfaceProperties": 2,
        "classProperties": 2,
        "methodParams": 1,
        "commentAny": 2,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 31,
          "content": "req: any,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 47,
          "content": "let token: any = null;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 47,
          "content": "let token: any = null;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 75,
          "content": "permissions: Array.isArray((session.user as any).permissions)",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 155,
          "content": "* Check if user has any of the specified roles",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 31,
          "content": "req: any,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 47,
          "content": "let token: any = null;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 31,
          "content": "req: any,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 47,
          "content": "let token: any = null;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/performance/CleanupMechanisms.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 17,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 1,
        "objectProperties": 1,
        "typeAssertions": 1,
        "interfaceProperties": 2,
        "classProperties": 2,
        "methodParams": 1,
        "commentAny": 3,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 43,
          "content": "resource: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 188,
          "content": "resource: any,",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 455,
          "content": "return (performance as any).memory;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 43,
          "content": "resource: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 188,
          "content": "resource: any,",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 43,
          "content": "resource: any;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 188,
          "content": "resource: any,",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 151,
          "content": "// Help GC without assigning to `any`",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 151,
          "content": "// Help GC without assigning to `any`",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/lib/utils/safeFileOps.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 17,
      "patterns": {
        "typeAnnotation": 3,
        "functionParams": 2,
        "genericConstraints": 1,
        "objectProperties": 1,
        "interfaceProperties": 3,
        "classProperties": 3,
        "methodParams": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 8,
          "content": "static async writeFileSafe(path: string, content: any, options: any = {}) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 61,
          "content": "static async readFileSafe(path: string, options: any = {}) {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 8,
          "content": "static async writeFileSafe(path: string, content: any, options: any = {}) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 61,
          "content": "static async readFileSafe(path: string, options: any = {}) {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 8,
          "content": "static async writeFileSafe(path: string, content: any, options: any = {}) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 61,
          "content": "static async readFileSafe(path: string, options: any = {}) {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 8,
          "content": "static async writeFileSafe(path: string, content: any, options: any = {}) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 61,
          "content": "static async readFileSafe(path: string, options: any = {}) {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 8,
          "content": "static async writeFileSafe(path: string, content: any, options: any = {}) {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 61,
          "content": "static async readFileSafe(path: string, options: any = {}) {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/lib/performance/PerformanceOptimizationService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 16,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 2,
        "typeAssertions": 2,
        "interfaceProperties": 1,
        "optionalProperties": 1,
        "classProperties": 1,
        "methodParams": 2,
        "commentAny": 1,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 324,
          "content": "public trackAnalyticsEvent(eventName: string, data: any): void {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 457,
          "content": "private handleError(error: unknown, operation: string, metadata?: any): void {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 324,
          "content": "public trackAnalyticsEvent(eventName: string, data: any): void {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 457,
          "content": "private handleError(error: unknown, operation: string, metadata?: any): void {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 401,
          "content": "const memory = (performance as any).memory;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 410,
          "content": "(window as any).gc();",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 324,
          "content": "public trackAnalyticsEvent(eventName: string, data: any): void {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 457,
          "content": "private handleError(error: unknown, operation: string, metadata?: any): void {",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 324,
          "content": "public trackAnalyticsEvent(eventName: string, data: any): void {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 324,
          "content": "public trackAnalyticsEvent(eventName: string, data: any): void {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 457,
          "content": "private handleError(error: unknown, operation: string, metadata?: any): void {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/lib/validation/RuleExecutor.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 16,
      "patterns": {
        "typeAnnotation": 3,
        "functionParams": 1,
        "variableDeclarations": 1,
        "objectProperties": 1,
        "interfaceProperties": 2,
        "returnTypes": 1,
        "classProperties": 2,
        "methodParams": 1,
        "commentAny": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 471,
          "content": "private extractValue(field: string, context: ValidationContext): any {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 474,
          "content": "let value: any = context;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 501,
          "content": "private extractAffectedProducts(context: ValidationContext, actionResult: any): string[] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 501,
          "content": "private extractAffectedProducts(context: ValidationContext, actionResult: any): string[] {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 474,
          "content": "let value: any = context;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 474,
          "content": "let value: any = context;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 501,
          "content": "private extractAffectedProducts(context: ValidationContext, actionResult: any): string[] {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 471,
          "content": "private extractValue(field: string, context: ValidationContext): any {",
          "pattern": "returnTypes"
        },
        {
          "lineNumber": 474,
          "content": "let value: any = context;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 501,
          "content": "private extractAffectedProducts(context: ValidationContext, actionResult: any): string[] {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 501,
          "content": "private extractAffectedProducts(context: ValidationContext, actionResult: any): string[] {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/lib/errors/ProblemDetails.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 15,
      "patterns": {
        "typeAnnotation": 2,
        "arrayTypes": 1,
        "recordTypes": 1,
        "functionParams": 1,
        "genericConstraints": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "indexSignatures": 1,
        "classProperties": 1,
        "methodParams": 1,
        "exportAny": 1,
        "commentAny": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 23,
          "content": "[key: string]: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 71,
          "content": "export function mapZodErrorsToFields(zodErrors: any[]): ProblemField[] {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 71,
          "content": "export function mapZodErrorsToFields(zodErrors: any[]): ProblemField[] {",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 42,
          "content": "extensions?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 71,
          "content": "export function mapZodErrorsToFields(zodErrors: any[]): ProblemField[] {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 42,
          "content": "extensions?: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 71,
          "content": "export function mapZodErrorsToFields(zodErrors: any[]): ProblemField[] {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 23,
          "content": "[key: string]: any;",
          "pattern": "indexSignatures"
        },
        {
          "lineNumber": 71,
          "content": "export function mapZodErrorsToFields(zodErrors: any[]): ProblemField[] {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 71,
          "content": "export function mapZodErrorsToFields(zodErrors: any[]): ProblemField[] {",
          "pattern": "methodParams"
        },
        {
          "lineNumber": 71,
          "content": "export function mapZodErrorsToFields(zodErrors: any[]): ProblemField[] {",
          "pattern": "exportAny"
        }
      ]
    },
    {
      "file": "src/app/api/auth/debug/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 13,
      "patterns": {
        "typeAssertions": 12,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 37,
          "content": "id: (session.user as any).id,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 39,
          "content": "roles: (session.user as any).roles || [],",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 40,
          "content": "permissions: (session.user as any).permissions || [],",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 46,
          "content": "id: (token as any).id ?? (token as any).sub,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 48,
          "content": "roles: Array.isArray((token as any).roles) ? (token as any).roles : [],",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 49,
          "content": "permissions: Array.isArray((token as any).permissions)",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 52,
          "content": "hasSessionId: Boolean((token as any).sessionId),",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/workflows/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 12,
      "patterns": {
        "typeAnnotation": 1,
        "arrayTypes": 2,
        "variableDeclarations": 1,
        "typeAssertions": 3,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 124,
          "content": "let workflows: any[] = []; // Complex Prisma query result with nested includes",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 124,
          "content": "let workflows: any[] = []; // Complex Prisma query result with nested includes",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 178,
          "content": "workflows = tx[1] as any[];",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 124,
          "content": "let workflows: any[] = []; // Complex Prisma query result with nested includes",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 178,
          "content": "workflows = tx[1] as any[];",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 181,
          "content": "const executionStats = (workflow.executionStats as any) || {};",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 182,
          "content": "const performanceMetrics = (workflow.performanceMetrics as any) || {};",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 124,
          "content": "let workflows: any[] = []; // Complex Prisma query result with nested includes",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 124,
          "content": "let workflows: any[] = []; // Complex Prisma query result with nested includes",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/dashboard/api.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 12,
      "patterns": {
        "typeAnnotation": 1,
        "genericConstraints": 2,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "unionTypes": 1,
        "classProperties": 1,
        "commentAny": 2,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 190,
          "content": "let enhancedStats: any | null = null;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 192,
          "content": "const response = await apiClient.get<any>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 205,
          "content": "const basicRes = await apiClient.get<any>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 190,
          "content": "let enhancedStats: any | null = null;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 190,
          "content": "let enhancedStats: any | null = null;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 190,
          "content": "let enhancedStats: any | null = null;",
          "pattern": "unionTypes"
        },
        {
          "lineNumber": 190,
          "content": "let enhancedStats: any | null = null;",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 503,
          "content": "// Security: Only allow clearing own cache or admin clearing any cache",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/validation/customerValidation.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 12,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 2,
        "objectProperties": 1,
        "interfaceProperties": 2,
        "classProperties": 2,
        "methodParams": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 63,
          "content": "custom: (value: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 227,
          "content": "value: any",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 63,
          "content": "custom: (value: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 63,
          "content": "custom: (value: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 227,
          "content": "value: any",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 63,
          "content": "custom: (value: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 227,
          "content": "value: any",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/admin/permissions/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 11,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "typeAssertions": 3,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 115,
          "content": "const where: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 115,
          "content": "const where: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 162,
          "content": "description: (p as any).description ?? '',",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 258,
          "content": "scope: checkScope as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 277,
          "content": "} as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 115,
          "content": "const where: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 115,
          "content": "const where: any = {};",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/products/relationships/versions/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 11,
      "patterns": {
        "typeAnnotation": 1,
        "genericConstraints": 1,
        "objectProperties": 1,
        "typeAssertions": 3,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 163,
          "content": "totalValue: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 197,
          "content": "createdByName: (r as any).createdByName || undefined,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 200,
          "content": "typeof (r as any).totalValue === 'number' ? Number((r as any).totalValue) : undefined,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 163,
          "content": "totalValue: any;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 163,
          "content": "totalValue: any;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/db/prisma.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 11,
      "patterns": {
        "typeAnnotation": 1,
        "promiseTypes": 1,
        "functionParams": 1,
        "genericConstraints": 1,
        "objectProperties": 1,
        "typeAssertions": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 181,
          "content": "params.args.data = params.args.data.map((d: any) => ({ ...d, tenantId }));",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 205,
          "content": "// next has a return type of Promise<any>; cast to Promise<unknown> to satisfy strict lint rules",
          "pattern": "promiseTypes"
        },
        {
          "lineNumber": 181,
          "content": "params.args.data = params.args.data.map((d: any) => ({ ...d, tenantId }));",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 205,
          "content": "// next has a return type of Promise<any>; cast to Promise<unknown> to satisfy strict lint rules",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 251,
          "content": "targetId: (result as any)?.id ?? null,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 181,
          "content": "params.args.data = params.args.data.map((d: any) => ({ ...d, tenantId }));",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 181,
          "content": "params.args.data = params.args.data.map((d: any) => ({ ...d, tenantId }));",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 205,
          "content": "// next has a return type of Promise<any>; cast to Promise<unknown> to satisfy strict lint rules",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/performance/PerformanceOptimizer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 11,
      "patterns": {
        "typeAssertions": 5,
        "commentAny": 2,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 504,
          "content": "(window as any).gc();",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 650,
          "content": "const entry = this.getPerformanceEntry('first-input') as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 657,
          "content": "if (!(entry as any).hadRecentInput) {",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 677,
          "content": "const memory = (performance as any).memory;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/services/searchService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 11,
      "patterns": {
        "typeAssertions": 4,
        "commentAny": 3,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 118,
          "content": "entityType: entityType as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 209,
          "content": "where.status = { in: filters.status as any };",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 454,
          "content": "const valueA = (a as any)[query.sortBy] || '';",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/validation/ValidationEngine.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 11,
      "patterns": {
        "recordTypes": 3,
        "genericConstraints": 4,
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 44,
          "content": "configuration?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 54,
          "content": "details?: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 152,
          "content": "configuration: Record<string, any>",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 44,
          "content": "configuration?: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 54,
          "content": "details?: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 72,
          "content": "private validationIssues: Map<string, any> = new Map();",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 152,
          "content": "configuration: Record<string, any>",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/app/api/admin/system/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 10,
      "patterns": {
        "typeAnnotation": 2,
        "variableDeclarations": 2,
        "interfaceProperties": 2,
        "classProperties": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 79,
          "content": "const response: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 248,
          "content": "let result: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 79,
          "content": "const response: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 248,
          "content": "let result: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 79,
          "content": "const response: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 248,
          "content": "let result: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 79,
          "content": "const response: any = {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 248,
          "content": "let result: any = {};",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/communications/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 10,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 2,
        "interfaceProperties": 2,
        "classProperties": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 58,
          "content": "...events.map((e: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 76,
          "content": "...sections.map((s: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 58,
          "content": "...events.map((e: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 76,
          "content": "...sections.map((s: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 58,
          "content": "...events.map((e: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 76,
          "content": "...sections.map((s: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 58,
          "content": "...events.map((e: any) => ({",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 76,
          "content": "...sections.map((s: any) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/proposals/workflow/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 10,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 2,
        "interfaceProperties": 2,
        "classProperties": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 37,
          "content": "const result = await prisma.$transaction(async (tx: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 135,
          "content": "const result = await prisma.$transaction(async (tx: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 37,
          "content": "const result = await prisma.$transaction(async (tx: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 135,
          "content": "const result = await prisma.$transaction(async (tx: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 37,
          "content": "const result = await prisma.$transaction(async (tx: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 135,
          "content": "const result = await prisma.$transaction(async (tx: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 37,
          "content": "const result = await prisma.$transaction(async (tx: any) => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 135,
          "content": "const result = await prisma.$transaction(async (tx: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/log.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 10,
      "patterns": {
        "typeAssertions": 5,
        "stringAny": 5
      },
      "lines": [
        {
          "lineNumber": 6,
          "content": "const rid = (globalThis as any).__requestId;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 26,
          "content": "const rid = (globalThis as any).__requestId;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 33,
          "content": "const rid = (globalThis as any).__requestId;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 40,
          "content": "const rid = (globalThis as any).__requestId;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 49,
          "content": "const rid = (globalThis as any).__requestId;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/performance/componentTester.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 10,
      "patterns": {
        "recordTypes": 3,
        "genericConstraints": 3,
        "typeAssertions": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 26,
          "content": "details: Record<string, any>;",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 112,
          "content": "details: Record<string, any> = {}",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 656,
          "content": "const summary: Record<string, any> = {};",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 26,
          "content": "details: Record<string, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 112,
          "content": "details: Record<string, any> = {}",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 656,
          "content": "const summary: Record<string, any> = {};",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 103,
          "content": "this.memoryStart = (performance as any).memory?.usedJSHeapSize ?? 0;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 115,
          "content": "const memoryEnd = (performance as any).memory?.usedJSHeapSize ?? 0;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/services/dashboardService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 10,
      "patterns": {
        "typeAssertions": 8,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 455,
          "content": "total_proposals: Number((proposalData as any)[0]?.total_proposals ?? 0),",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 457,
          "content": "approved_proposals: Number((proposalData as any)[0]?.proposals_with_value ?? 0),",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 460,
          "content": "revenue_sum: (proposalData as any)[0]?.revenue_sum ? parseFloat((proposalData as any)[0].revenue_sum) : 0,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 464,
          "content": "total_customers: (customersAgg as any)._count.id,",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/services/proposalService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 10,
      "patterns": {
        "typeAssertions": 7,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 1802,
          "content": "if (filters.dueBefore) (where.dueDate as any).lte = new Date(filters.dueBefore);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 1809,
          "content": "if (filters.createdAfter) (where.createdAt as any).gte = new Date(filters.createdAfter);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 1816,
          "content": "if (filters.valueMin !== undefined) (where.value as any).gte = filters.valueMin;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 1824,
          "content": "} as any;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/store/uiStore.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 10,
      "patterns": {
        "arrayTypes": 2,
        "commentAny": 4,
        "stringAny": 4
      },
      "lines": [
        {
          "lineNumber": 131,
          "content": "globalSearchResults: GlobalSearchResult[]; // ðŸ”§ FIXED: Replaced 'any[]' with proper GlobalSearchResult[]",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 201,
          "content": "setGlobalSearchResults: (results: GlobalSearchResult[]) => void; // ðŸ”§ FIXED: Replaced 'any[]' with GlobalSearchResult[]",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 14,
          "content": "// ðŸ”§ CRITICAL TYPE SAFETY FIX: Replace all 'any' types with proper interfaces",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 59,
          "content": "data?: ModalData; // ðŸ”§ FIXED: Replaced 'any' with proper ModalData interface",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 131,
          "content": "globalSearchResults: GlobalSearchResult[]; // ðŸ”§ FIXED: Replaced 'any[]' with proper GlobalSearchResult[]",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 201,
          "content": "setGlobalSearchResults: (results: GlobalSearchResult[]) => void; // ðŸ”§ FIXED: Replaced 'any[]' with GlobalSearchResult[]",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 14,
          "content": "// ðŸ”§ CRITICAL TYPE SAFETY FIX: Replace all 'any' types with proper interfaces",
          "pattern": "stringAny"
        },
        {
          "lineNumber": 59,
          "content": "data?: ModalData; // ðŸ”§ FIXED: Replaced 'any' with proper ModalData interface",
          "pattern": "stringAny"
        },
        {
          "lineNumber": 131,
          "content": "globalSearchResults: GlobalSearchResult[]; // ðŸ”§ FIXED: Replaced 'any[]' with proper GlobalSearchResult[]",
          "pattern": "stringAny"
        },
        {
          "lineNumber": 201,
          "content": "setGlobalSearchResults: (results: GlobalSearchResult[]) => void; // ðŸ”§ FIXED: Replaced 'any[]' with GlobalSearchResult[]",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/app/api/profile/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 9,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "objectProperties": 1,
        "typeAssertions": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 186,
          "content": "fullUser.roles?.map((userRole: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 186,
          "content": "fullUser.roles?.map((userRole: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 154,
          "content": "const storedProfile = (fullUser.preferences?.dashboardLayout as any)?.profile || {};",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 186,
          "content": "fullUser.roles?.map((userRole: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 186,
          "content": "fullUser.roles?.map((userRole: any) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/profile/update/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 9,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "typeAssertions": 2,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 162,
          "content": "const result = await prisma.$transaction(async (prisma: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 162,
          "content": "const result = await prisma.$transaction(async (prisma: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 206,
          "content": "...((existingUser.preferences?.dashboardLayout as any) || {}),",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 229,
          "content": "const storedProfile = (updatedPreferences.dashboardLayout as any)?.profile || {};",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 162,
          "content": "const result = await prisma.$transaction(async (prisma: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 162,
          "content": "const result = await prisma.$transaction(async (prisma: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/store/unifiedProposalStore.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 9,
      "patterns": {
        "typeAnnotation": 2,
        "functionParams": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "optionalProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 19,
          "content": "persistWizardData?: (stepData: any) => void;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 23,
          "content": "wizardData?: any;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 19,
          "content": "persistWizardData?: (stepData: any) => void;",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 19,
          "content": "persistWizardData?: (stepData: any) => void;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 23,
          "content": "wizardData?: any;",
          "pattern": "optionalProperties"
        },
        {
          "lineNumber": 19,
          "content": "persistWizardData?: (stepData: any) => void;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/products/products_new/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 8,
      "patterns": {
        "typeAnnotation": 2,
        "objectProperties": 1,
        "interfaceProperties": 2,
        "classProperties": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 35,
          "content": "attributes: any; // JsonValue from Prisma",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 39,
          "content": "usageAnalytics: any; // JsonValue from Prisma",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 35,
          "content": "attributes: any; // JsonValue from Prisma",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 39,
          "content": "usageAnalytics: any; // JsonValue from Prisma",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 35,
          "content": "attributes: any; // JsonValue from Prisma",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 39,
          "content": "usageAnalytics: any; // JsonValue from Prisma",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/auth/enhancedMiddleware.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 8,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "typeAssertions": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "methodParams": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 11,
          "content": "const resolveTenantIdEdge = (req: NextAuthAugmentedRequest, token: any): string | null => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 11,
          "content": "const resolveTenantIdEdge = (req: NextAuthAugmentedRequest, token: any): string | null => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 110,
          "content": "const tokenTenant = (tokenRaw as any)?.tenantId as string | undefined;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 11,
          "content": "const resolveTenantIdEdge = (req: NextAuthAugmentedRequest, token: any): string | null => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 11,
          "content": "const resolveTenantIdEdge = (req: NextAuthAugmentedRequest, token: any): string | null => {",
          "pattern": "classProperties"
        },
        {
          "lineNumber": 11,
          "content": "const resolveTenantIdEdge = (req: NextAuthAugmentedRequest, token: any): string | null => {",
          "pattern": "methodParams"
        }
      ]
    },
    {
      "file": "src/lib/performance/ComponentLazyLoading.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 8,
      "patterns": {
        "genericConstraints": 4,
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 51,
          "content": "private loadedComponents: Map<string, LazyExoticComponent<ComponentType<any>>> = new Map();",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 53,
          "content": "private loadingPromises: Map<string, Promise<LazyExoticComponent<ComponentType<any>>>> =",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 81,
          "content": "public async loadComponentDynamically<T = any>(",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 193,
          "content": "getStepComponent: (step: number) => () => Promise<{ default: ComponentType<any> }>",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/lib/services/customerService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 8,
      "patterns": {
        "typeAssertions": 4,
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 1051,
          "content": "if (filters.revenueMin !== undefined) (where.revenue as any).gte = filters.revenueMin;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 1057,
          "content": "if (filters.createdAfter) (where.createdAt as any).gte = filters.createdAfter;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 784,
          "content": "// Safe extractors that avoid any/unsafe unions on _count",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/app/api/admin/billing/subscription/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 7,
      "patterns": {
        "typeAssertions": 4,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 9,
          "content": "const tenantId = (user as any).tenantId;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 30,
          "content": "stripeSubscriptionId: (subscription as any).stripeSubscriptionId || null,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 54,
          "content": "const tenantId = (user as any).tenantId;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 75,
          "content": "stripeSubscriptionId: (updated as any).stripeSubscriptionId || null,",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/admin/users/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 7,
      "patterns": {
        "typeAssertions": 4,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 134,
          "content": "(where as any).OR = [",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 141,
          "content": "(where as any).roles = {",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 151,
          "content": "(where as any).status = status.toUpperCase();",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 155,
          "content": "(where as any).department = { equals: department, mode: 'insensitive' };",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/billing/checkout/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 7,
      "patterns": {
        "typeAssertions": 4,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 26,
          "content": "(error as any).code = 'API.SERVICE_UNAVAILABLE';",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 39,
          "content": "(error as any).code = 'DATA.NOT_FOUND';",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 55,
          "content": "...((tenant as any).stripeCustomerId ? { customer: (tenant as any).stripeCustomerId } : {}),",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/customers/search/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 7,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 46,
          "content": "const where: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 46,
          "content": "const where: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 46,
          "content": "const where: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 46,
          "content": "const where: any = {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/middleware.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 7,
      "patterns": {
        "genericConstraints": 1,
        "typeAssertions": 3,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 111,
          "content": "const jwtTenant = (token as any)?.tenantId as string | undefined;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 289,
          "content": "(globalThis as any).__requestId = rid;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 297,
          "content": "(globalThis as any).__requestId = rid;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/sme/resources/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 60,
          "content": "data: resources.map((r: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 60,
          "content": "data: resources.map((r: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 60,
          "content": "data: resources.map((r: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 60,
          "content": "data: resources.map((r: any) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/sme/templates/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 6,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 66,
          "content": "data: templates.map((t: any) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 66,
          "content": "data: templates.map((t: any) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 66,
          "content": "data: templates.map((t: any) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 66,
          "content": "data: templates.map((t: any) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/services/productService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 6,
      "patterns": {
        "typeAssertions": 2,
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 1145,
          "content": "if (filters.priceMin !== undefined) (where.price as any).gte = filters.priceMin;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 234,
          "content": "// Check if product is used in any proposals",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/store/proposalStore.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 6,
      "patterns": {
        "genericConstraints": 1,
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 3
      },
      "lines": [
        {
          "lineNumber": 163,
          "content": "stepData: Record<number, any>;",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 661,
          "content": "const planTypeFromMetadata = (metadata as any).planType as",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 251,
          "content": "// Check if any product has invalid data",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/app/api/admin/roles/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 65,
          "content": "const where: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 65,
          "content": "const where: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 65,
          "content": "const where: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 65,
          "content": "const where: any = {};",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/customers/validate-email/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 91,
          "content": "const where: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 91,
          "content": "const where: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 91,
          "content": "const where: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 91,
          "content": "const where: any = {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/dashboard/enhanced-stats/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "objectProperties": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 14,
          "content": "_sum: { totalValue: any };",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 14,
          "content": "_sum: { totalValue: any };",
          "pattern": "objectProperties"
        },
        {
          "lineNumber": 14,
          "content": "_sum: { totalValue: any };",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 14,
          "content": "_sum: { totalValue: any };",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/performance/optimization/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 169,
          "content": "let optimizationResults: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 169,
          "content": "let optimizationResults: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 169,
          "content": "let optimizationResults: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 169,
          "content": "let optimizationResults: any = {};",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/products/products_new/[id]/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 238,
          "content": "const updateData: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 238,
          "content": "const updateData: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 238,
          "content": "const updateData: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 238,
          "content": "const updateData: any = {};",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/products/products_new/bulk-delete/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 49,
          "content": "prisma.$transaction(async (tx: any) => {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 49,
          "content": "prisma.$transaction(async (tx: any) => {",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 49,
          "content": "prisma.$transaction(async (tx: any) => {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 49,
          "content": "prisma.$transaction(async (tx: any) => {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/products/products_new/search/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 46,
          "content": "const where: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 46,
          "content": "const where: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 46,
          "content": "const where: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 46,
          "content": "const where: any = {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/products/stats-optimized/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 25,
          "content": "const filters: any = {};",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 25,
          "content": "const filters: any = {};",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 25,
          "content": "const filters: any = {};",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 25,
          "content": "const filters: any = {};",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/products/validate-sku/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 63,
          "content": "const where: any = {",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 63,
          "content": "const where: any = {",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 63,
          "content": "const where: any = {",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 63,
          "content": "const where: any = {",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/app/api/proposals/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAssertions": 3,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 84,
          "content": "status: query!.status ? [query!.status as any] : undefined,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 85,
          "content": "priority: query!.priority ? [query!.priority as any] : undefined, // Type mismatch between route and service priority values",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 174,
          "content": "priority: body!.basicInfo.priority as any, // Cast priority to match service expectations",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/sme/versions/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "functionParams": 1,
        "interfaceProperties": 1,
        "classProperties": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 56,
          "content": "const versions = sections.map((s: any, idx: number) => ({",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 56,
          "content": "const versions = sections.map((s: any, idx: number) => ({",
          "pattern": "functionParams"
        },
        {
          "lineNumber": 56,
          "content": "const versions = sections.map((s: any, idx: number) => ({",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 56,
          "content": "const versions = sections.map((s: any, idx: number) => ({",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/billing/stripe.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAnnotation": 1,
        "variableDeclarations": 1,
        "interfaceProperties": 1,
        "unionTypes": 1,
        "classProperties": 1
      },
      "lines": [
        {
          "lineNumber": 1,
          "content": "let _stripe: any | null = null;",
          "pattern": "typeAnnotation"
        },
        {
          "lineNumber": 1,
          "content": "let _stripe: any | null = null;",
          "pattern": "variableDeclarations"
        },
        {
          "lineNumber": 1,
          "content": "let _stripe: any | null = null;",
          "pattern": "interfaceProperties"
        },
        {
          "lineNumber": 1,
          "content": "let _stripe: any | null = null;",
          "pattern": "unionTypes"
        },
        {
          "lineNumber": 1,
          "content": "let _stripe: any | null = null;",
          "pattern": "classProperties"
        }
      ]
    },
    {
      "file": "src/lib/bridges/EventBridge.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "commentAny": 3,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 44,
          "content": "// Proper TypeScript interfaces (no any types)",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 376,
          "content": "// Proper TypeScript interfaces for event data (no any types)",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/bridges/StateBridge.tsx",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "recordTypes": 1,
        "genericConstraints": 1,
        "commentAny": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 540,
          "content": "trackAction(action: string, metadata?: Record<string, any>) {",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 540,
          "content": "trackAction(action: string, metadata?: Record<string, any>) {",
          "pattern": "genericConstraints"
        },
        {
          "lineNumber": 22,
          "content": "// Proper TypeScript interfaces (no any types)",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/security/rbac.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 5,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 371,
          "content": "* Check if user has any role",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/admin/billing/resync/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 4,
      "patterns": {
        "typeAssertions": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 14,
          "content": "const tenantId = body?.tenantId || (user as any).tenantId;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 36,
          "content": "await BillingSyncService.syncEntitlementsForPlan(tenantId, sub.plan.tier as any);",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/communication/messages/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 4,
      "patterns": {
        "arrayTypes": 1,
        "genericConstraints": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 25,
          "content": "const messageStore = new Map<string, any[]>();",
          "pattern": "arrayTypes"
        },
        {
          "lineNumber": 25,
          "content": "const messageStore = new Map<string, any[]>();",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/lib/entities/customer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 4,
      "patterns": {
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 117,
          "content": "// If no exact match, try to get any customer as fallback",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 163,
          "content": "// Final fallback: try to get any existing customer",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 118,
          "content": "logger.info('[CustomerEntity] No exact match found, trying to get any customer as fallback');",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/lib/services/DatabaseOptimizationService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 4,
      "patterns": {
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 98,
          "content": "// âœ… FIXED: Replace 'any' with specific interface",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 239,
          "content": "// âœ… FIXED: Replace 'any' with specific interface",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 98,
          "content": "// âœ… FIXED: Replace 'any' with specific interface",
          "pattern": "stringAny"
        },
        {
          "lineNumber": 239,
          "content": "// âœ… FIXED: Replace 'any' with specific interface",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/lib/store/adminStore.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 4,
      "patterns": {
        "typeAssertions": 2,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 379,
          "content": "(state.modals as any)[key] = false;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 495,
          "content": "(state.loadingStates as any)[key] = value;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/utils/requestDeduplication.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 4,
      "patterns": {
        "recordTypes": 1,
        "genericConstraints": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 65,
          "content": "generateKey(method: string, url: string, params?: Record<string, any>): string {",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 65,
          "content": "generateKey(method: string, url: string, params?: Record<string, any>): string {",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/lib/validation/schemas/proposal.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 4,
      "patterns": {
        "commentAny": 2,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 33,
          "content": "// Accept UUID format, positive numbers, or any non-empty string (not 'undefined')",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/app/api/admin/audit/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 108,
          "content": "(where.at as any).gte = new Date(startDate);",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 111,
          "content": "(where.at as any).lte = new Date(endDate);",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/user/preferences/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 232,
          "content": "dashboardLayout: dashboardLayout as any,",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 241,
          "content": "dashboardLayout: dashboardLayout as any,",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/http.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 306,
          "content": "const apiResponse = data as any;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/openapi/generator.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "recordTypes": 1,
        "genericConstraints": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 18,
          "content": "paths: {} as Record<string, any>,",
          "pattern": "recordTypes"
        },
        {
          "lineNumber": 18,
          "content": "paths: {} as Record<string, any>,",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/lib/performance/formOptimizer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "genericConstraints": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 125,
          "content": "private validationCache = new Map<string, any>();",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/lib/performance/navigationOptimizer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "genericConstraints": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 20,
          "content": "private routeCache = new Map<string, any>();",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/lib/performance/performanceTester.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 206,
          "content": "return (performance as any).memory.usedJSHeapSize;",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/prisma.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 18,
          "content": "return null as any;",
          "pattern": "typeAssertions"
        },
        {
          "lineNumber": 65,
          "content": "return (client as any)[prop];",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/rbac/withRole.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 2,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 33,
          "content": "const tokenRolesRaw = (token as any).roles ?? (token as any).role ?? [];",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/services/productRelationshipEngine.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 3,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 2
      },
      "lines": [
        {
          "lineNumber": 62,
          "content": "status: { in: ['DRAFT', 'PUBLISHED', 'REVIEW'] as any },",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/auth/login/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 58,
          "content": "validationErrors: (error as any).issues,",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/billing/portal/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 9,
          "content": "const tenant = await prisma.tenant.findUnique({ where: { id: (user as any).tenantId } });",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/app/api/idempotency-example/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "genericConstraints": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 13,
          "content": "const processedRequests = new Map<string, any>();",
          "pattern": "genericConstraints"
        }
      ]
    },
    {
      "file": "src/app/api/tenant/entitlements/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 15,
          "content": "() => EntitlementService.getEntitlements((user as any).tenantId),",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/errors/ErrorHandlingService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/lib/errors.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 89,
          "content": "// Convert any error to ProblemDetails format",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/security/audit.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/lib/security/hardening.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 438,
          "content": "// Safely extract client IP from NextRequest without unsafe any access",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/security.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "genericConstraints": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 181,
          "content": "validator.isMobilePhone(phone, 'any') || validator.isNumeric(phone.replace(/[\\s\\-()+]/g, ''))",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/lib/services/BillingSyncService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "typeAssertions": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 19,
          "content": "const plan = await this.upsertPlan(planName, (planName.toUpperCase() as any) || 'FREE');",
          "pattern": "typeAssertions"
        }
      ]
    },
    {
      "file": "src/lib/services/NextJSDataFetching.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 81,
          "content": "// âœ… FIXED: Replace 'any' with specific interface",
          "pattern": "commentAny"
        },
        {
          "lineNumber": 81,
          "content": "// âœ… FIXED: Replace 'any' with specific interface",
          "pattern": "stringAny"
        }
      ]
    },
    {
      "file": "src/lib/services/userService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 58,
          "content": "// âœ… CRITICAL: Cache cleanup function (generic to avoid any)",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/utils/apiResponseHandler.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": [
        {
          "lineNumber": 186,
          "content": "// Pattern 5: Search for any array property",
          "pattern": "commentAny"
        }
      ]
    },
    {
      "file": "src/lib/utils/errorUtils.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/lib/validation/schemas/customer.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/lib/validation/schemas/product.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 2,
      "patterns": {
        "commentAny": 1,
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/app/api/customers/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 1,
      "patterns": {
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/app/api/users/route.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 1,
      "patterns": {
        "stringAny": 1
      },
      "lines": []
    },
    {
      "file": "src/lib/services/subscriptionService.ts",
      "criticality": "ðŸ”´ CRITICAL",
      "totalAnyCount": 1,
      "patterns": {
        "typeAssertions": 1
      },
      "lines": [
        {
          "lineNumber": 41,
          "content": "const status = (sub.status as any) as SubscriptionStatusValue;",
          "pattern": "typeAssertions"
        }
      ]
    }
  ]
}