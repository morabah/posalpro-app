{
  "timestamp": "2025-06-29T17:33:00.766Z",
  "summary": {
    "totalFiles": 2205,
    "totalIssues": 1416,
    "criticalIssues": 54
  },
  "results": {
    "infiniteLoops": [
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    performSearch('');\n  }, [])",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/proposals/approve/page.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    trackAction('dashboard_viewed');\n  }, [])",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/validation/page.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    loadValidationData();\n    // eslint-disable-next-line react-hooks/exhaustive-d...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/performance/mobile/page.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    setIsClient(true);\n  }, [])",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/performance/reports/page.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    const existingReports = reportGenerator.loadReportsFromStorage();\n    setRepor...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/performance/test/page.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    setPerformanceResults(performanceTester.getTestResults());\n    setSidebarResul...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/test-infrastructure.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    // Auto-run tests on component mount\n    runTests();\n  }, [])",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/analytics/AnalyticsDashboard.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    fetchDashboardData();\n    // eslint-disable-next-line react-hooks/exhaustive-d...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/analytics/AnalyticsDashboard.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    trackAnalyticsEvent('dashboard_viewed');\n  }, [])",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/EnhancedLoginForm.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    emailInputRef.current?.focus();\n  }, [])",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/customers/CustomerList.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    fetchCustomers();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/feedback/Toast/ToastProvider.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    setIsMounted(true);\n  }, [])",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/performance/DatabasePerformanceDemo.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    // Get initial performance statistics\n    setPerformanceStats(databaseOptimize...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductList.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    fetchProducts();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      // Cleanup debounced timeout\n      if (debouncedUpdateTim...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      if (debouncedUpdateRef.current) {\n        clearTimeout(de...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/TeamAssignmentStep.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      // Clear debounced timeout on unmount\n      if (debounced...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      if (touchState.current.longPressTimer) {\n        clearTim...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    fetchRoles();\n  }, [fetchRoles]",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    fetchPermissions();\n  }, [fetchPermissions]",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      mountedRef.current = false;\n      if (refreshTimeoutRef.c...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardLayout.ts",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      mountedRef.current = false;\n      if (autoSaveTimeoutRef....",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      if (managerRef.current) {\n        managerRef.current.clea...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      // Clear all debounce timeouts\n      debounceTimeouts.cur...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimizedForm.ts",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      if (debouncedUpdateRef.current) {\n        clearTimeout(de...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedDataFetch.ts",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    fetchData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedSearch.ts",
        "pattern": "missingDependencies",
        "code": "useEffect(() => {\n    return () => {\n      if (debounceTimer.current) {\n        clearTimeout(debounc...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    cacheManager.initializeAnalytics(analytics);\n  }, [cacheManager, analytics]",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      },
      {
        "file": "src/lib/performance/ApiResponseCache.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    apiCache.initializeAnalytics(analytics);\n  }, [apiCache, analytics]",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      },
      {
        "file": "src/lib/performance/BundleOptimizer.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    optimizer.initializeAnalytics(analytics);\n  }, [analytics, optimizer]",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    optimizer.initializeAnalytics(analytics);\n  }, [optimizer, analytics]",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    fetchData();\n  }, [fetchData]",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      },
      {
        "file": "src/lib/services/NextJSDataFetching.ts",
        "pattern": "useEffectWithUnstableDeps",
        "code": "useEffect(() => {\n    fetchingService.initializeAnalytics(analytics);\n  }, [fetchingService, analyti...",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Use useCallback/useMemo for dependencies"
      }
    ],
    "memoryLeaks": [
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 1000)",
        "severity": "LOW",
        "line": 301,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 500)",
        "severity": "LOW",
        "line": 227,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 1000)",
        "severity": "LOW",
        "line": 247,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(handleLoad, 100)",
        "severity": "LOW",
        "line": 41,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/products/create/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 36,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/products/relationships/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 2000)",
        "severity": "LOW",
        "line": 339,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/proposals/manage/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 183,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/proposals/manage/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 183,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 363,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(generateAIDraft, 50)",
        "severity": "LOW",
        "line": 469,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/profile/notifications/route.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 300)",
        "severity": "LOW",
        "line": 69,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/profile/preferences/route.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 300)",
        "severity": "LOW",
        "line": 62,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/profile/update/route.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 500)",
        "severity": "LOW",
        "line": 52,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/test/timeout/route.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 30000)",
        "severity": "LOW",
        "line": 6,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/database/monitoring/page.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    fetchDatabaseMetrics();\n\n    const interval = setInterval(fetchDatabaseMetrics...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/app/performance/page.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    const timer = setTimeout(() => {\n      let current = 0;\n      const target = 9...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/app/performance/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 20,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/performance/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 2000)",
        "severity": "LOW",
        "line": 45,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/phase-7/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 1000)",
        "severity": "LOW",
        "line": 197,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 339,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/admin/DatabaseSyncPanel.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (!isMonitoring) return;\n\n    const interval = setInterval(async () => {\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/admin/DatabaseSyncPanel.tsx",
        "pattern": "unclearedIntervals",
        "code": "setInterval(async ()",
        "severity": "HIGH",
        "line": 233,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/components/admin/DatabaseSyncPanel.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 353,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    fetchDashboardData();\n\n    let intervalId: NodeJS.Timeout | null = null;\n\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "unclearedIntervals",
        "code": "setInterval(fetchDashboardData, refreshInterval)",
        "severity": "HIGH",
        "line": 251,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 500)",
        "severity": "LOW",
        "line": 212,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/analytics/RealTimeAnalyticsOptimizer.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 500)",
        "severity": "LOW",
        "line": 431,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/EnhancedLoginForm.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 161,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/EnhancedLoginForm.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 161,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/coordination/AI-DrivenInsights.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    generateInsights();\n\n    if (autoRefresh) {\n      const interval = setInterval...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 2000)",
        "severity": "LOW",
        "line": 383,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/customers/CustomerCreationSidebar.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 146,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/customers/CustomerList.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 300)",
        "severity": "LOW",
        "line": 286,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/dashboard/DashboardStats.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 500)",
        "severity": "LOW",
        "line": 148,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/dashboard/EnhancedPerformanceDashboard.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    fetchPerformanceData();\n\n    if (autoRefresh) {\n      const interval = setInte...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/dashboard/RecentProposals.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 400)",
        "severity": "LOW",
        "line": 111,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/feedback/Toast/Toast.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(onClose, 200)",
        "severity": "LOW",
        "line": 75,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/feedback/Toast/ToastProvider.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    const timers: NodeJS.Timeout[] = [];\n\n    toasts.forEach(toast => {\n      if (...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/feedback/Toast/ToastProvider.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 195,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/EnhancedMobileNavigation.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 365,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/MobileEnhancedLayout.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 170,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/SplitPanel.tsx",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('mousemove', handleMouseMove)",
        "severity": "LOW",
        "line": 123,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/SplitPanel.tsx",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('mouseup', handleMouseUp)",
        "severity": "LOW",
        "line": 124,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('touchstart', handleTouchStart, { passive: true })",
        "severity": "LOW",
        "line": 203,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (!realTimeEnabled) return;\n\n    const interval = setInterval(() => {\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 139,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/components/performance/PerformanceMonitor.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (isMonitoring) {\n      // Initial metrics collection\n      updateMetrics();...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/performance/PerformanceMonitor.tsx",
        "pattern": "unclearedIntervals",
        "code": "setInterval(updateMetrics, 60000)",
        "severity": "HIGH",
        "line": 146,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 2000)",
        "severity": "LOW",
        "line": 283,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductList.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 300)",
        "severity": "LOW",
        "line": 271,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 217,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 217,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 212,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 212,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (isMobile) {\n      // Throttled analytics for mobile performance\n      cons...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 270,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 270,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 270,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 270,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 270,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 190,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 190,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 190,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 190,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 190,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 190,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 190,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 190,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      const selectedContentArray: Selecte...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 378,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 378,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 2000)",
        "severity": "LOW",
        "line": 680,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      const selectedProductsArray = Array...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 527,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 2000)",
        "severity": "LOW",
        "line": 624,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ReviewStep.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (!insights) return; // Don't update parent if insights are not loaded yet\n\n...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/proposals/steps/ReviewStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 302,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ReviewStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 1500)",
        "severity": "LOW",
        "line": 333,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/SectionAssignmentStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 301,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/TeamAssignmentStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 178,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/TeamAssignmentStep.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 1500)",
        "severity": "LOW",
        "line": 311,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (!isAuthenticated) return;\n\n    const SESSION_WARNING_TIME = 5 * 60 * 1000;...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 225,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 232,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "eventListenerLeak",
        "code": "addEventListener(event, handleActivity, true)",
        "severity": "LOW",
        "line": 286,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/EnhancedMobileCard.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 145,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/EnhancedMobileCard.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 145,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Input.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 28,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/MobileNavigationMenus.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 202,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 318,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 318,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    updateResponsiveState();\n\n    // Event listeners\n    window.addEventListener('...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(updateResponsiveState, debounceMs)",
        "severity": "LOW",
        "line": 305,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('resize', debouncedResize)",
        "severity": "LOW",
        "line": 365,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('change', listener)",
        "severity": "LOW",
        "line": 417,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Select.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 35,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n      if (isVisible) {\n        updatePosition();\n\n        let timeoutId: NodeJS.Ti...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 142,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 142,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(updatePosition, 16)",
        "severity": "LOW",
        "line": 222,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('scroll', throttledUpdate, { passive: true })",
        "severity": "LOW",
        "line": 225,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/feedback/Modal.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (isOpen) {\n      // Store current focus\n      previousFocusRef.current = do...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/ui/feedback/Modal.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n     ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/ui/feedback/Modal.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 151,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/feedback/Toast.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        handleDismi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/ui/feedback/Toast.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 138,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/validation/ValidationProgressMonitor.tsx",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (!isMonitoring) return;\n\n    const interval = setInterval(() => {\n      // ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/components/validation/ValidationProgressMonitor.tsx",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 111,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    fetchMetrics();\n\n    // Refresh metrics every 30 seconds\n    const interval = ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/hooks/auth/__tests__/useAuth.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 100)",
        "severity": "LOW",
        "line": 43,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/auth/__tests__/useAuth.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 50)",
        "severity": "LOW",
        "line": 78,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/auth/__tests__/useAuth.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 150)",
        "severity": "LOW",
        "line": 101,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/auth/__tests__/useAuth.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 100)",
        "severity": "LOW",
        "line": 43,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/auth/useEnhancedSessionManagement.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 358,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/auth/useEnhancedSessionManagement.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(\n        ()",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (!options.autoRefresh || !options.refreshInterval) return;\n\n    refreshTime...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 455,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/dashboard/useDashboardLayout.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 304,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(async ()",
        "severity": "HIGH",
        "line": 163,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 203,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/useApiClient.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    checkHealth();\n\n    if (process.env.NODE_ENV === 'development') {\n      const ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/hooks/useMobileDetection.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(handleScreenChange, 100)",
        "severity": "LOW",
        "line": 383,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 66,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 66,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimizedForm.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 85,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    flushInterval.current = setInterval(() => {\n      if (eventBuffer.current.leng...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    const handleOptimizationRequest = () => {\n      // Increase flush interval whe...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 324,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 324,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(processChunk, 0)",
        "severity": "LOW",
        "line": 217,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 222,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedSearch.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 108,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/usePerformanceIntegration.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    if (!integrationConfig.enableRealTimeMonitoring) return;\n\n    // Initial colle...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/hooks/usePerformanceIntegration.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5000)",
        "severity": "LOW",
        "line": 347,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/usePerformanceMonitor.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    const cleanup = setInterval(() => {\n      const now = Date.now();\n      metric...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/hooks/usePerformanceMonitor.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 221,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 158,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 158,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 158,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 321,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useResponsive.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(updateState, 100)",
        "severity": "LOW",
        "line": 133,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useResponsive.ts",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('resize', throttledUpdateState, { passive: true })",
        "severity": "LOW",
        "line": 136,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/validation/useValidation.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(async ()",
        "severity": "HIGH",
        "line": 374,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/api/client.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 139,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/api/client.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, delay)",
        "severity": "LOW",
        "line": 164,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/api/interceptors/errorInterceptor.ts",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('unhandledrejection', event => {\n    try {\n      const error = event.reason || new ...",
        "severity": "LOW",
        "line": 381,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/api/interceptors/errorInterceptor.ts",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('error', event => {\n    try {\n      const error = new Error(event.message || 'Unkno...",
        "severity": "LOW",
        "line": 394,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/api.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, delay)",
        "severity": "LOW",
        "line": 411,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 494,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('auth-optimization-requested', optimizationListener)",
        "severity": "LOW",
        "line": 477,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('online', onlineListener)",
        "severity": "LOW",
        "line": 478,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "eventListenerLeak",
        "code": "addEventListener('offline', offlineListener)",
        "severity": "LOW",
        "line": 479,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/cache.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 14,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/dashboard/realtime.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 505,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/dashboard/realtime.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 179,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/dashboard/realtime.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(async ()",
        "severity": "LOW",
        "line": 490,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/db/client.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(async ()",
        "severity": "HIGH",
        "line": 185,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/db/client.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, delayMs * attempt)",
        "severity": "LOW",
        "line": 122,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/entities/auth.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 738,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 650,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 650,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 100)",
        "severity": "LOW",
        "line": 384,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/ApiResponseCache.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 712,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/ApiResponseCache.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(\n      ()",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 122,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 122,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/BundleOptimizer.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 295,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/CleanupMechanisms.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 400,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/ComponentLazyLoading.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(async ()",
        "severity": "LOW",
        "line": 211,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/DatabaseOptimizer.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 289,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 573,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(\n      ()",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 356,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/EnhancedPerformanceService.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 217,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizationService.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 180,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizationService.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 180,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizationService.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 180,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizationService.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 219,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizationService.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, Math.random()",
        "severity": "LOW",
        "line": 227,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizer.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 108,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizer.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 108,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizer.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 108,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizer.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 108,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/advanced-cache-system.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 471,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/advanced-cache-system.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 471,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 173,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 15)",
        "severity": "LOW",
        "line": 185,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 8)",
        "severity": "LOW",
        "line": 246,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 20)",
        "severity": "LOW",
        "line": 269,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 173,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 30)",
        "severity": "LOW",
        "line": 386,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 173,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 25)",
        "severity": "LOW",
        "line": 400,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 50)",
        "severity": "LOW",
        "line": 448,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 15)",
        "severity": "LOW",
        "line": 185,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 20)",
        "severity": "LOW",
        "line": 269,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 25)",
        "severity": "LOW",
        "line": 400,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 2)",
        "severity": "LOW",
        "line": 531,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 50)",
        "severity": "LOW",
        "line": 448,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 30)",
        "severity": "LOW",
        "line": 386,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 173,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 15)",
        "severity": "LOW",
        "line": 185,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 100)",
        "severity": "LOW",
        "line": 609,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    monitor.startTracking();\n\n    const interval = setInterval(() => {\n      setMe...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "missingCleanup",
        "code": "useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Add cleanup function in useEffect return"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 320,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 338,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(\n        ()",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/performanceTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(simulate, delay)",
        "severity": "LOW",
        "line": 261,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 144,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 206,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 20)",
        "severity": "LOW",
        "line": 235,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 20)",
        "severity": "LOW",
        "line": 235,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 15)",
        "severity": "LOW",
        "line": 284,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 30)",
        "severity": "LOW",
        "line": 330,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 206,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 206,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 20)",
        "severity": "LOW",
        "line": 235,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 206,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 206,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 3)",
        "severity": "LOW",
        "line": 427,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 144,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 100)",
        "severity": "LOW",
        "line": 468,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 84,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/security.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(\n  ()",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/services/DatabaseOptimizationService.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(\n      ()",
        "severity": "HIGH",
        "line": "unknown",
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/lib/store/authStore.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 307,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/store/uiStore.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 399,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/test-infrastructure.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 132,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/test-infrastructure.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 5)",
        "severity": "LOW",
        "line": 145,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/testing/testUtils.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 69,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/testing/testUtils.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 100)",
        "severity": "LOW",
        "line": 233,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils/debounce.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(pendingFunc, wait)",
        "severity": "LOW",
        "line": 40,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 28,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 28,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, ms)",
        "severity": "LOW",
        "line": 94,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/validation/formHelpers.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(async ()",
        "severity": "LOW",
        "line": 255,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/validationTracker.ts",
        "pattern": "unclearedIntervals",
        "code": "setInterval(()",
        "severity": "HIGH",
        "line": 116,
        "suggestion": "Clear intervals in cleanup function"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 558,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/integration/crossRoleCoordinationJourney.test.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 10)",
        "severity": "LOW",
        "line": 694,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/integration/multiUserCollaboration.test.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, index * 10)",
        "severity": "LOW",
        "line": 648,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/integration/multiUserCollaboration.test.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 50 * i)",
        "severity": "LOW",
        "line": 798,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/integration/proposalCreationJourney.test.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(async ()",
        "severity": "LOW",
        "line": 614,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, stepDuration)",
        "severity": "LOW",
        "line": 178,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, Math.random()",
        "severity": "LOW",
        "line": 189,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, Math.random()",
        "severity": "LOW",
        "line": 189,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, Math.random()",
        "severity": "LOW",
        "line": 189,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, Math.random()",
        "severity": "LOW",
        "line": 189,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, delay)",
        "severity": "LOW",
        "line": 486,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 100)",
        "severity": "LOW",
        "line": 518,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 100)",
        "severity": "LOW",
        "line": 518,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, latency)",
        "severity": "LOW",
        "line": 54,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 96,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, strategy.backoffDelay * attempts)",
        "severity": "LOW",
        "line": 679,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 139,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 139,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 139,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/test-utils.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(resolve, 50)",
        "severity": "LOW",
        "line": 100,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/test-utils.tsx",
        "pattern": "unclearedTimeouts",
        "code": "setTimeout(()",
        "severity": "LOW",
        "line": 210,
        "suggestion": "Review and fix this pattern"
      }
    ],
    "performanceIssues": [
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <d...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <d...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "missingMemoization",
        "code": "const updatedUsers = users?.map(user =>\n        user.id === editingUser.id\n          ? { ...user, .....",
        "severity": "MEDIUM",
        "line": 304,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "heavyComputationInRender",
        "code": "return;\n\n      try {\n        Array.from(files).forEach(file => {\n          toast.success(`Uploaded $...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/coordination/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalProposals,\n      completedProposals,\n      inProgressProposals,\n      overdue,\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/customers/page.tsx",
        "pattern": "missingMemoization",
        "code": "const CustomerList = dynamic(() => import('@/components/customers/CustomerList'), {\n  loading: () =>...",
        "severity": "MEDIUM",
        "line": 8,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/(dashboard)/products/page.tsx",
        "pattern": "missingMemoization",
        "code": "const ProductList = dynamic(() => import('@/components/products/ProductList'), {\n  loading: () => <d...",
        "severity": "MEDIUM",
        "line": 5,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/(dashboard)/products/relationships/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalRelationships: MOCK_RELATIONSHIPS.length,\n      circularDependencies: MOCK_CIRCU...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/profile/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      const endTime = performance.now();\n      console.log('[PERFORMANCE] Profile pag...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/profile/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      const endTime = performance.now();\n      console.log('[PERFORMANCE] Profile pag...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/profile/page.tsx",
        "pattern": "missingMemoization",
        "code": "const UserProfile = dynamic(() => import('@/components/profile/UserProfile'), {\n  loading: () => (\n ...",
        "severity": "MEDIUM",
        "line": 7,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/(dashboard)/proposals/[id]/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      isMounted = false;\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/proposals/[id]/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      isMounted = false;\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/proposals/approve/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "returns to comply with Rules of Hooks\n  const dashboardMetrics = useMemo(() => {\n    const total = a...",
        "severity": "MEDIUM",
        "line": 330,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/proposals/approve/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "returns to comply with Rules of Hooks\n  const dashboardMetrics = useMemo(() => {\n    const total = a...",
        "severity": "LOW",
        "line": 330,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/proposals/manage/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      total,\n      draft,\n      inProgress,\n      review,\n      submitted,\n      won,\n     ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      cancelAnimationFrame(animationFrame);\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (autoSaveTimer.current) {\n        clearTimeout(autoSaveTimer.current);\n     ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      cancelAnimationFrame(animationFrame);\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (autoSaveTimer.current) {\n        clearTimeout(autoSaveTimer.current);\n     ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "missingMemoization",
        "code": "const processedVersions = versionsData.map((version: any)",
        "severity": "MEDIUM",
        "line": 317,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "missingMemoization",
        "code": "const generateAIDraft = () => {\n      const aiGeneratedContent = `# ${assignment?.proposalTitle} - A...",
        "severity": "MEDIUM",
        "line": 403,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "missingMemoization",
        "code": "const templateContent = template.sections\n        .map(section => `## ${section.title}\\n\\n${section....",
        "severity": "MEDIUM",
        "line": 488,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/(dashboard)/validation/rules/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/workflows/approval/page.tsx",
        "pattern": "missingMemoization",
        "code": "const handleTemplateApply = useCallback((template: any) => {\n    // Apply template rules to current ...",
        "severity": "MEDIUM",
        "line": 260,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/(dashboard)/workflows/templates/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalTemplates: MOCK_TEMPLATES.length,\n      activeTemplates: MOCK_TEMPLATES.filter(t...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/admin/db-sync/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return response\n    const logEntry = {\n      timestamp: new Date().toISOString(),\n      user: sessio...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/admin/db-sync/route.ts",
        "pattern": "heavyComputationInRender",
        "code": "return JSON.stringify(roles);\n        ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/admin/metrics/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    apiStatus,\n    databaseStatus,\n    systemLoad,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/admin/metrics/route.ts",
        "pattern": "missingMemoization",
        "code": "const metrics = {\n      // System Health\n      apiStatus: systemHealth.apiStatus,\n      databaseStat...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/admin/roles/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { resource, action }",
        "severity": "MEDIUM",
        "line": 224,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/admin/roles/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { resource, action }",
        "severity": "MEDIUM",
        "line": 224,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/admin/roles/route.ts",
        "pattern": "missingMemoization",
        "code": "const transformedRoles = roles.map(role => ({\n      id: role.id,\n      name: role.name,\n      descri...",
        "severity": "MEDIUM",
        "line": 119,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/admin/roles/route.ts",
        "pattern": "missingMemoization",
        "code": "const permissions = await prisma.permission.findMany({\n        where: {\n          OR: roleData.permi...",
        "severity": "MEDIUM",
        "line": 220,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/admin/roles/route.ts",
        "pattern": "missingMemoization",
        "code": "const rolePermissions = permissions.map(permission => ({\n        roleId: newRole.id,\n        permiss...",
        "severity": "MEDIUM",
        "line": 229,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/admin/roles/route.ts",
        "pattern": "missingMemoization",
        "code": "const permissions = await prisma.permission.findMany({\n          where: {\n            OR: validatedD...",
        "severity": "MEDIUM",
        "line": 220,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/admin/roles/route.ts",
        "pattern": "missingMemoization",
        "code": "const rolePermissions = permissions.map(permission => ({\n          roleId: id,\n          permissionI...",
        "severity": "MEDIUM",
        "line": 229,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/admin/users/route.ts",
        "pattern": "missingMemoization",
        "code": "const transformedUsers = users.map(user => ({\n      id: user.id,\n      name: user.name || 'Unknown',...",
        "severity": "MEDIUM",
        "line": 119,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/analytics/dashboard/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalEvents,\n      avgImprovement: avgImprovement._avg.performanceImprovement ?? 0,\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/analytics/dashboard/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalEvents: 0,\n      avgImprovement: 0,\n      successRate: 0,\n      hypothesisBreakd...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/analytics/dashboard/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return mock data\n    const totalStories = 15; // Based on DATA_MODEL.md specifications\n    const com...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/analytics/dashboard/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalStories: 0,\n      completedStories: 0,\n      inProgress: 0,\n      avgCompletionR...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/analytics/dashboard/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalBaselines: mockBaselines.length,\n      avgTargetImprovement: 45,\n      avgCurren...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/analytics/dashboard/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalBaselines: 0,\n      avgTargetImprovement: 0,\n      avgCurrentImprovement: 0,\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/analytics/dashboard/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return mock data\n    const mockComponents = [\n      'SearchComponent',\n      'ProposalCreationForm',...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/analytics/dashboard/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalComponents: 0,\n      validComponents: 0,\n      pendingComponents: 0,\n      inval...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/analytics/users/route.ts",
        "pattern": "missingMemoization",
        "code": "const analytics = {\n      summary: {\n        totalUsers: users.length,\n        activeUsers: users.fi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/auth/login/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return NextResponse.json(\n      {\n        success: true,\n        message: 'Login validation successf...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/auth/register/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return createApiErrorResponse(\n        new StandardError({\n          message: 'Rate limit exceeded f...",
        "severity": "MEDIUM",
        "line": 71,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/auth/register/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return createApiErrorResponse(\n        new StandardError({\n          message: 'Registration validati...",
        "severity": "MEDIUM",
        "line": 71,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/auth/register/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return createApiErrorResponse(\n          new StandardError({\n            message: 'Attempted to regi...",
        "severity": "MEDIUM",
        "line": 71,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/auth/register/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return createApiErrorResponse(\n      new StandardError({\n        message: 'Unexpected error during u...",
        "severity": "MEDIUM",
        "line": 71,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/auth/register/route.ts",
        "pattern": "missingMemoization",
        "code": "const formattedErrors = error.errors.map(err => ({\n        field: err.path.join('.')",
        "severity": "MEDIUM",
        "line": 136,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/config/route.ts",
        "pattern": "heavyComputationInRender",
        "code": "return new NextResponse(JSON.stringify(response), {\n      status: 200,\n      headers,\n    ",
        "severity": "LOW",
        "line": 161,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/content/route.ts",
        "pattern": "missingMemoization",
        "code": "const content = rawContent.map(item => ({\n        id: item.id,\n        title: item.title,\n        ty...",
        "severity": "MEDIUM",
        "line": 229,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/content/route.ts",
        "pattern": "missingMemoization",
        "code": "const sanitizedTags = tags?.map(tag => sanitizeInput(tag)",
        "severity": "MEDIUM",
        "line": 382,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/customers/[id]/proposals/route.ts",
        "pattern": "missingMemoization",
        "code": "const transformedProposals = proposals.map(proposal => ({\n      ...proposal,\n      statistics: {\n   ...",
        "severity": "MEDIUM",
        "line": 235,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/health/route.ts",
        "pattern": "heavyComputationInRender",
        "code": "return new NextResponse(JSON.stringify(health), {\n      status: 200,\n      headers: {\n        'Conte...",
        "severity": "LOW",
        "line": 15,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/performance/route.ts",
        "pattern": "heavyComputationInRender",
        "code": "return new NextResponse(JSON.stringify(metrics), {\n      status: 200,\n      headers: {\n        'Cont...",
        "severity": "LOW",
        "line": 20,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/products/[id]/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return createApiErrorResponse(\n        new StandardError({\n          message: 'Unauthorized access a...",
        "severity": "MEDIUM",
        "line": 53,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/products/[id]/route.ts",
        "pattern": "missingMemoization",
        "code": "const transformedProduct = {\n      ...product,\n      statistics: {\n        relationshipsCount: produ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/products/categories/route.ts",
        "pattern": "missingMemoization",
        "code": "const simplifiedCategories = categories.map(cat => ({\n      name: cat.name,\n      count: cat.count,\n...",
        "severity": "MEDIUM",
        "line": 126,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/products/route.ts",
        "pattern": "missingMemoization",
        "code": "const categories = validatedQuery.category.split(',').map(c => c.trim()",
        "severity": "MEDIUM",
        "line": 104,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/products/route.ts",
        "pattern": "missingMemoization",
        "code": "const tags = validatedQuery.tags.split(',').map(t => t.trim()",
        "severity": "MEDIUM",
        "line": 112,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/products/route.ts",
        "pattern": "missingMemoization",
        "code": "const transformedProducts = products.map(product => ({\n      id: product.id,\n      name: product.nam...",
        "severity": "MEDIUM",
        "line": 173,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/proposals/[id]/route.ts",
        "pattern": "missingMemoization",
        "code": "const proposalDetail = {\n      id: proposal.id,\n      title: proposal.title,\n      description: prop...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/proposals/queue/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return createApiErrorResponse(\n        new StandardError({\n          message: 'Unauthorized access a...",
        "severity": "MEDIUM",
        "line": 16,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/proposals/queue/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return createApiErrorResponse(\n      new StandardError({\n        message: 'Failed to retrieve propos...",
        "severity": "MEDIUM",
        "line": 16,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/proposals/route.ts",
        "pattern": "missingMemoization",
        "code": "const productIds = validatedData.products.map(p => p.productId)",
        "severity": "MEDIUM",
        "line": 611,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/proposals/route.ts",
        "pattern": "missingMemoization",
        "code": "const productsData = validatedData.products.map(p => ({\n          proposalId: newProposal.id,\n      ...",
        "severity": "MEDIUM",
        "line": 689,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/proposals/route.ts",
        "pattern": "missingMemoization",
        "code": "const sectionsData = validatedData.sections.map(s => ({\n          proposalId: newProposal.id,\n      ...",
        "severity": "MEDIUM",
        "line": 705,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/proposals/route.ts",
        "pattern": "heavyComputationInRender",
        "code": "return createApiErrorResponse(\n          new StandardError({\n            message: 'Database error wh...",
        "severity": "LOW",
        "line": 199,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/search/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    results: paginatedResults,\n    totalCount: results.length,\n    hasNextPage,\n    nextCur...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/search/suggestions/route.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          query: data?.query || '',\n          timestamp: event.timestamp,\n        }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/api/search/suggestions/route.ts",
        "pattern": "missingMemoization",
        "code": "const uniqueSuggestions = Array.from(\n      new Map(allSuggestions.map(item => [item.text, item])",
        "severity": "MEDIUM",
        "line": 60,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/search/suggestions/route.ts",
        "pattern": "missingMemoization",
        "code": "const searchQueries = recentEvents\n      .map(event => {\n        const data = event.measurementData ...",
        "severity": "MEDIUM",
        "line": 269,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/users/[id]/route.ts",
        "pattern": "missingMemoization",
        "code": "const userProfile = {\n      id: user.id,\n      name: user.name,\n      email: user.email,\n      depar...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/users/[id]/route.ts",
        "pattern": "missingMemoization",
        "code": "const combinedActivity = [\n        ...auditLogs.map(log => ({\n          id: log.id,\n          type: ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/workflows/[id]/executions/route.ts",
        "pattern": "missingMemoization",
        "code": "const transformedExecutions = executions.map(execution => {\n      const stageExecutions = Array.isAr...",
        "severity": "MEDIUM",
        "line": 94,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/workflows/[id]/route.ts",
        "pattern": "missingMemoization",
        "code": "const enhancedWorkflow = {\n      ...workflow,\n      statistics: {\n        totalExecutions: workflow....",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/workflows/[id]/route.ts",
        "pattern": "missingMemoization",
        "code": "const stagesData = validatedData.stages.map(stage => ({\n          workflowId: id,\n          name: st...",
        "severity": "MEDIUM",
        "line": 251,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/api/workflows/route.ts",
        "pattern": "missingMemoization",
        "code": "const transformedWorkflows = workflows.map(workflow => {\n      const executionStats = (workflow.exec...",
        "severity": "MEDIUM",
        "line": 121,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/app/database/monitoring/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n  ",
        "severity": "LOW",
        "line": 171,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/debug-api/page.tsx",
        "pattern": "heavyComputationInRender",
        "code": "return (\n    <div className=\"p-8\">\n      <h1 className=\"text-2xl font-bold mb-4\">API Debug Page</h1>...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/executive/review/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      pending,\n      totalValue,\n      avgWinProb: Math.round(avgWinProb),\n      atRisk,\n  ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/performance/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n    ",
        "severity": "LOW",
        "line": 35,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/performance/page.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearTimeout(timer);\n  ",
        "severity": "LOW",
        "line": 38,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/performance/test/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        renderTime: result.renderTime,\n        rerenderCount: result.rerenderCount,\n       ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/performance/test/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {}",
        "severity": "MEDIUM",
        "line": 306,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      documentId: MOCK_DOCUMENT.id,\n      extractionTime: 4.2, // Mock: 4.2 seconds (vs 45 ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalIssues: gapCount + missingCount,\n      metRequirements: metCount,\n      gapRequi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "heavyComputationInRender",
        "code": "return {\n      documentId: MOCK_DOCUMENT.id,\n      extractionTime: 4.2, // Mock: 4.2 seconds (vs 45 ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/admin/DatabaseSyncPanel.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    const interval = setInterval(async () => {\n      await Promise.all([checkDatabaseStatus...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/admin/DatabaseSyncPanel.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n  ",
        "severity": "LOW",
        "line": 241,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/admin/DatabaseSyncPanel.tsx",
        "pattern": "missingMemoization",
        "code": "const newConflicts = syncData.conflicts.map(\n            (conflict: {\n              table: string;\n ...",
        "severity": "MEDIUM",
        "line": 300,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { overview: mockOverview, hypotheses: mockHypotheses, summary: mockSummary }",
        "severity": "MEDIUM",
        "line": 202,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    ",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { color: 'text-green-600 bg-green-50', icon: CheckCircleIcon, label: 'Excellent' }",
        "severity": "MEDIUM",
        "line": 320,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { color: 'text-blue-600 bg-blue-50', icon: ArrowTrendingUpIcon, label: 'Good' }",
        "severity": "MEDIUM",
        "line": 322,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          color: 'text-yellow-600 bg-yellow-50',\n          icon: ExclamationTriangleIcon,\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { color: 'text-red-600 bg-red-50', icon: ArrowTrendingDownIcon, label: 'Critical' }",
        "severity": "MEDIUM",
        "line": 330,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { color: 'text-gray-600 bg-gray-50', icon: ClockIcon, label: 'Unknown' }",
        "severity": "MEDIUM",
        "line": 332,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/analytics/HypothesisTrackingDashboard.tsx",
        "pattern": "missingMemoization",
        "code": "const csvContent = [\n      'Hypothesis,Name,Target,Unit,Current Performance,Progress to Target,Succe...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/analytics/RealTimeAnalyticsOptimizer.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      hypothesesMetrics,\n      performanceMetrics: performanceMetricsData,\n      optimizati...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/analytics/RealTimeAnalyticsOptimizer.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n    ",
        "severity": "LOW",
        "line": 543,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/EnhancedLoginForm.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { message: userMessage }",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/auth/EnhancedLoginForm.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { message: fallbackMessage }",
        "severity": "MEDIUM",
        "line": 219,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    message: errorMessage,\n    type: isNetworkError ? 'network' : 'auth',\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => window.removeEventListener('load', handleLoad);\n    ",
        "severity": "LOW",
        "line": 173,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/ProtectedRoute.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    isAuthenticated: status === 'authenticated',\n    isLoading: status === 'loading',\n    s...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/auth/__tests__/LoginForm.integration.test.tsx",
        "pattern": "missingMemoization",
        "code": "const attemptPromises = attempts.map(async (_, index)",
        "severity": "MEDIUM",
        "line": 278,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/common/AnalyticsStorageMonitor.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n  ",
        "severity": "LOW",
        "line": 58,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/coordination/AI-DrivenInsights.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n    ",
        "severity": "LOW",
        "line": 250,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/coordination/TeamAssignmentBoard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { ...member, suggestionScore: totalScore }",
        "severity": "MEDIUM",
        "line": 192,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/coordination/TeamAssignmentBoard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return teamMembers.map(member => {\n      const utilizationPercentage = (member.currentWorkload / mem...",
        "severity": "MEDIUM",
        "line": 276,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/coordination/TeamAssignmentBoard.tsx",
        "pattern": "missingMemoization",
        "code": "const workloadData = useMemo(() => {\n    return teamMembers.map(member => {\n      const utilizationP...",
        "severity": "MEDIUM",
        "line": 275,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          ...task.complexity,\n          overall: Math.round(overall * 100) / 100,\n        }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { technical: 1, coordination: 1, research: 1, review: 1, external: 1, overall: 1 }",
        "severity": "MEDIUM",
        "line": 221,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          taskId: task.id,\n          earliestStart,\n          latestStart,\n          earlie...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        totalTasks,\n        completedTasks,\n        delayedTasks,\n        averageCompletion...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        totalTasks: 0,\n        completedTasks: 0,\n        delayedTasks: 0,\n        averageC...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const calculateCriticalPath = useCallback((): CriticalPathNode[] => {\n    try {\n      const nodes: C...",
        "severity": "MEDIUM",
        "line": 228,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const earliestStart =\n          dependencyEndDates.length > 0\n            ? new Date(Math.max(...dep...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const projectEndDate = new Date(Math.max(...tasks.map(t => t.endDate.getTime()",
        "severity": "MEDIUM",
        "line": 245,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const projectStartDate = new Date(Math.min(...tasks.map(t => t.startDate.getTime()",
        "severity": "MEDIUM",
        "line": 304,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const riskFactors = [\n        ...tasks.filter(t => t.riskLevel === 'high' || t.riskLevel === 'critic...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const optimizationOpportunities = [\n        ...tasks\n          .filter(\n            t => t.complexit...",
        "severity": "MEDIUM",
        "line": 329,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/coordination/TimelineVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const renderCriticalPathView = () => {\n    const criticalTasks = criticalPath\n      .filter(cp => cp...",
        "severity": "MEDIUM",
        "line": 510,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/customers/CustomerList.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return (\n      <Card className=\"p-6\">\n        <div className=\"text-center\">\n          <p className=\"...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/customers/CustomerList.tsx",
        "pattern": "missingMemoization",
        "code": "const CustomerListSkeleton = memo(() => (\n  <div className=\"space-y-4\">\n    {[...Array(6)].map((_, i...",
        "severity": "MEDIUM",
        "line": 149,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/dashboard/DashboardShell.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { hasError: true }",
        "severity": "MEDIUM",
        "line": 128,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/dashboard/DashboardShell.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => window.removeEventListener('load', handleLoad);\n    ",
        "severity": "LOW",
        "line": 256,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/dashboard/DashboardStats.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return (\n      <Card className=\"p-6\">\n        <div className=\"text-center\">\n          <p className=\"...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/dashboard/EnhancedPerformanceDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { status: 'excellent', color: 'bg-green-100 text-green-800' }",
        "severity": "MEDIUM",
        "line": 320,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/dashboard/EnhancedPerformanceDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { status: 'good', color: 'bg-blue-100 text-blue-800' }",
        "severity": "MEDIUM",
        "line": 321,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/dashboard/EnhancedPerformanceDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { status: 'warning', color: 'bg-yellow-100 text-yellow-800' }",
        "severity": "MEDIUM",
        "line": 322,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/dashboard/EnhancedPerformanceDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { status: 'critical', color: 'bg-red-100 text-red-800' }",
        "severity": "MEDIUM",
        "line": 323,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/dashboard/EnhancedPerformanceDashboard.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n    ",
        "severity": "LOW",
        "line": 306,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/dashboard/ModernDashboard.tsx",
        "pattern": "missingMemoization",
        "code": "const DashboardSkeleton = () => (\n  <div className=\"animate-pulse\">\n    {/* Mobile-optimized header ...",
        "severity": "MEDIUM",
        "line": 88,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/dashboard/widgets/RecentActivity.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return 'text-red-600 bg-red-50 border-red-200';\n\n    switch (type) {\n      case 'proposal':\n        ...",
        "severity": "MEDIUM",
        "line": 48,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/dashboard/widgets/RecentActivity.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { filteredActivities: [], filterCounts: {} ",
        "severity": "MEDIUM",
        "line": 166,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/dashboard/widgets/RecentActivity.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      filteredActivities: filtered.slice(0, 10), // Limit to 10 items\n      filterCounts: c...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/deadlines/DeadlineTracker.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();\n        case 'priority':\n     ...",
        "severity": "MEDIUM",
        "line": 415,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/deadlines/DeadlineTracker.tsx",
        "pattern": "missingMemoization",
        "code": "const handleUpdateDeadline = useCallback(\n    (id: string, updates: Partial<Deadline>) => {\n      se...",
        "severity": "MEDIUM",
        "line": 330,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/feedback/Toast/ToastProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      timers.forEach(timer => clearTimeout(timer));\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/feedback/Toast/ToastProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      window.removeEventListener('app:error', handleAppError as EventListener);\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/feedback/Toast/ToastProvider.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      timers.forEach(timer => clearTimeout(timer));\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/feedback/Toast/ToastProvider.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      window.removeEventListener('app:error', handleAppError as EventListener);\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        ...state,\n        steps: action.payload,\n        progress:\n          state.steps.le...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          ...state,\n          currentStep: newStep,\n          progress: ((newStep + 1) / st...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return state;\n\n    case 'PREVIOUS_STEP':\n      if (state.currentStep > 0) {\n        const newStep = ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return state;\n\n    case 'GO_TO_STEP':\n      if (action.payload >= 0 && action.payload < state.steps....",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        ...state,\n        errors: newErrors,\n        isValid: Object.values(newErrors).ever...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        ...state,\n        isSubmitting: action.payload,\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        ...state,\n        stepData: action.payload,\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {}",
        "severity": "MEDIUM",
        "line": 327,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return state.stepData[currentStepConfig.id] || {}",
        "severity": "MEDIUM",
        "line": 328,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return state.stepData[stepId] || {}",
        "severity": "MEDIUM",
        "line": 333,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "missingMemoization",
        "code": "const errorMessages = error.issues.map(issue => issue.message)",
        "severity": "MEDIUM",
        "line": 280,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/layout/AppLayout.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      document.body.style.overflow = 'unset';\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/layout/AppLayout.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => document.removeEventListener('keydown', handleKeyDown);\n  ",
        "severity": "LOW",
        "line": 78,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/AppLayout.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      document.body.style.overflow = 'unset';\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/AppSidebar.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const activeGroup = NAVIGATION_ITEMS.find(\n      item =>\n        pathname.startsWith(it...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/layout/EnhancedMobileNavigation.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => document.removeEventListener('keydown', handleKeyDown);\n  ",
        "severity": "LOW",
        "line": 439,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/ProtectedLayout.tsx",
        "pattern": "missingMemoization",
        "code": "const userRoles = session.user.roles.map(r => r.toLowerCase()",
        "severity": "MEDIUM",
        "line": 44,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/layout/UserMenu.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/layout/UserMenu.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/layout/UserMenu.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/UserMenu.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    let touchStartTime = 0;\n    let responseTimes: number[] = [];\n\n    const handleTouchSta...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      document.removeEventListener('touchstart', handleTouchStart);\n      document.re...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const updateMetrics = () => {\n      const newMetrics = calculatePerformanceScore();\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      cleanup?.();\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventLis...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    let touchStartTime = 0;\n    let responseTimes: number[] = [];\n\n    const handleTouchSta...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      document.removeEventListener('touchstart', handleTouchStart);\n      document.re...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    const updateMetrics = () => {\n      const newMetrics = calculatePerformanceScore();\n   ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n  ",
        "severity": "LOW",
        "line": 499,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      cleanup?.();\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/mobile/MobileResponsivenessEnhancer.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventLis...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    const interval = setInterval(() => {\n      collectAllMetrics();\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n  ",
        "severity": "LOW",
        "line": 143,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/performance/PerformanceMonitor.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (updateIntervalRef.current) {\n        clearInterval(updateIntervalRef.curren...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/performance/PerformanceMonitor.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (updateIntervalRef.current) {\n        clearInterval(updateIntervalRef.curren...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingMemoization",
        "code": "const validationPromises = currentStepFields.map(field =>\n      form.trigger(field as keyof ProductC...",
        "severity": "MEDIUM",
        "line": 466,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/products/ProductList.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return (\n      <Card className=\"p-6\">\n        <div className=\"text-center\">\n          <p className=\"...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductList.tsx",
        "pattern": "missingMemoization",
        "code": "const ProductListSkeleton = memo(() => (\n  <div className=\"space-y-4\">\n    {[...Array(6)].map((_, i)",
        "severity": "MEDIUM",
        "line": 123,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/products/ProductRelationshipManager.tsx",
        "pattern": "missingMemoization",
        "code": "const validationPromises = relationships.map(rel =>\n        validationEngine.validateRelationships(r...",
        "severity": "MEDIUM",
        "line": 104,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/products/ProductRelationshipManager.tsx",
        "pattern": "missingMemoization",
        "code": "const predictions = await predictiveValidation.predictValidationIssues({\n        productId: relation...",
        "severity": "MEDIUM",
        "line": 110,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/products/ProductRelationshipManager.tsx",
        "pattern": "missingMemoization",
        "code": "const updateRelationship = useCallback(\n    async (relationshipId: string, updates: Partial<ProductR...",
        "severity": "MEDIUM",
        "line": 172,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return items.sort((a, b) => {\n      // Priority scoring algorithm\n      let scoreA = 0;\n      let sc...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalItems,\n      overdueItems,\n      criticalItems,\n      avgProcessingTime,\n      s...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "missingMemoization",
        "code": "const bottleneckStages = Object.entries(stageGroups)\n      .filter(([_, count]) => count > 2)\n      ...",
        "severity": "MEDIUM",
        "line": 324,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/DecisionInterface.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      checklistProgress,\n      collaborationProgress,\n      overallProgress,\n      canProce...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/ProposalCard.tsx",
        "pattern": "missingMemoization",
        "code": "const formatStatus = (status: string): string => {\n  return status\n    .split('-')\n    .map(word => ...",
        "severity": "MEDIUM",
        "line": 69,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return prev.step1;\n            case 2:\n              return prev.step2;\n            case 3:\n        ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (autoSaveTimer.current) {\n        clearTimeout(autoSaveTimer.current);\n     ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { isValid: errors.length === 0, errors }",
        "severity": "MEDIUM",
        "line": 1102,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return wizardData.step1;\n        case 2:\n          return wizardData.step2;\n        case 3:\n        ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return (stepData: any) => {\n        // ✅ CRITICAL FIX: Use debounced update to prevent excessive re-...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearTimeout(timeoutId);\n    ",
        "severity": "LOW",
        "line": 292,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      // Cleanup debounced timeout\n      if (debouncedUpdateTimeoutRef.current) {\n   ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (autoSaveTimer.current) {\n        clearTimeout(autoSaveTimer.current);\n     ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "missingMemoization",
        "code": "const MobileStepStepper = () => (\n    <div className=\"bg-white border-b border-gray-200 sticky top-0...",
        "severity": "MEDIUM",
        "line": 498,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "missingMemoization",
        "code": "const DesktopStepStepper = () => (\n    <div className=\"hidden sm:flex items-center justify-between m...",
        "severity": "MEDIUM",
        "line": 564,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/WorkflowOrchestrator.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { path: currentPath, duration: totalDuration }",
        "severity": "MEDIUM",
        "line": 359,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/WorkflowOrchestrator.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { path: currentPath, duration: totalDuration }",
        "severity": "MEDIUM",
        "line": 359,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/WorkflowOrchestrator.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { path: newPath, duration: newDuration }",
        "severity": "MEDIUM",
        "line": 372,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/WorkflowOrchestrator.tsx",
        "pattern": "missingMemoization",
        "code": "const identifyCriticalPath = useCallback((stages: WorkflowStage[]): string[] => {\n    const stageMap...",
        "severity": "MEDIUM",
        "line": 346,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/WorkflowOrchestrator.tsx",
        "pattern": "missingMemoization",
        "code": "const parallelGroup = finalStages\n            .filter(\n              s =>\n                s.canRunIn...",
        "severity": "MEDIUM",
        "line": 456,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/WorkflowOrchestrator.tsx",
        "pattern": "missingMemoization",
        "code": "const estimatedDuration = Math.max(\n        ...criticalPath.map(stageId => {\n          const stage =...",
        "severity": "MEDIUM",
        "line": 473,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      isValid: errors.length === 0,\n      errors,\n      warnings,\n      suggestions,\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingMemoization",
        "code": "const updateCondition = useCallback((conditionId: string, updates: Partial<RuleCondition>) => {\n    ...",
        "severity": "MEDIUM",
        "line": 536,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingMemoization",
        "code": "const updateAction = useCallback((actionId: string, updates: Partial<RuleAction>) => {\n    setEditin...",
        "severity": "MEDIUM",
        "line": 544,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/WorkflowVisualization.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      stages: criticalStages,\n      totalDuration: totalCriticalDuration,\n      actualDurat...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/WorkflowVisualization.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalEstimatedDuration: totalEstimated,\n      totalActualDuration: totalActual,\n     ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/WorkflowVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const maxGroupDuration = Math.max(...groupStages.map(s => s.estimatedDuration)",
        "severity": "MEDIUM",
        "line": 143,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/WorkflowVisualization.tsx",
        "pattern": "missingMemoization",
        "code": "const renderTimelineView = () => (\n    <div className=\"space-y-4\">\n      {/* Critical Path Highlight...",
        "severity": "MEDIUM",
        "line": 258,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n        // Track field interactions for analytics (heavily throttled)\n        const c...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "missingMemoization",
        "code": "const customerOptions = useMemo(() => {\n    return customers.map(customer => ({\n      value: custome...",
        "severity": "MEDIUM",
        "line": 462,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (debouncedUpdateRef.current) {\n        clearTimeout(debouncedUpdateRef.curre...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { errors, warnings, suggestions }",
        "severity": "MEDIUM",
        "line": 575,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { ...item, relevanceScore: Math.min(100, score) }",
        "severity": "MEDIUM",
        "line": 644,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (debouncedUpdateRef.current) {\n        clearTimeout(debouncedUpdateRef.curre...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearTimeout(timeoutId);\n  ",
        "severity": "LOW",
        "line": 609,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "missingMemoization",
        "code": "const contentAreas = selectedContentArray.map(content => content.item.tags)",
        "severity": "MEDIUM",
        "line": 489,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "missingMemoization",
        "code": "const productCategories = productData.products.map((product: any)",
        "severity": "MEDIUM",
        "line": 515,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "missingMemoization",
        "code": "const coveredSections = [...new Set(selectedContentArray.map(content => content.section)",
        "severity": "MEDIUM",
        "line": 532,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "missingMemoization",
        "code": "const context = {\n        projectType: proposalMetadata?.projectType,\n        rfpRequirements: rfpDa...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/ContentSelectionStep.tsx",
        "pattern": "heavyComputationInRender",
        "code": "return {\n      selectedContent: Array.from(selectedContentMap.values()),\n      searchHistory: data.s...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { errors, warnings, suggestions }",
        "severity": "MEDIUM",
        "line": 512,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearTimeout(timeoutId);\n  ",
        "severity": "LOW",
        "line": 564,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "missingMemoization",
        "code": "const uniqueCategories = [...new Set(selectedProductsArray.map(p => p.category)",
        "severity": "MEDIUM",
        "line": 462,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "missingMemoization",
        "code": "const contentCategories = contentData.selectedContent\n        .map((content: any)",
        "severity": "MEDIUM",
        "line": 477,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "missingMemoization",
        "code": "const productCategories = selectedProductsArray.map(p => p.category)",
        "severity": "MEDIUM",
        "line": 480,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/ProductSelectionStep.tsx",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(selectedProducts.values()).reduce(\n      (sum, product) => sum + product.totalPric...",
        "severity": "LOW",
        "line": 778,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ReviewStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalApprovals,\n      completedApprovals,\n      errorCount,\n      warningCount,\n     ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/ReviewStep.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return; // Don't update parent if insights are not loaded yet\n\n    const timeoutId = setTimeout(() =...",
        "severity": "LOW",
        "line": 300,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ReviewStep.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearTimeout(timeoutId);\n  ",
        "severity": "LOW",
        "line": 308,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ReviewStep.tsx",
        "pattern": "missingMemoization",
        "code": "const toggleApproval = useCallback(\n    (reviewerName: string) => {\n      setApprovals(prev =>\n     ...",
        "severity": "MEDIUM",
        "line": 347,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/SectionAssignmentStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      sections: currentValues.sections,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/SectionAssignmentStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n              ...originalSection,\n              ...formSection,\n            }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/SectionAssignmentStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalSections,\n      assignedSections,\n      requiredSections,\n      assignedRequired...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/SectionAssignmentStep.tsx",
        "pattern": "missingMemoization",
        "code": "const updatedSections = formData.sections.map(formSection => {\n            const originalSection = s...",
        "severity": "MEDIUM",
        "line": 264,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/SectionAssignmentStep.tsx",
        "pattern": "missingMemoization",
        "code": "const mappedSections = data.sections.map(section => ({\n        ...section,\n        dependencies: sec...",
        "severity": "MEDIUM",
        "line": 313,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/SectionAssignmentStep.tsx",
        "pattern": "missingMemoization",
        "code": "const calculateCriticalPath = useCallback((sectionList: ProposalSection[]): string[] => {\n    // Sim...",
        "severity": "MEDIUM",
        "line": 322,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/SectionAssignmentStep.tsx",
        "pattern": "missingMemoization",
        "code": "const updateSectionAssignment = useCallback(\n    (sectionId: string, key: string, value: any) => {\n ...",
        "severity": "MEDIUM",
        "line": 405,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/TeamAssignmentStep.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      // Clear debounced timeout on unmount\n      if (debouncedUpdateRef.current) {\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/proposals/steps/TeamAssignmentStep.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      // Clear debounced timeout on unmount\n      if (debouncedUpdateRef.current) {\n ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/TeamAssignmentStep.tsx",
        "pattern": "missingMemoization",
        "code": "const teamLeadOptions = useMemo(() => {\n    return teamLeads.map(lead => ({\n      value: lead.id,\n  ...",
        "severity": "MEDIUM",
        "line": 291,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/proposals/steps/TeamAssignmentStep.tsx",
        "pattern": "missingMemoization",
        "code": "const salesRepOptions = useMemo(() => {\n    return salesReps.map(rep => ({\n      value: rep.id,\n    ...",
        "severity": "MEDIUM",
        "line": 298,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const SESSION_WARNING_TIME = 5 * 60 * 1000; // 5 minutes before expiry\n    const SESSIO...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      clearInterval(refreshInterval);\n      clearTimeout(warningTimeout);\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    const SESSION_WARNING_TIME = 5 * 60 * 1000; // 5 minutes before expiry\n    const SESSIO...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      clearInterval(refreshInterval);\n      clearTimeout(warningTimeout);\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    let lastActivityUpdate = 0;\n    const ACTIVITY_THROTTLE = 30000; // Throttle activity u...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      events.forEach(event => {\n        document.removeEventListener(event, handleAct...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/ErrorBoundary.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      hasError: true,\n      error,\n      errorId,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/providers/ErrorBoundary.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return (error: Error) => {\n    setError(error);\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/Avatar.tsx",
        "pattern": "missingMemoization",
        "code": "const getInitials = (name: string): string => {\n  return name\n    .split(' ')\n    .map(part => part....",
        "severity": "MEDIUM",
        "line": 72,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/ui/MobileNavigationMenus.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => document.removeEventListener('keydown', handleEscape);\n    ",
        "severity": "LOW",
        "line": 242,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/MobileNavigationMenus.tsx",
        "pattern": "missingMemoization",
        "code": "const filteredNavItems = useMemo(() => {\n    return MOBILE_NAV_ITEMS.filter(item => !item.role || it...",
        "severity": "MEDIUM",
        "line": 86,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      x: (p1.x + p2.x) / 2,\n      y: (p1.y + p2.y) / 2,\n      timestamp: Date.now(),\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          direction,\n          distance,\n          velocity,\n          duration,\n          ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          type,\n          scale,\n          distance: currentDistance,\n          center,\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n      try {\n        const touches = getTouchPoints(e.touches);\n        touchState.current.c...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (touchState.current.longPressTimer) {\n        clearTimeout(touchState.curren...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (touchState.current.longPressTimer) {\n        clearTimeout(touchState.curren...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/MobileTouchGestures.tsx",
        "pattern": "heavyComputationInRender",
        "code": "return [];\n\n    return Array.from(touches).map(touch => ({\n      x: touch.clientX - rect.left,\n     ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {}",
        "severity": "MEDIUM",
        "line": 183,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        prefersDarkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,\n       ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {}",
        "severity": "MEDIUM",
        "line": 183,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { connectionType: 'unknown' }",
        "severity": "MEDIUM",
        "line": 203,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        connectionType: connection?.effectiveType || 'unknown',\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { connectionType: 'unknown' }",
        "severity": "MEDIUM",
        "line": 203,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n      const width = window.innerWidth;\n      const height = window.innerHeight;\n      const...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(updateResponsiveState, de...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n        window.removeEventListener('resize', debouncedResize);\n        window.removeE...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      window.removeEventListener('resize', debouncedResize);\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { width: state.screenWidth, height: state.screenHeight }",
        "severity": "MEDIUM",
        "line": 481,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    prefersDarkMode: state.prefersDarkMode,\n    prefersReducedMotion: state.prefersReducedM...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(updateResponsiveState, de...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n        window.removeEventListener('resize', debouncedResize);\n        window.removeE...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      window.removeEventListener('resize', debouncedResize);\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/ResponsiveBreakpointManager.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      listeners.forEach(({ mediaQueryList, listener ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tabs.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return (\n    <TabsContext.Provider value={{ value, onValueChange }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/Textarea.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n          textarea.removeEventListener('input', handleInput);\n        }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/Textarea.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n          textarea.removeEventListener('input', handleInput);\n        ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n        const triggerRect = triggerRef.current.getBoundingClientRect();\n        const toolt...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n          clearTimeout(timeoutId);\n          window.removeEventListener('scroll', thr...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n      clearTimeouts();\n      showTimeoutRef.current = setTimeout(() => {\n        setIsOpen(t...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n          clearTimeout(timeoutId);\n          window.removeEventListener('scroll', thr...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tooltip.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => document.removeEventListener('keydown', handleEscape);\n      ",
        "severity": "LOW",
        "line": 251,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/feedback/Modal.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n        document.body.style.overflow = 'unset';\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/feedback/Modal.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    isOpen,\n    openModal,\n    closeModal,\n    toggleModal,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/ui/feedback/Modal.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => document.removeEventListener('keydown', handleKeyDown);\n    ",
        "severity": "LOW",
        "line": 209,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/feedback/Modal.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n        document.body.style.overflow = 'unset';\n      ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/feedback/Toast.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearTimeout(timer);\n    ",
        "severity": "LOW",
        "line": 142,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/validation/ValidationDashboard.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const request: ValidationRequest = {\n      proposalId: selectedProposal,\n      products...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/validation/ValidationIssueList.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { text: 'Unknown', badge: 'bg-gray-100 text-gray-800' }",
        "severity": "MEDIUM",
        "line": 113,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/validation/ValidationIssueList.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return configs[status] || { text: 'Unknown', badge: 'bg-gray-100 text-gray-800' }",
        "severity": "MEDIUM",
        "line": 116,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/validation/ValidationIssueList.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { severities, statuses, categories, proposals }",
        "severity": "MEDIUM",
        "line": 285,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/validation/ValidationIssueList.tsx",
        "pattern": "missingMemoization",
        "code": "const getFilterOptions = useCallback(() => {\n    const severities = [...new Set(issues.map(issue => ...",
        "severity": "MEDIUM",
        "line": 268,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/validation/ValidationIssueList.tsx",
        "pattern": "missingMemoization",
        "code": "const statuses = [\n      ...new Set(\n        issues\n          .map(issue => issue.status)",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/validation/ValidationIssueList.tsx",
        "pattern": "missingMemoization",
        "code": "const categories = [...new Set(issues.map(issue => issue.category)",
        "severity": "MEDIUM",
        "line": 280,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/validation/ValidationIssueList.tsx",
        "pattern": "missingMemoization",
        "code": "const proposals = [\n      ...new Set(issues.map(issue => issue.proposalId)",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/components/validation/ValidationIssueList.tsx",
        "pattern": "heavyComputationInRender",
        "code": "return;\n\n      try {\n        if (onBatchOperation) {\n          await onBatchOperation(Array.from(sel...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/validation/ValidationProgressMonitor.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const interval = setInterval(() => {\n      // Optimize: Only update if component is vis...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/validation/ValidationProgressMonitor.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n                ...prev,\n                progress: Math.min(prev.progress + 5, 95),\n       ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/components/validation/ValidationProgressMonitor.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    const interval = setInterval(() => {\n      // Optimize: Only update if component is vis...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/validation/ValidationProgressMonitor.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n  ",
        "severity": "LOW",
        "line": 143,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    users,\n    loading,\n    error,\n    pagination,\n    refetch: fetchUsers,\n    createUser,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    roles,\n    loading,\n    error,\n    pagination,\n    refetch: fetchRoles,\n    createRole,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    permissions,\n    loading,\n    error,\n    pagination,\n    filters,\n    refetch: fetchPer...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    metrics,\n    loading,\n    error,\n    refetch: fetchMetrics,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/admin/useAdminData.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n  ",
        "severity": "LOW",
        "line": 1085,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/analytics/useContentSearchAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n      const timeToFirstResult = Date.now() - currentSearch.searchStartTime;\n\n      const up...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/analytics/useContentSearchAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n      const timeToSelection = selectedResultId\n        ? Date.now() - currentSearch.searchS...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/analytics/useContentSearchAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...performanceData.current }",
        "severity": "MEDIUM",
        "line": 296,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/analytics/useContentSearchAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      isHypothesisValidated,\n      currentImprovement,\n      targetImprovement,\n      confi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/analytics/useContentSearchAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // Search Analytics (US-1.1)\n    trackSemanticSearch,\n    trackSearchResults,\n    track...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/analytics/useDashboardAnalytics.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return useMemo(\n    () => ({\n      trackEvent,\n      trackPageView,\n      trackInteraction,\n      tr...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/analytics/useProductAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    trackProductCreation,\n    trackAIDescriptionUsage,\n    trackValidationPerformance,\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/auth/__tests__/useAuth.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    ...state,\n    login,\n    logout,\n    register,\n    resetPassword,\n    clearError,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/auth/useEnhancedSessionManagement.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n        if (activityTimer.current) {\n          clearInterval(activityTimer.current);\n...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/auth/useEnhancedSessionManagement.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (warningTimer.current) {\n        clearTimeout(warningTimer.current);\n       ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/auth/useEnhancedSessionManagement.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      sessionId: session?.user?.id,\n      duration: sessionDuration,\n      metrics: session...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/auth/useEnhancedSessionManagement.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // Session state\n    session,\n    status,\n    sessionState,\n\n    // Session management\n...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/auth/useEnhancedSessionManagement.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n        if (activityTimer.current) {\n          clearInterval(activityTimer.current);\n...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/auth/useEnhancedSessionManagement.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (warningTimer.current) {\n        clearTimeout(warningTimer.current);\n       ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/auth/useLoginAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    trackLoginPerformance,\n    trackAuthenticationAttempt,\n    trackSecurityEvent,\n    trac...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/auth/useUserProfileAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    trackProfileUsage,\n    trackProfileUpdate,\n    trackExpertiseUpdate,\n    trackSecurityC...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/auth/useUserRegistrationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    trackRegistrationFlow,\n    trackRegistrationStep,\n    trackRoleAssignment,\n    trackAIS...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardAnalytics.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return useMemo(\n    () => ({\n      trackEvent,\n      trackPageView,\n      trackInteraction,\n      tr...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n      loadStartTimeRef.current = Date.now();\n      updateLoadingState('overall', true);\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n      const sectionKey = section as keyof DashboardDataState['loading'];\n      const loadSt...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n        // Update specific section in state\n        setState(prev => {\n          if (!prev....",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n            ...prev,\n            data: updatedData,\n            lastUpdated: new Date(),\n  ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    refreshTimeoutRef.current = setInterval(() => {\n      if (mountedRef.current && !state....",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (refreshTimeoutRef.current) {\n        clearInterval(refreshTimeoutRef.curren...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      mountedRef.current = false;\n      if (refreshTimeoutRef.current) {\n        clea...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // Data\n    dashboardData: state.data,\n    proposals,\n    activities,\n    team,\n    dea...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    refreshTimeoutRef.current = setInterval(() => {\n      if (mountedRef.current && !state....",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (refreshTimeoutRef.current) {\n        clearInterval(refreshTimeoutRef.curren...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      mountedRef.current = false;\n      if (refreshTimeoutRef.current) {\n        clea...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardData.ts",
        "pattern": "missingMemoization",
        "code": "const updatedNotifications = prev.data.notifications.map(notification =>\n              notification....",
        "severity": "MEDIUM",
        "line": 416,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/hooks/dashboard/useDashboardLayout.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      mountedRef.current = false;\n      if (autoSaveTimeoutRef.current) {\n        cle...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardLayout.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // Layout state\n    layout: state.layout,\n    layouts: state.layouts,\n    activeBreakpo...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/dashboard/useDashboardLayout.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      mountedRef.current = false;\n      if (autoSaveTimeoutRef.current) {\n        cle...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardLayout.ts",
        "pattern": "heavyComputationInRender",
        "code": "return false;\n\n      const layoutData = JSON.parse(stored);\n\n      setState(prev => ({\n        ...pr...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardLayout.ts",
        "pattern": "heavyComputationInRender",
        "code": "return JSON.stringify(exportData, null, 2);\n  ",
        "severity": "LOW",
        "line": 560,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/deadlines/useDeadlineManagementAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      sessionId: sessionData.current.sessionId,\n      sessionDuration,\n      interactions: ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/deadlines/useDeadlineManagementAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    trackDeadlinePerformance,\n    trackTimelineEstimation,\n    trackCriticalPathAnalysis,\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/entities/useAuth.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // State\n    ...state,\n\n    // Actions\n    login,\n    register,\n    logout,\n    refresh...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/entities/useUser.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // State\n    ...state,\n\n    // Actions\n    createUser,\n    getUserById,\n    getUserByEm...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/proposals/useProposalCreationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalTime,\n      completedSteps,\n      averageStepTime,\n      totalErrors,\n      aiAc...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/proposals/useProposalCreationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    trackProposalCreation,\n    trackWizardStep,\n    trackTeamAssignment,\n    trackTimelineE...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      stopMonitoring();\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { type: 'bundle', optimizations: ['code-splitting', 'tree-shaking', 'compression'] }",
        "severity": "MEDIUM",
        "line": 521,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      type: 'memory',\n      optimizations: ['garbage-collection', 'memory-leak-detection', ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      type: 'mobile',\n      optimizations: ['touch-optimization', 'responsive-images', 'ada...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      type: 'comprehensive',\n      results: results.filter(Boolean),\n      optimizations: [...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // State\n    ...state,\n\n    // Actions\n    triggerOptimization,\n    generateReport,\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      stopMonitoring();\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "missingMemoization",
        "code": "const recentScores = history.slice(0, 3).map(h => h.afterScore)",
        "severity": "MEDIUM",
        "line": 564,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/hooks/useAdvancedPerformanceOptimization.ts",
        "pattern": "missingMemoization",
        "code": "const intervals = history\n      .slice(0, 3)\n      .map((event, index)",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    try {\n      const batchToFlush = { ...this.batch }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return; // Only cleanup when map gets large\n\n    const now = Date.now();\n    const cutoff = now - th...",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      batchSize: this.batch.events.length,\n      throttleMapSize: this.throttleMap.size,\n  ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (managerRef.current) {\n        managerRef.current.cleanup();\n        manager...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    track: trackEvent,\n    identify,\n    page,\n    trackWizardStep,\n    reset,\n    flush,\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (managerRef.current) {\n        managerRef.current.cleanup();\n        manager...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useApiClient.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    config,\n    makeRequest,\n    get,\n    post,\n    put,\n    delete: del,\n    validateConne...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useApiClient.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    ...healthStatus,\n    checkHealth,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useApiClient.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n    ",
        "severity": "LOW",
        "line": 278,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useApiClient.ts",
        "pattern": "heavyComputationInRender",
        "code": "return makeRequest<T>(endpoint, {\n        method: 'POST',\n        body: data ? JSON.stringify(data) ...",
        "severity": "LOW",
        "line": 172,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useApiClient.ts",
        "pattern": "heavyComputationInRender",
        "code": "return makeRequest<T>(endpoint, {\n        method: 'PUT',\n        body: data ? JSON.stringify(data) :...",
        "severity": "LOW",
        "line": 172,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useErrorHandler.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    handleAsyncError,\n    clearError,\n    getUserFriendlyMessage,\n    throwError,\n    error...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useFormValidation.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    ...form,\n    isSubmitting,\n    submitWithValidation,\n    trackFieldFocus,\n    trackFiel...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileDetection.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          useBottomNav: false,\n          useSwipeGestures: false,\n          useHamburgerMen...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileDetection.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventLis...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileDetection.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // State\n    deviceInfo,\n    navigationOptimization,\n    isLoading,\n\n    // Device Info...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileDetection.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventLis...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const checkMemoryPressure = () => {\n      if ('memory' in performance) {\n        const ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      // Clear all debounce timeouts\n      debounceTimeouts.current.forEach(timeout =...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    isMobileOptimized,\n    debouncedCallback,\n    throttledCallback,\n    optimizedAnalytics...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    const checkMemoryPressure = () => {\n      if ('memory' in performance) {\n        const ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(interval);\n  ",
        "severity": "LOW",
        "line": 155,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      // Clear all debounce timeouts\n      debounceTimeouts.current.forEach(timeout =...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimizedForm.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (debouncedUpdateRef.current) {\n        clearTimeout(debouncedUpdateRef.curre...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileOptimizedForm.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    ...form,\n    handleFieldChange,\n    collectFormData,\n    isMobileOptimized: isMobile,\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useMobileOptimizedForm.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n        // Increment field interactions\n        fieldInteractionsRef.current += 1;\n\n ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useMobileOptimizedForm.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (debouncedUpdateRef.current) {\n        clearTimeout(debouncedUpdateRef.curre...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventLis...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      window.removeEventListener('analytics-optimization-requested', handleOptimizati...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // Optimized tracking methods\n    trackOptimized,\n    trackPerformanceOptimized,\n    tr...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (flushInterval.current) {\n        clearInterval(flushInterval.current);\n    ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventLis...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedAnalytics.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      window.removeEventListener('analytics-optimization-requested', handleOptimizati...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useOptimizedDataFetch.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    data,\n    loading,\n    error,\n    pagination,\n    meta,\n    refetch,\n    fetchMore,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useOptimizedSearch.ts",
        "pattern": "inlineObjectInRender",
        "code": "return (text: string): boolean => {\n    if (!text) return false;\n    const searchText = caseSensitiv...",
        "severity": "MEDIUM",
        "line": 31,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useOptimizedSearch.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      if (debounceTimer.current) {\n        clearTimeout(debounceTimer.current);\n     ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useOptimizedSearch.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        items: data.slice(0, maxResults),\n        totalCount: data.length,\n        searchTi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useOptimizedSearch.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        ...cached,\n        searchTime: performance.now() - startTime,\n        isLoading: fa...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useOptimizedSearch.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      if (debounceTimer.current) {\n        clearTimeout(debounceTimer.current);\n     ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/usePerformanceIntegration.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { improvement: 0, degradation: 0, stability: 100 }",
        "severity": "MEDIUM",
        "line": 463,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceIntegration.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      improvement: Math.max(0, change),\n      degradation: Math.max(0, -change),\n      stab...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceIntegration.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // Metrics\n    metrics: integratedMetrics,\n    alerts,\n    performanceHistory,\n\n    // ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceIntegration.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    // Initial collection\n    collectIntegratedMetrics();\n\n    // Setup interval\n    const ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/usePerformanceIntegration.ts",
        "pattern": "missingMemoization",
        "code": "const acknowledgeAlert = useCallback(\n    (alertId: string) => {\n      setAlerts(prev =>\n        pre...",
        "severity": "MEDIUM",
        "line": 586,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/hooks/usePerformanceMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...metricsRef.current }",
        "severity": "MEDIUM",
        "line": 233,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    trackRender,\n    trackEffect,\n    trackMessageHandler,\n    getMetrics,\n    getRecentVio...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceMonitor.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearInterval(cleanup);\n  ",
        "severity": "LOW",
        "line": 228,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        totalSize,\n        chunkSizes,\n        loadTimes,\n        compressionRatio: totalSi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        hitRate,\n        missRate,\n        evictionRate,\n        totalRequests,\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        hitRate: 0,\n        missRate: 1,\n        evictionRate: 0,\n        totalRequests: 0,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    metrics,\n    isOptimizing,\n    triggerOptimization,\n    optimizationScore: metrics.opti...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/usePerformanceOptimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      isMounted = false;\n\n      // Comprehensive cleanup\n      if (performanceObserve...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useProducts.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // Data\n    products: productsQuery.data?.products || [],\n    pagination: productsQuery...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useProducts.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    validateProductConfiguration,\n    checkProductCompatibility,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useProducts.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return useQuery({\n    queryKey: productKeys.list(filters, sort, page, limit),\n    queryFn: async () ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useProducts.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return useQuery({\n    queryKey: productKeys.detail(id),\n    queryFn: () => fetchProduct(id),\n    ena...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useProducts.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return useQuery({\n    queryKey: [...productKeys.stats(), filters],\n    queryFn: () => fetchProductSt...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useProducts.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return useQuery({\n    queryKey: productKeys.search(query),\n    queryFn: async () => {\n      const st...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useProducts.ts",
        "pattern": "heavyComputationInRender",
        "code": "return useQuery({\n    queryKey: productKeys.list(filters, sort, page, limit),\n    queryFn: async () ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useProducts.ts",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(categorySet).sort();\n  ",
        "severity": "LOW",
        "line": 428,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useRealTimeAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    isLoading,\n    optimizationScore,\n    trackRealTimeEvent,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useResponsive.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      isMobile: width < BREAKPOINTS.mobile,\n      isTablet: width >= BREAKPOINTS.mobile && ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useResponsive.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      window.removeEventListener('resize', throttledUpdateState);\n      window.remove...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/useResponsive.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      window.removeEventListener('resize', throttledUpdateState);\n      window.remove...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/validation/useValidation.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // State\n    ...state,\n\n    // Actions\n    validateConfiguration,\n    applyFixSuggestio...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/validation/useValidation.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n        clearInterval(intervalId);\n        analytics.track('realtime_validation_stopp...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/validation/useValidationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const initializeBaseline = async () => {\n      try {\n        // In a real implementatio...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/validation/useValidationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        detectionRate,\n        missedErrors,\n        falsePositives,\n        accuracy: dete...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/validation/useValidationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        automatedTimeMinutes: automatedTime / 60000,\n        manualTimeMinutes: manualTime,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/validation/useValidationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        success,\n        fixTimeMinutes: fixTime / 60000,\n        efficiency: success ? (ba...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/validation/useValidationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      targetReduction: 50,\n      currentReduction: currentMetrics.errorReductionPercentage,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/validation/useValidationAnalytics.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    // Metrics state\n    currentMetrics,\n    baseline,\n\n    // Tracking functions\n    track...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/hooks/validation/useValidationAnalytics.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    const initializeBaseline = async () => {\n      try {\n        // In a real implementatio...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/__tests__/utils.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "returns fallback for invalid JSON', () => {\n      const fallback = { default: true }",
        "severity": "MEDIUM",
        "line": 229,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/__tests__/utils.test.ts",
        "pattern": "inlineFunctionInRender",
        "code": "returns fallback for invalid JSON', () => {\n      const fallback = { default: true ",
        "severity": "LOW",
        "line": 229,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/api/client.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          ...cached,\n          message: 'Success (cached)',\n        }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/api/endpoints/proposals.formatter.ts",
        "pattern": "inlineObjectInRender",
        "code": "returned by Prisma when including relations\nexport type PrismaProposalWithRelations = Proposal & {\n ...",
        "severity": "MEDIUM",
        "line": 10,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/api/endpoints/users.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        data: users,\n        success: true,\n        message: response.message || 'Role user...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/api/endpoints/users.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      data: [],\n      success: false,\n      message: 'Failed to retrieve users by role',\n  ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/api/interceptors/authInterceptor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      accessToken: data.accessToken,\n      refreshToken: data.refreshToken,\n      expiresAt...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/api/interceptors/errorInterceptor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      data: data,\n      success: true,\n      message: 'Success',\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { config, url }",
        "severity": "MEDIUM",
        "line": 244,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.config }",
        "severity": "MEDIUM",
        "line": 769,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    try {\n      const saved = localStorage.getItem('posalpro_optimized_session_state');\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      ...this.sessionState,\n      config: this.config,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    // Listen for performance optimization requests\n    const optimizationListener = () => ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "heavyComputationInRender",
        "code": "return;\n\n    try {\n      const saved = localStorage.getItem('posalpro_optimized_session_state');\n   ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "heavyComputationInRender",
        "code": "return;\n\n    try {\n      localStorage.setItem('posalpro_optimized_session_state', JSON.stringify(thi...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/auth/__tests__/rbac.integration.test.ts",
        "pattern": "missingMemoization",
        "code": "const results = permissionsToCheck.map(({ action, resource, context })",
        "severity": "MEDIUM",
        "line": 562,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/auth/sessionValidator.ts",
        "pattern": "heavyComputationInRender",
        "code": "return new Response(\n      JSON.stringify({\n        error: 'Unauthorized',\n        message: validati...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/auth.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n            id: user.id,\n            email: user.email,\n            name: user.name,\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/auth.ts",
        "pattern": "missingMemoization",
        "code": "const roles = user.roles.map(userRole => userRole.role.name)",
        "severity": "MEDIUM",
        "line": 109,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/auth.ts",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(permissions);\n",
        "severity": "LOW",
        "line": 245,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/dashboard/api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/dashboard/api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n            section: sections[index],\n            error: (result).reason,\n          }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/dashboard/api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        active: activeProposals,\n        recent: recentActivity,\n        metrics,\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/dashboard/api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      active: [],\n      recent: [],\n      metrics: this.getEmptyProposalMetrics(),\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/dashboard/api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      total: 0,\n      active: 0,\n      completed: 0,\n      onTime: 0,\n      overdue: 0,\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/dashboard/api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      userId: '',\n      period: 'weekly',\n      proposalsCompleted: 0,\n      avgCompletionT...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/dashboard/api.ts",
        "pattern": "missingMemoization",
        "code": "const failures = [\n        proposalData,\n        activityData,\n        teamData,\n        deadlineDat...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/dashboard/api.ts",
        "pattern": "heavyComputationInRender",
        "code": "return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/dashboard/realtime.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.state }",
        "severity": "MEDIUM",
        "line": 322,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/dashboard/realtime.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 329,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/dashboard/realtime.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    this.heartbeatIntervalId = setInterval(() => {\n      if (this.socket?.readyState === We...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/dashboard/widgetRegistry.ts",
        "pattern": "inlineObjectInRender",
        "code": "return function PlaceholderComponent() {\n    return null; // Will be replaced with actual widgets in...",
        "severity": "MEDIUM",
        "line": 26,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/db/client.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      status: 'healthy',\n      latency,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/db/client.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      status: 'unhealthy',\n      error: error instanceof Error ? error.message : 'Unknown d...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/db/client.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      users: userCount,\n      proposals: proposalCount,\n      products: productCount,\n     ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/db/client.ts",
        "pattern": "missingMemoization",
        "code": "const batchResults = await Promise.all(batch.map(operation => operation(prismaClient)",
        "severity": "MEDIUM",
        "line": 138,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/entities/proposal.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          data: cached,\n          success: true,\n          message: 'Proposal retrieved fro...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/entities/proposal.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        data: null,\n        success: false,\n        message: 'Proposal not found',\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/entities/proposal.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          success: true,\n          message: response.message,\n          data: response.data...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/entities/user.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          data: cached,\n          success: true,\n          message: 'User retrieved from ca...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/entities/user.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        data: null,\n        success: false,\n        message: 'User not found',\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/entities/user.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        data: null,\n        success: false,\n        message: 'User not found',\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/errors/ErrorHandlingService.ts",
        "pattern": "missingMemoization",
        "code": "const formattedErrors = error.errors.map(err => ({\n      path: err.path.join('.')",
        "severity": "MEDIUM",
        "line": 193,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/errors/StandardError.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      timestamp:...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/logger.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    enableConsole: !isTest, // Disable console in tests\n    enableRemote: isProduction,\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/logger.ts",
        "pattern": "inlineObjectInRender",
        "code": "return undefined;\n\n    try {\n      const serialized = JSON.stringify(data);\n      if (serialized.len...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/logger.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        _serializationError: true,\n        _error: error instanceof Error ? error.message :...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/logger.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.config }",
        "severity": "MEDIUM",
        "line": 254,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/logger.ts",
        "pattern": "heavyComputationInRender",
        "code": "return undefined;\n\n    try {\n      const serialized = JSON.stringify(data);\n      if (serialized.len...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/logging/LoggingService.ts",
        "pattern": "heavyComputationInRender",
        "code": "return JSON.stringify(this.logs, null, 2);\n  ",
        "severity": "LOW",
        "line": 193,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 734,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      cacheSize: this.cache.size,\n      memoryUsage: this.getCurrentCacheSize(),\n      acce...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    cache: cacheManager,\n    metrics,\n    statistics: cacheManager.getStatistics(),\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    // Cleanup expired items every minute\n    setInterval(() => {\n      this.cleanupExpired...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/AdvancedCacheManager.ts",
        "pattern": "missingMemoization",
        "code": "const scored = Array.from(this.cache.entries())\n          .map(([key, item])",
        "severity": "MEDIUM",
        "line": 515,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/performance/ApiResponseCache.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 690,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseCache.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    executeRequest: apiCache.executeRequest.bind(apiCache),\n    getMetrics: apiCache.getMet...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseCache.ts",
        "pattern": "heavyComputationInRender",
        "code": "return btoa(JSON.stringify(keyData));\n  ",
        "severity": "LOW",
        "line": 576,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/ApiResponseCache.ts",
        "pattern": "heavyComputationInRender",
        "code": "return JSON.parse(data);\n  ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n            optimizedData: cachedResult.data,\n            originalSize: cachedResult.origin...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        optimizedData,\n        originalSize,\n        optimizedSize,\n        compressionRati...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        optimizedData: data,\n        originalSize: this.calculateDataSize(data),\n        op...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          compressedData: optimized,\n          compressedSize: this.calculateDataSize(optim...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          compressedData: compressed,\n          compressedSize: this.calculateDataSize(comp...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        compressedData: data,\n        compressedSize: this.calculateDataSize(data),\n       ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        compressedData: data,\n        compressedSize: this.calculateDataSize(data),\n       ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 493,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      size: this.cache.size,\n      entries: this.cache.size,\n      hitRate: this.metrics.ca...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      metrics: this.getMetrics(),\n      cacheStats: this.getCacheStats(),\n      recommendat...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ApiResponseOptimizer.ts",
        "pattern": "heavyComputationInRender",
        "code": "return JSON.stringify(data || '').length;\n    ",
        "severity": "LOW",
        "line": 410,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/BundleOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { default: this.createFallbackComponent(config, processedError) }",
        "severity": "MEDIUM",
        "line": 238,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/BundleOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    metrics,\n    recommendations,\n    observeForViewport: optimizer.observeForViewport.bind...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/CleanupMechanisms.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 337,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/CleanupMechanisms.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      usedJSHeapSize: 0,\n      totalJSHeapSize: 0,\n      jsHeapSizeLimit: 1024 * 1024 * 102...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/ComponentLazyLoading.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalComponentsLoaded: this.loadMetrics.length,\n      averageLoadTime:\n        succes...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/DatabaseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { data, metrics }",
        "severity": "MEDIUM",
        "line": 132,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/DatabaseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      skip: (optimizedPage - 1) * optimizedLimit,\n      take: optimizedLimit,\n      cursor:...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/DatabaseOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      cacheSize: this.queryCache.size,\n      cacheEnabled: this.config.cacheEnabled,\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/DatabaseOptimizer.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return Promise.race([\n      fn(),\n      new Promise<never>((_, reject) =>\n        setTimeout(() => r...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.queryMetrics }",
        "severity": "MEDIUM",
        "line": 508,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.connectionPoolStats }",
        "severity": "MEDIUM",
        "line": 515,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      queryMetrics: this.queryMetrics,\n      connectionPoolStats: this.connectionPoolStats,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    executeQuery: optimizer.executeQuery.bind(optimizer),\n    invalidateCache: optimizer.in...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/DatabaseQueryOptimizer.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return new Promise<T>((resolve, reject) => {\n      const timeoutHandle = setTimeout(() => {\n        ...",
        "severity": "LOW",
        "line": 355,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/EnhancedPerformanceService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    try {\n      const memory = (performance as any).memory;\n\n      this.metrics.memoryMetri...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/EnhancedPerformanceService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 597,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizationService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 473,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizationService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.config }",
        "severity": "MEDIUM",
        "line": 477,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      lcp: avg(this.metricsBuffer.map(m => m.lcp)),\n      fid: avg(this.metricsBuffer.map(m...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      lcp: 0,\n      fid: 0,\n      cls: 0,\n      fcp: 0,\n      ttfb: 0,\n      memoryUsage: 0...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/advanced-cache-system.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 550,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/advanced-cache-system.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      cacheSize: this.cache.size,\n      memoryUsage: this.getCurrentCacheSize(),\n      acce...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/advanced-cache-system.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    cache: cacheSystem,\n    metrics,\n    statistics: cacheSystem.getStatistics(),\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/componentTester.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      total,\n      passed,\n      failed,\n      averageScore,\n      totalErrors,\n      total...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/formOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    validateWithPerformance,\n    clearCache: () => validationCacheRef.current.clear(),\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/formOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.metrics }",
        "severity": "MEDIUM",
        "line": 218,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/formOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    mode: config.validationMode,\n    reValidateMode: config.reValidateMode,\n    shouldFocus...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/formOptimizer.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return {\n    validateWithPerformance,\n    clearCache: () => validationCacheRef.current.clear(),\n  ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/navigationOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      navigationTime: avgNavigationTime,\n      routeChangeTime: 0, // Will be populated by ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/navigationOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    optimizeNavigation,\n    preloadRoute,\n    getMetrics,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/navigationOptimizer.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    getLoadTime: () => tracker.current.getAverageLoadTime(componentName),\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/navigationOptimizer.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      const loadTime = tracker.current.endLoad(componentName);\n\n      // ✅ ANALYTICS:...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/navigationOptimizer.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return {\n    getLoadTime: () => tracker.current.getAverageLoadTime(componentName),\n  ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const observer = new PerformanceObserver(list => {\n      for (const entry of list.getEn...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const observer = new PerformanceObserver(list => {\n      for (const entry of list.getEn...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      size: this.cache.size,\n      hitRate: 0.85, // Mock data\n      missRate: 0.15, // Moc...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { data, loading, error, refetch: fetchData }",
        "severity": "MEDIUM",
        "line": 227,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {}",
        "severity": "MEDIUM",
        "line": 255,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {}",
        "severity": "MEDIUM",
        "line": 255,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {}",
        "severity": "MEDIUM",
        "line": 255,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      usedJSHeapSize: memory.usedJSHeapSize,\n      totalJSHeapSize: memory.totalJSHeapSize,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      clearInterval(interval);\n      monitor.cleanup();\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { metrics }",
        "severity": "MEDIUM",
        "line": 330,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return () => {\n      clearTimeout(handler);\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      startIndex,\n      endIndex,\n      items: items.slice(startIndex, endIndex),\n      tot...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    visibleItems,\n    handleScroll,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      timestamp: new Date().toISOString(),\n      webVitals: monitor.getMetrics(),\n      bun...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {}",
        "severity": "MEDIUM",
        "line": 255,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      domContentLoaded: navigation.domContentLoadedEventEnd - navigation.fetchStart,\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      clearInterval(interval);\n      monitor.cleanup();\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => {\n      clearTimeout(handler);\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => clearTimeout(timer);\n    ",
        "severity": "LOW",
        "line": 369,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/optimization.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return () => observer.disconnect();\n  ",
        "severity": "LOW",
        "line": 392,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/performanceTester.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return new Promise(resolve => {\n      let interactions = 0;\n      const maxInteractions = testName.i...",
        "severity": "LOW",
        "line": 250,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalTests,\n      passed,\n      failed,\n      passRate,\n      averageScore,\n      tot...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { name: r.testName, time: r.duration }",
        "severity": "MEDIUM",
        "line": 137,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { name: r.testName, time: r.renderTime }",
        "severity": "MEDIUM",
        "line": 137,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { name: r.testName, time: 0 }",
        "severity": "MEDIUM",
        "line": 137,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      averageRenderTime,\n      totalMemoryUsage,\n      slowestTest,\n      fastestTest,\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      wcagCompliance,\n      keyboardNavigation,\n      screenReaderCompatibility,\n      touc...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { critical, high, medium, low }",
        "severity": "MEDIUM",
        "line": 293,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "missingMemoization",
        "code": "const renderTimes = allResults\n      .map(r => {\n        if ('duration' in r)",
        "severity": "MEDIUM",
        "line": 135,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "heavyComputationInRender",
        "code": "return JSON.stringify(report, null, 2);\n  ",
        "severity": "LOW",
        "line": 425,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/sidebarTester.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      total,\n      passed,\n      failed,\n      averageScore,\n      totalErrors,\n      total...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    enableTracking: true, // Always enabled\n    slowOperationThreshold: isProduction ? 1000...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance.ts",
        "pattern": "inlineObjectInRender",
        "code": "return '';\n\n    const id = this.generateMeasurementId();\n    const measurement: PerformanceMeasureme...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        totalMeasurements: 0,\n        averageDuration: 0,\n        minDuration: 0,\n        m...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalMeasurements: completedMeasurements.length,\n      averageDuration: durations.red...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.config }",
        "severity": "MEDIUM",
        "line": 286,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/performance.ts",
        "pattern": "missingMemoization",
        "code": "const durations = completedMeasurements.map(m => m.duration)",
        "severity": "MEDIUM",
        "line": 234,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/performance.ts",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(this.activeMeasurements.values());\n  ",
        "severity": "LOW",
        "line": 265,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/security/hardening.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      valid: errors.length === 0,\n      errors,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security/hardening.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { valid: false, error: 'File type not allowed' }",
        "severity": "MEDIUM",
        "line": 163,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security/hardening.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { valid: false, error: 'File size exceeds maximum allowed' }",
        "severity": "MEDIUM",
        "line": 163,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security/hardening.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { valid: false, error: 'Executable files are not allowed' }",
        "severity": "MEDIUM",
        "line": 163,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security/hardening.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { valid: true }",
        "severity": "MEDIUM",
        "line": 178,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security/hardening.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      // Content Security Policy\n      'Content-Security-Policy': [\n        \"default-src 's...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security/hardening.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      suspicious: reasons.length > 0,\n      reasons,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      valid: errors.length === 0,\n      errors,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protecti...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/security.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    ip,\n    userAgent,\n    sessionId,\n    suspicious: reasons.length > 0,\n    reasons,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/DatabaseOptimizationService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalQueries,\n      cacheHitRate: totalQueries > 0 ? cacheHits / totalQueries : 0,\n  ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/DatabaseOptimizationService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    optimizeQuery: service.optimizeQuery.bind(service),\n    optimizeProposalQueries: servic...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/DatabaseOptimizationService.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return this.optimizeQuery(\n      'proposals:' + JSON.stringify(filters),\n      async () => {\n       ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/services/DatabaseOptimizationService.ts",
        "pattern": "heavyComputationInRender",
        "code": "return this.optimizeQuery(\n      'proposals:' + JSON.stringify(filters),\n      async () => {\n       ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/services/NextJSDataFetching.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    enhancedFetch: fetchingService.enhancedFetch.bind(fetchingService),\n    createStaticFet...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/NextJSDataFetching.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          data: response.data,\n          success: response.success,\n        }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/NextJSDataFetching.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { data: response.data as T, success: response.success }",
        "severity": "MEDIUM",
        "line": 446,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/NextJSDataFetching.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { data: response as T, success: true }",
        "severity": "MEDIUM",
        "line": 449,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/OptimizedProductService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        productId: data.id,\n        name: data.name,\n        price: Number(data.price),\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/OptimizedProductService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { type: 'stats', data: await this.getOptimizedProductStats(op.params) }",
        "severity": "MEDIUM",
        "line": 342,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/OptimizedProductService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { type: 'search', data: await this.fastProductSearch(op.params) }",
        "severity": "MEDIUM",
        "line": 344,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/OptimizedProductService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n                type: 'analytics',\n                data: await this.getProductUsageAnalytic...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/OptimizedProductService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        results,\n        totalTime,\n        operationCount: operations.length,\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/OptimizedProductService.ts",
        "pattern": "missingMemoization",
        "code": "const results = await Promise.all(\n        operations.map(async op => {\n          switch (op.type)",
        "severity": "MEDIUM",
        "line": 338,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        content: content as ContentWithCreator[],\n        total,\n        page: currentPage,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        contentId: id,\n        totalAccess,\n        uniqueUsers,\n        accessByType,\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          id: pc.contentId,\n          title: content?.title || 'Unknown',\n          access:...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        total,\n        active,\n        inactive,\n        public: publicContent,\n        pri...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        results: sortedResults,\n        metrics,\n        aiSuggestions,\n        totalResult...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return [];\n\n      // Find related content based on tags, category, and type\n      const relatedConte...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        totalViews,\n        totalUses,\n        avgUsageTime: 0, // Would calculate from ses...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        totalViews: 0,\n        totalUses: 0,\n        avgUsageTime: 0,\n        clickThroughR...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      categories: Array.from(categories).slice(0, 5),\n      tags: Array.from(tags).slice(0,...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "missingMemoization",
        "code": "const uniqueUsers = new Set(accessLogs.map(log => log.userId)",
        "severity": "MEDIUM",
        "line": 669,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "missingMemoization",
        "code": "const contentIds = popularContent.map(pc => pc.contentId)",
        "severity": "MEDIUM",
        "line": 793,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "missingMemoization",
        "code": "const mostPopular = popularContent.map(pc => {\n        const content = contentDetails.find(c => c.id...",
        "severity": "MEDIUM",
        "line": 799,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "missingMemoization",
        "code": "const enhancedResults = await Promise.all(\n        rawResults.map(async content => {\n          const...",
        "severity": "MEDIUM",
        "line": 887,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "missingMemoization",
        "code": "const uniqueUsers = new Set(content.accessLogs.map(log => log.userId)",
        "severity": "MEDIUM",
        "line": 1019,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "missingMemoization",
        "code": "const uniqueUsers = new Set(accessLogs.map(log => log.userId)",
        "severity": "MEDIUM",
        "line": 669,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(new Set(combinedCategories)).slice(0, 10);\n    ",
        "severity": "LOW",
        "line": 977,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/services/contentService.ts",
        "pattern": "heavyComputationInRender",
        "code": "return {\n      categories: Array.from(categories).slice(0, 5),\n      tags: Array.from(tags).slice(0,...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/services/customerService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        customers,\n        total,\n        page: currentPage,\n        totalPages: Math.ceil(...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/customerService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        total,\n        byStatus,\n        byTier,\n        totalRevenue: revenueStats._sum.re...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/productService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        products,\n        total,\n        page: currentPage,\n        totalPages: Math.ceil(t...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/productService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return await prisma.product.findMany({\n        where: {\n          OR: [\n            { name: { contai...",
        "severity": "MEDIUM",
        "line": 263,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/productService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        productId: id,\n        totalUsage,\n        successRate,\n        averageConfiguratio...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/productService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          id: stat.productId,\n          name: product?.name || 'Unknown',\n          usage: ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/productService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        total,\n        active,\n        inactive,\n        byCategory,\n        totalRevenue: ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/productService.ts",
        "pattern": "missingMemoization",
        "code": "const productIds = usageStats.map(stat => stat.productId)",
        "severity": "MEDIUM",
        "line": 852,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/productService.ts",
        "pattern": "missingMemoization",
        "code": "const mostUsedProducts = usageStats.map(stat => {\n        const product = productDetails.find(p => p...",
        "severity": "MEDIUM",
        "line": 858,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/services/proposalService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        proposals: proposals as ProposalWithCustomer[],\n        total,\n        page: curren...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/proposalService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        proposalId: id,\n        totalSections: sections,\n        totalProducts: products._c...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/proposalService.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        total,\n        byStatus,\n        byPriority,\n        totalValue: valueStats._sum.va...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/services/userService.ts",
        "pattern": "inlineObjectInRender",
        "code": "returns Promise resolving to user data or null if not found\n */\nexport async function getUserByEmail...",
        "severity": "MEDIUM",
        "line": 96,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/store/authStore.ts",
        "pattern": "inlineObjectInRender",
        "code": "return;\n\n    const timeUntilExpiry = sessionExpiry.getTime() - Date.now();\n\n    if (timeUntilExpiry ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/store/authStore.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return;\n\n    const timeUntilExpiry = sessionExpiry.getTime() - Date.now();\n\n    if (timeUntilExpiry ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/test-env-api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      name: 'Environment Configuration Tests',\n      tests: this.results,\n      passed,\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/test-env-api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      name: 'API Client Tests',\n      tests: this.results,\n      passed,\n      duration,\n  ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/test-env-api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { config, url }",
        "severity": "MEDIUM",
        "line": 467,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/test-env-api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { config, url }",
        "severity": "MEDIUM",
        "line": 467,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/test-env-api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { config, url }",
        "severity": "MEDIUM",
        "line": 467,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/test-env-api.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      environmentTests,\n      apiTests,\n      overall,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/testing/testUtils.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      id: 'test-user-1',\n      name: 'Test User',\n      email: 'test@example.com',\n      ro...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/testing/testUtils.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      id: 'test-proposal-1',\n      name: 'Test Proposal',\n      client: 'Test Client',\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/testing/testUtils.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      ok: status >= 200 && status < 300,\n      status,\n      json: async () => data,\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/testing/testUtils.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return new Promise(resolve => {\n      this.startMark('render');\n      render(component);\n      // Us...",
        "severity": "LOW",
        "line": 65,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/testing/testUtils.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return {\n      ok: status >= 200 && status < 300,\n      status,\n      json: async () => data,\n      ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/testing/testUtils.ts",
        "pattern": "heavyComputationInRender",
        "code": "return {\n      ok: status >= 200 && status < 300,\n      status,\n      json: async () => data,\n      ...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/testing/testUtils.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      id: 'test-user-1',\n      name: 'Test User',\n      email: 'test@example.com',\n      ro...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/testing/testUtils.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      id: 'test-proposal-1',\n      name: 'Test Proposal',\n      client: 'Test Client',\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/apiResponseHandler.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    data,\n    pagination,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/apiResponseHandler.ts",
        "pattern": "missingMemoization",
        "code": "const arrayProperties = Object.entries(responseData)\n    .filter(([_, value]) => Array.isArray(value...",
        "severity": "MEDIUM",
        "line": 167,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/utils/apiUrl.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    baseURL: getApiBaseUrl(),\n    timeout: 10000,\n    retryAttempts: 3,\n    retryDelay: 100...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/debounce.ts",
        "pattern": "inlineObjectInRender",
        "code": "return debounced as unknown as T & { cancel: () => void; flush: () => ReturnType<T> }",
        "severity": "MEDIUM",
        "line": 141,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/debounce.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return debounced as unknown as T & { cancel: () => void; flush: () => ReturnType<T> ",
        "severity": "LOW",
        "line": 141,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils/selectiveHydration.ts",
        "pattern": "inlineObjectInRender",
        "code": "returned by API endpoints.\n *\n * @param entityType - The type of the entity (e.g., 'user', 'proposal...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/selectiveHydration.ts",
        "pattern": "inlineObjectInRender",
        "code": "returns both the select object and optimization metadata.\n * This function is used by modern API end...",
        "severity": "MEDIUM",
        "line": 314,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/selectiveHydration.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { select, optimizationMetrics }",
        "severity": "MEDIUM",
        "line": 346,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/selectiveHydration.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      strategy: 'cursor',\n      useCursorPagination: true,\n      reason: 'Cursor parameter ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/selectiveHydration.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      strategy: 'offset',\n      useCursorPagination: false,\n      reason: 'Small dataset wi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/selectiveHydration.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      strategy: 'cursor',\n      useCursorPagination: true,\n      reason: 'Large or unknown ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/selectiveHydration.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    strategy: 'offset',\n    useCursorPagination: false,\n    reason: 'Default to offset pagi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils/selectiveHydration.ts",
        "pattern": "heavyComputationInRender",
        "code": "returns both the select object and optimization metadata.\n * This function is used by modern API end...",
        "severity": "LOW",
        "line": 314,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "inlineObjectInRender",
        "code": "return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...",
        "severity": "MEDIUM",
        "line": 26,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "inlineObjectInRender",
        "code": "return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = ...",
        "severity": "MEDIUM",
        "line": 26,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...",
        "severity": "LOW",
        "line": 26,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = ...",
        "severity": "LOW",
        "line": 26,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "heavyComputationInRender",
        "code": "return true;\n  if (typeof value === 'string') return value.trim() === '';\n  if (Array.isArray(value)...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/utils.ts",
        "pattern": "heavyComputationInRender",
        "code": "return JSON.parse(str);\n  ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/validation/PredictiveValidation.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      type: 'predicted',\n      severity: 'warning',\n      message: 'Potential issue detecte...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/PredictiveValidation.ts",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(this.patterns.values()).filter(pattern => {\n      // Implement pattern matching lo...",
        "severity": "LOW",
        "line": 151,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/validation/RuleExecutor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return true;\n\n    try {\n      for (const condition of conditions) {\n        const result = await thi...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/RuleExecutor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      type: action.type as 'error' | 'warning' | 'fix' | 'suggest' | 'block',\n      message...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/RuleExecutor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return undefined;\n\n    return {\n      count: metrics.count,\n      avgTime: metrics.totalTime / metri...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/ValidationEngine.ts",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(this.rules.values());\n  ",
        "severity": "LOW",
        "line": 178,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/validation/development-validator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        passed: true,\n        message: 'Configuration validation skipped on client-side',\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/development-validator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        passed: true,\n        message: 'Filesystem validation skipped on client-side',\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/development-validator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { total, passed, failed, warnings }",
        "severity": "MEDIUM",
        "line": 472,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/development-validator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        totalFiles: 0,\n        totalLines: 0,\n        complexityScore: 0,\n        testCover...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/development-validator.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalFiles,\n      totalLines,\n      complexityScore: Math.floor(totalLines / totalFil...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/formHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { score, label, requirements: results }",
        "severity": "MEDIUM",
        "line": 149,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/formHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { isValid, suggestions }",
        "severity": "MEDIUM",
        "line": 176,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/formHelpers.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return (value: T): Promise<boolean> => {\n      return new Promise(resolve => {\n        clearTimeout(...",
        "severity": "LOW",
        "line": 252,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/validation/formHelpers.ts",
        "pattern": "missingMemoization",
        "code": "const results = requirements.map(req => ({\n      met: req.regex.test(password)",
        "severity": "MEDIUM",
        "line": 136,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/validation/index.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      success: true,\n      data: result.data,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/index.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      success: true,\n      data: result.data,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/index.ts",
        "pattern": "missingMemoization",
        "code": "const formatValidationError = (error: z.ZodError) => {\n  return {\n    message: 'Validation failed',\n...",
        "severity": "MEDIUM",
        "line": 97,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/validation/index.ts",
        "pattern": "heavyComputationInRender",
        "code": "return {\n    success: false,\n    errors: fieldErrors,\n    message: `Validation failed: ${Object.keys...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/validation/schemas/shared.ts",
        "pattern": "missingMemoization",
        "code": "const formatValidationErrors = (errors: z.ZodError) => {\n  return errors.errors.map(error => ({\n    ...",
        "severity": "MEDIUM",
        "line": 180,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/validation/validation-testing.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        testName: testCase.name,\n        passed,\n        duration,\n        memoryUsage,\n   ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/validation-testing.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      averageTime,\n      medianTime,\n      p95Time,\n      p99Time,\n      throughput,\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/validation-testing.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.suite }",
        "severity": "MEDIUM",
        "line": 502,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validation/validation-testing.ts",
        "pattern": "missingMemoization",
        "code": "const performanceMetrics = {\n      fastestTest: Math.min(...results.map(r => r.duration)),\n      slo...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/validation/validation-testing.ts",
        "pattern": "missingMemoization",
        "code": "const errorMessages = result.error?.issues.map(issue => issue.message)",
        "severity": "MEDIUM",
        "line": 202,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/validation/validation-testing.ts",
        "pattern": "missingMemoization",
        "code": "const errorMessages = actual.error.issues.map(issue => issue.message)",
        "severity": "MEDIUM",
        "line": 370,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/lib/validation/validation-testing.ts",
        "pattern": "heavyComputationInRender",
        "code": "return true;\n    if (a == null || b == null) return false;\n    if (typeof a !== typeof b) return fal...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/validationTracker.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    enableTracking: true,\n    enablePerformanceTracking: true,\n    enableAutoReporting: isP...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validationTracker.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          phase,\n          status: ValidationStatus.SKIPPED,\n          details: 'Tracking d...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validationTracker.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalPhases: phases.length,\n      completedPhases,\n      currentPhase,\n      overallS...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validationTracker.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      total,\n      successful,\n      failed,\n      inProgress,\n      successRate: total > 0...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/lib/validationTracker.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.config }",
        "severity": "MEDIUM",
        "line": 369,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/api/endpoints.integration.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        status: response.status,\n        data: response.ok ? data : undefined,\n        erro...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/api/endpoints.integration.test.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return appropriate errors', async () => {\n      // Mock validation error response\n      mockFetch.mo...",
        "severity": "LOW",
        "line": 601,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/api/endpoints.integration.test.ts",
        "pattern": "missingMemoization",
        "code": "const promises = requests.map(req =>\n      this.testEndpoint(req.endpoint, req.method, req.body, req...",
        "severity": "MEDIUM",
        "line": 94,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/api/endpoints.integration.test.ts",
        "pattern": "missingMemoization",
        "code": "const results = await ApiTester.testBatchEndpoints(\n        batchRequests.map(req => ({\n          .....",
        "severity": "MEDIUM",
        "line": 548,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return this.prisma.content.findMany({\n          where: {\n            OR: [\n              { title: { ...",
        "severity": "MEDIUM",
        "line": 136,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return this.optimizationService.optimizeQuery(\n          'content_search_proposal',\n          async ...",
        "severity": "MEDIUM",
        "line": 156,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return this.prisma.content.findMany({\n          where: {\n            OR: [{ keywords: { has: 'propos...",
        "severity": "MEDIUM",
        "line": 136,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      name: 'Content Search Performance',\n      description: 'Testing search query optimiza...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return this.optimizationService.optimizeQuery(\n          'proposals_complex_filter',\n          async...",
        "severity": "MEDIUM",
        "line": 156,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      name: 'Proposal Query Performance',\n      description: 'Testing proposal data access ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      name: 'Product Search Performance',\n      description: 'Testing product catalog searc...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      name: 'Analytics Query Performance',\n      description: 'Testing hypothesis validatio...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      name: 'RBAC Performance',\n      description: 'Testing role-based access control query...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      testName,\n      iterations,\n      totalTime,\n      averageTime,\n      minTime,\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalTests,\n      averageImprovement,\n      bestImprovement,\n      worstImprovement,\n...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return this.optimizationService.optimizeQuery(\n          'content_search_proposal',\n          async ...",
        "severity": "LOW",
        "line": 156,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return this.optimizationService.optimizeQuery(\n          'proposals_complex_filter',\n          async...",
        "severity": "LOW",
        "line": 156,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return this.optimizationService.optimizeQuery(\n          'products_price_range',\n          async () ...",
        "severity": "LOW",
        "line": 156,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return this.optimizationService.optimizeQuery(\n          'analytics_h8_weekly',\n          async () =...",
        "severity": "LOW",
        "line": 156,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/database-performance-test.ts",
        "pattern": "missingMemoization",
        "code": "const improvements = tests.map(test => (test.cacheHitRate ? test.cacheHitRate * 100 : 0)",
        "severity": "MEDIUM",
        "line": 604,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/integration/multiUserCollaboration.test.tsx",
        "pattern": "missingMemoization",
        "code": "const concurrentPromises = multiUserTestData.users.slice(1).map(async userConfig => {\n        return...",
        "severity": "MEDIUM",
        "line": 243,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/integration/multiUserCollaboration.test.tsx",
        "pattern": "missingMemoization",
        "code": "const stagePromises = multiUserTestData.users.map(userConfig =>\n          multiUserEnv.sessionManage...",
        "severity": "MEDIUM",
        "line": 533,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/integration/multiUserCollaboration.test.tsx",
        "pattern": "missingMemoization",
        "code": "const concurrentActions = extendedUsers.map(async (userConfig, index)",
        "severity": "MEDIUM",
        "line": 646,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/integration/multiUserCollaboration.test.tsx",
        "pattern": "missingMemoization",
        "code": "const behaviorPromises = userBehaviors.map(async behavior => {\n        const actionPromises = behavi...",
        "severity": "MEDIUM",
        "line": 792,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/integration/proposalCreationJourney.test.tsx",
        "pattern": "missingMemoization",
        "code": "const mockGetProducts = jest.fn().mockImplementation(() =>\n        EnhancedAPIHelpers.createEnhanced...",
        "severity": "MEDIUM",
        "line": 276,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/integration/proposalCreationJourney.test.tsx",
        "pattern": "missingMemoization",
        "code": "const selectedSMEs = Array.from(e.target.selectedOptions).map(\n                  option => option.va...",
        "severity": "MEDIUM",
        "line": 423,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/integration/userJourneys.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalSteps: this.steps.length,\n      successfulSteps,\n      successRate,\n      totalT...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/jest-infrastructure.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "returns expected structure\n      expect(useSession).toBeDefined();\n\n      // Call the mock function ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/monitoring/ProductionTestMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      testPassRate,\n      performanceScore,\n      hypothesisValidationStatus: this.getHypot...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/monitoring/ProductionTestMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      overallReadiness: this.assessOverallReadiness(currentMetrics, regressionAnalysis),\n  ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/monitoring/ProductionTestMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      score: readinessScore,\n      status: readinessScore >= 90 ? 'ready' : readinessScore ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/monitoring/ProductionTestMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      accessControlValidated: true,\n      dataProtectionCompliant: true,\n      vulnerabilit...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/monitoring/ProductionTestMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      responseTimeCompliant: metrics.averageTestDuration < 5000,\n      throughputAdequate: ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/monitoring/ProductionTestMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalHypotheses: hypotheses.length,\n      validatedHypotheses: validatedCount,\n      ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/monitoring/ProductionTestMonitor.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      activeAlerts,\n      alertLevel: activeAlerts.length > 0 ? 'warning' : 'none',\n      l...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/monitoring/ProductionTestMonitor.ts",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(this.monitoringSessions.values());\n  ",
        "severity": "LOW",
        "line": 360,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        totalRequests: 0,\n        successfulRequests: 0,\n        failedRequests: 0,\n       ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      totalRequests,\n      successfulRequests,\n      failedRequests,\n      averageResponseT...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n              success: true,\n              duration: Date.now() - startTime,\n            }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n              success: false,\n              duration: Date.now() - startTime,\n             ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n              success: true,\n              duration: Date.now() - startTime,\n              ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n              success: false,\n              duration: Date.now() - startTime,\n             ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { success: true, data: { id: 'test' } ",
        "severity": "MEDIUM",
        "line": 487,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { success: true }",
        "severity": "MEDIUM",
        "line": 565,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          success: true,\n          timelineAccuracy: duration < 1000 ? 95 : 85, // Faster =...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { success: true, duration: Date.now() - requestStart }",
        "severity": "MEDIUM",
        "line": 652,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { success: false, duration: Date.now() - requestStart }",
        "severity": "MEDIUM",
        "line": 654,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const durations = this.metrics.map(m => m.duration)",
        "severity": "MEDIUM",
        "line": 73,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const batchPromises = Array(batchSize)\n        .fill(null)\n        .map(async ()",
        "severity": "MEDIUM",
        "line": 116,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const stepPromises = Array(currentConcurrency)\n        .fill(null)\n        .map(async ()",
        "severity": "MEDIUM",
        "line": 154,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const maxResponseTime = Math.max(...results.map(r => r.duration)",
        "severity": "MEDIUM",
        "line": 285,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const concurrencyLevels = [...new Set(results.map(r => r.concurrency)",
        "severity": "MEDIUM",
        "line": 365,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const responseTimesByLevel = Object.entries(concurrencyGroups).map(([level, results])",
        "severity": "MEDIUM",
        "line": 409,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const minAvgTime = Math.min(...responseTimesByLevel.map(r => r.averageResponseTime)",
        "severity": "MEDIUM",
        "line": 415,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const maxAvgTime = Math.max(...responseTimesByLevel.map(r => r.averageResponseTime)",
        "severity": "MEDIUM",
        "line": 416,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/performance/loadTesting.test.ts",
        "pattern": "missingMemoization",
        "code": "const batchPromises = Array(10)\n          .fill(null)\n          .map(async ()",
        "severity": "MEDIUM",
        "line": 646,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          endpoint,\n          method,\n          responseTime,\n          statusCode,\n       ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return { ...this.currentState }",
        "severity": "MEDIUM",
        "line": 163,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    performanceMonitor: new PerformanceMonitor(),\n    stateManager: new StateManagementTest...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    component: componentName,\n    dataReceived,\n    dataValid,\n    performanceAcceptable,\n ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        strategy: 'retry',\n        maxAttempts: 3,\n        backoffDelay: 1000,\n      }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        strategy: 'graceful_degradation',\n        maxAttempts: 1,\n        backoffDelay: 0,\n...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      strategy: 'retry',\n      maxAttempts: 2,\n      backoffDelay: 500,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n          success: true,\n          attempts,\n        }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      success: false,\n      attempts,\n      finalError: lastError,\n    }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return {\n      start: () => {\n        startTime = performance.now();\n      ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (error) {\n          re...",
        "severity": "LOW",
        "line": 95,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return {\n      start: () => {\n        startTime = performance.now();\n      ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return {\n      useAuth: () => ({\n        session: {\n          id: user.id,\n          user,\n        ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return {\n        strategy: 'graceful_degradation',\n        maxAttempts: 1,\n        backoffDelay: 0,\n...",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/enhancedJourneyHelpers.ts",
        "pattern": "heavyComputationInRender",
        "code": "return Array.from(this.metrics.values());\n  ",
        "severity": "LOW",
        "line": 456,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        sessionId,\n        totalUsers: 0,\n        simultaneousActions: 0,\n        conflicts...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      sessionId,\n      totalUsers,\n      simultaneousActions,\n      conflictsDetected,\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        averageLatency: 0,\n        maxLatency: 0,\n        syncEventsCount: 0,\n        perfo...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n      averageLatency,\n      maxLatency,\n      syncEventsCount: this.syncEvents.length,\n    ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    sessionManager: new MultiUserEnvironmentManager(),\n    syncSimulator: new RealTimeSyncS...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    collaborationMetrics,\n    syncMetrics,\n    journeyMetrics,\n  }",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "inlineFunctionInRender",
        "code": "return new Promise(resolve => {\n      const events: SyncEvent[] = [];\n\n      users.forEach((user, in...",
        "severity": "LOW",
        "line": 124,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "missingMemoization",
        "code": "const latencyMetrics = Array.from(session.performanceMetrics.values())\n      .filter(m => m.type ===...",
        "severity": "MEDIUM",
        "line": 313,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/utils/multiUserJourneyHelpers.ts",
        "pattern": "missingMemoization",
        "code": "const latencies = this.syncEvents.map(event => event.syncLatency)",
        "severity": "MEDIUM",
        "line": 485,
        "suggestion": "Use useMemo for expensive computations"
      },
      {
        "file": "src/test/utils/test-utils.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n    hypothesis,\n    metric,\n    actual,\n    target,\n    baseline,\n    improvement,\n    targ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/test-utils.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return { hasError: true, error }",
        "severity": "MEDIUM",
        "line": 146,
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/test-utils.tsx",
        "pattern": "inlineObjectInRender",
        "code": "return {\n        ...results,\n        isValid: results.meetsTimeTarget && results.meetsSuccessTarget ...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      },
      {
        "file": "src/test/utils/test-utils.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (success) {\n        resolv...",
        "severity": "LOW",
        "line": 209,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/test-utils.tsx",
        "pattern": "inlineFunctionInRender",
        "code": "return {\n    restore: () => {\n      Object.assign(console, originalConsole);\n    ",
        "severity": "LOW",
        "line": "unknown",
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/utils/test-utils.tsx",
        "pattern": "heavyComputationInRender",
        "code": "return Object.keys(storage).length;\n    ",
        "severity": "LOW",
        "line": 200,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/utils/__tests__/formatters.test.ts",
        "pattern": "inlineFunctionInRender",
        "code": "returns original text when shorter than max length', () => {\n      expect(truncateText('Hello', 10))...",
        "severity": "LOW",
        "line": 63,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/utils/formatters.ts",
        "pattern": "inlineObjectInRender",
        "code": "returns Formatted date string\n */\nexport function formatDate(\n  date: Date | string | number,\n  form...",
        "severity": "MEDIUM",
        "line": "unknown",
        "suggestion": "Move object outside render or use useMemo"
      }
    ],
    "typeErrors": [],
    "securityIssues": [
      {
        "file": "src/app/performance/reports/page.tsx",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem('posalpro_test_reports', JSON.stringify(updatedReports)",
        "severity": "LOW",
        "line": 138,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem(storageKey, JSON.stringify(state.stepData)",
        "severity": "LOW",
        "line": 224,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/forms/MultiStepForm/MultiStepFormProvider.tsx",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem(storageKey, JSON.stringify(state.stepData)",
        "severity": "LOW",
        "line": 224,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem(WIZARD_SESSION_KEY, JSON.stringify(wizardData)",
        "severity": "LOW",
        "line": 430,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem(sessionKey, currentSessionTime.toString()",
        "severity": "LOW",
        "line": 263,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem(stateChangeKey, currentTime.toString()",
        "severity": "LOW",
        "line": 322,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/dashboard/useDashboardLayout.ts",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem(getLayoutStorageKey()",
        "severity": "LOW",
        "line": 488,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem('analytics_events', JSON.stringify(recentEvents)",
        "severity": "LOW",
        "line": 155,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/hooks/useAnalytics.ts",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem('analytics_events', JSON.stringify(events)",
        "severity": "LOW",
        "line": 155,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/api/interceptors/authInterceptor.ts",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem('auth_tokens', JSON.stringify(tokens)",
        "severity": "LOW",
        "line": 41,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/auth/OptimizedSessionManager.ts",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem('posalpro_optimized_session_state', JSON.stringify(this.sessionState)",
        "severity": "LOW",
        "line": 548,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/PerformanceOptimizer.ts",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem(authCooldownKey, now.toString()",
        "severity": "LOW",
        "line": 275,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/lib/performance/reportGenerator.ts",
        "pattern": "localStorageXSS",
        "code": "localStorage.setItem('posalpro_test_reports', JSON.stringify(recentReports)",
        "severity": "LOW",
        "line": 645,
        "suggestion": "Review and fix this pattern"
      }
    ],
    "accessibilityIssues": [
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 491,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 491,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 491,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 644,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 644,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/admin/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 644,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 570,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 570,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 446,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 446,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 446,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 446,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/content/search/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 446,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/coordination/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 522,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/coordination/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 544,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/[id]/CustomerProfileClient.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 323,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/customers/create/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 53,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/products/management/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 377,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/products/management/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 377,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/products/relationships/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 476,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/products/relationships/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 521,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/products/selection/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 176,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/sme/assignments/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 176,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/sme/contributions/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 696,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/workflows/approval/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 386,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/workflows/templates/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 558,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/(dashboard)/workflows/templates/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 803,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/workflows/templates/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 803,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/workflows/templates/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 803,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/workflows/templates/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 803,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/workflows/templates/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 803,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/(dashboard)/workflows/templates/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 803,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/api/content/route.ts",
        "pattern": "missingAltText",
        "code": "<img",
        "severity": "MEDIUM",
        "line": 103,
        "suggestion": "Add alt attribute for accessibility"
      },
      {
        "file": "src/app/database/monitoring/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 289,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/database/monitoring/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 289,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/database/monitoring/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 289,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/executive/review/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 631,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/performance/mobile/MobilePerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 263,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/performance/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 84,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/performance/reports/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 45,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/performance/test/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 50,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/performance/test/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 50,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/performance/test/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 50,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/performance/test/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 50,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/phase-7/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 310,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 490,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 490,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 490,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 490,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/app/rfp/parser/page.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 520,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/app/test-infrastructure.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 48,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/admin/RoleManager.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 351,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/admin/RoleManager.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 351,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/admin/RoleManager.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 250,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/admin/RoleManager.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 250,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/admin/RoleManager.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 250,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/admin/RoleManager.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 250,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/analytics/AnalyticsDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 297,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/analytics/RealTimeAnalyticsOptimizer.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 594,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/analytics/RealTimeAnalyticsOptimizer.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 594,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/analytics/RealTimeAnalyticsOptimizer.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 594,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/analytics/RealTimeAnalyticsOptimizer.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 594,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/AuthenticatedRedirect.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 65,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/EnhancedLoginForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 484,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 376,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 376,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 376,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 376,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 376,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 376,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 313,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/LoginForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 313,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/LogoutButton.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 33,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/LogoutButton.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 33,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/PasswordResetForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 206,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/PasswordResetForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 206,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/PasswordResetForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 206,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/PasswordResetForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 206,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/PasswordResetForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 206,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/PasswordResetForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 206,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/PasswordResetForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 206,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/ProtectedRoute.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 227,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/ProtectedRoute.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 227,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 389,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 389,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 389,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 389,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/RegistrationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 485,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/auth/__tests__/LoginForm.integration.test.tsx",
        "pattern": "missingAltText",
        "code": "<img",
        "severity": "MEDIUM",
        "line": 298,
        "suggestion": "Add alt attribute for accessibility"
      },
      {
        "file": "src/components/auth/__tests__/LoginForm.integration.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 78,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/common/AnalyticsStorageMonitor.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 95,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/common/AnalyticsStorageMonitor.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 95,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/coordination/AI-DrivenInsights.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 362,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/customers/CustomerCreationSidebar.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 183,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/customers/CustomerCreationSidebar.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 183,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/customers/CustomerCreationSidebar.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 183,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/customers/CustomerCreationSidebar.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 183,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/customers/CustomerCreationSidebar.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 211,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/customers/CustomerMenu.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 23,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/customers/CustomerMenu.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 23,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/DashboardStats.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 182,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/MobileDashboardEnhancement.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 374,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/MobileDashboardEnhancement.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 374,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/ModernDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 338,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/ModernDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 338,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/__tests__/DashboardShell.integration.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 39,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/__tests__/DashboardShell.integration.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 39,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/widgets/ProposalOverview.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 352,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/widgets/RecentActivity.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 142,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/widgets/RecentActivity.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 142,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/dashboard/widgets/RecentActivity.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 142,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/deadlines/DeadlineTracker.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 579,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/deadlines/DeadlineTracker.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 579,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/feedback/Toast/Toast.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 134,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/forms/MultiStepForm/StepIndicator.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 105,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/forms/MultiStepForm/StepIndicator.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 105,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/layout/AppHeader.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 107,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/AppHeader.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 107,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/AppSidebar.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 447,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/layout/EnhancedMobileNavigation.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 481,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/layout/EnhancedMobileNavigation.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 519,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/EnhancedMobileNavigation.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 519,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/MobileEnhancedLayout.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 221,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/layout/MobileEnhancedLayout.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 221,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/layout/MobileEnhancedLayout.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 221,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/layout/MobileEnhancedLayout.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 257,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/layout/TabNavigation.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 233,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/layout/UserMenu.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 124,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/AdvancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 299,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/AdvancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 299,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/AdvancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 299,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/AdvancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 299,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/AdvancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 299,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/AdvancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 299,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/DatabasePerformanceDemo.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 106,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/DatabasePerformanceDemo.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 106,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 307,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 307,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 307,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 307,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/EnhancedPerformanceDashboard.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 330,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/performance/PerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 171,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/PerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 171,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/PerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 171,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/PerformanceDashboard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 171,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/PerformanceMonitor.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 401,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/performance/PerformanceMonitor.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 401,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 721,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 721,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 721,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductCreationForm.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 596,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/products/ProductFilters.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductFilters.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductFilters.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductFilters.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductFilters.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductFilters.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductFilters.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductFilters.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/products/ProductRelationshipManager.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 251,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 511,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 511,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 511,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 511,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/NotificationsTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 303,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 577,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 577,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/PreferencesTab.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 277,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 326,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 326,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 326,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 326,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 326,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 326,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 537,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 537,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 537,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 537,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 537,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/profile/UserProfile.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 537,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 555,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 555,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 555,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 555,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 555,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ApprovalQueue.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 555,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/DecisionInterface.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 407,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/proposals/DecisionInterface.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 506,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/DecisionInterface.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 506,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/DecisionInterface.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 506,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/DecisionInterface.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 506,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/DecisionInterface.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 506,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/DecisionInterface.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 506,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 502,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/proposals/ProposalWizard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 502,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 643,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 678,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 678,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 678,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 678,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 678,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 678,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/WorkflowRuleBuilder.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 678,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/BasicInformationStep.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 522,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/ReviewStep.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 774,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/proposals/steps/TeamAssignmentStep.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 619,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 382,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 382,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/providers/AuthProvider.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 382,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/Checkbox.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 104,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/EnhancedMobileCard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 354,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/EnhancedMobileCard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 354,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/EnhancedMobileCard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 354,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/EnhancedMobileCard.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 354,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/Input.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 47,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/MobileNavigationMenus.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 251,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/RadioGroup.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 214,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/RadioGroup.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 214,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/RadioGroup.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 214,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/Tabs.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 72,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/feedback/Toast.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 203,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/forms/Button.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 136,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/forms/Input.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 150,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/components/ui/forms/Select.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 273,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/components/ui/forms/Select.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 409,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/integration/crossRoleCoordinationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 182,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/test/integration/crossRoleCoordinationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 182,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/test/integration/crossRoleCoordinationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 182,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/test/integration/crossRoleCoordinationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 182,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/test/integration/crossRoleCoordinationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 182,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/test/integration/crossRoleCoordinationJourney.test.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 313,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/integration/crossRoleCoordinationJourney.test.tsx",
        "pattern": "missingFormLabels",
        "code": "<input",
        "severity": "LOW",
        "line": 313,
        "suggestion": "Review and fix this pattern"
      },
      {
        "file": "src/test/integration/proposalCreationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/test/integration/proposalCreationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/test/integration/proposalCreationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      },
      {
        "file": "src/test/integration/proposalCreationJourney.test.tsx",
        "pattern": "missingAriaLabel",
        "code": "<button",
        "severity": "MEDIUM",
        "line": 214,
        "suggestion": "Add aria-label for screen readers"
      }
    ]
  }
}