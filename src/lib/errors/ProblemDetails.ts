/**
 * Problem Details for HTTP APIs (RFC 7807)
 * Provides standardized error response format for APIs
 */

export interface ProblemDetails {
  /** A URI reference that identifies the problem type */
  type?: string;

  /** A short, human-readable summary of the problem type */
  title: string;

  /** The HTTP status code generated by the origin server */
  status?: number;

  /** A human-readable explanation specific to this occurrence of the problem */
  detail?: string;

  /** A URI reference that identifies the specific occurrence of the problem */
  instance?: string;

  /** Additional properties for problem-specific details */
  [key: string]: any;
}

export interface ProblemField {
  field: string;
  message: string;
  code?: string;
}

/**
 * Creates a ProblemDetails object with standardized format
 */
export function createProblemDetails(
  title: string,
  options: {
    type?: string;
    status?: number;
    detail?: string;
    instance?: string;
    extensions?: Record<string, any>;
  } = {}
): ProblemDetails {
  return {
    type: options.type || 'about:blank',
    title,
    status: options.status,
    detail: options.detail,
    instance: options.instance,
    ...options.extensions,
  };
}

/**
 * Predefined problem types for common errors
 */
export const PROBLEM_TYPES = {
  VALIDATION_ERROR: 'https://api.posalpro.com/errors/validation-error',
  AUTHENTICATION_ERROR: 'https://api.posalpro.com/errors/authentication-error',
  AUTHORIZATION_ERROR: 'https://api.posalpro.com/errors/authorization-error',
  NOT_FOUND: 'https://api.posalpro.com/errors/not-found',
  CONFLICT: 'https://api.posalpro.com/errors/conflict',
  RATE_LIMITED: 'https://api.posalpro.com/errors/rate-limited',
  INTERNAL_ERROR: 'https://api.posalpro.com/errors/internal-error',
} as const;

/**
 * Maps Zod validation errors to ProblemField format
 */
export function mapZodErrorsToFields(zodErrors: any[]): ProblemField[] {
  return zodErrors.map(error => ({
    field: Array.isArray(error.path) ? error.path.join('.') : String(error.path || ''),
    message: error.message,
    code: error.code,
  }));
}

/**
 * Gets the problem type URI for an error code
 */
export function getProblemTypeUri(errorCode: string): string {
  // Extract category from error code (e.g., 'VAL_4000' -> 'VAL')
  const category = errorCode.split('_')[0];

  switch (category) {
    case 'VAL':
      return PROBLEM_TYPES.VALIDATION_ERROR;
    case 'AUTH':
      return errorCode.includes('2000') || errorCode.includes('2001')
        ? PROBLEM_TYPES.AUTHENTICATION_ERROR
        : PROBLEM_TYPES.AUTHORIZATION_ERROR;
    case 'DATA':
      return errorCode.includes('3001')
        ? PROBLEM_TYPES.NOT_FOUND
        : PROBLEM_TYPES.INTERNAL_ERROR;
    case 'BUS':
      return PROBLEM_TYPES.CONFLICT;
    case 'API':
      return PROBLEM_TYPES.INTERNAL_ERROR;
    case 'SYS':
      return PROBLEM_TYPES.INTERNAL_ERROR;
    default:
      return PROBLEM_TYPES.INTERNAL_ERROR;
  }
}
