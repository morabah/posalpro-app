/**
 * PosalPro MVP2 - Executive Review Portal
 * Based on EXECUTIVE_REVIEW_SCREEN.md wireframe specifications
 * Supports component traceability and analytics integration for H7 hypothesis validation
 */

'use client';

import { useErrorHandler } from '@/components/providers/ErrorBoundary';
import { Card } from '@/components/ui/Card';
import { Input } from '@/components/ui/Input';
import { Button } from '@/components/ui/forms/Button';
import { useAnalytics } from '@/hooks/useAnalytics';
import { ErrorCodes } from '@/lib/errors/ErrorCodes';
import { ErrorHandlingService } from '@/lib/errors/ErrorHandlingService';
import {
  Bars3Icon,
  CheckCircleIcon,
  ClockIcon,
  CogIcon,
  DevicePhoneMobileIcon,
  DocumentTextIcon,
  ExclamationTriangleIcon,
  HandThumbDownIcon,
  HandThumbUpIcon,
  LightBulbIcon,
  PencilIcon,
  UserIcon,
  XCircleIcon,
} from '@heroicons/react/24/outline';
import { useRouter } from 'next/navigation';
import { useCallback, useEffect, useMemo, useState } from 'react';

// Component Traceability Matrix
const COMPONENT_MAPPING = {
  userStories: ['US-4.1', 'US-4.3', 'US-8.1'],
  acceptanceCriteria: [
    'AC-4.1.1',
    'AC-4.1.2',
    'AC-4.1.3',
    'AC-4.3.1',
    'AC-4.3.2',
    'AC-4.3.3',
    'AC-8.1.1',
    'AC-8.1.2',
  ],
  methods: [
    'complexityVisualization()',
    'calculatePriority()',
    'criticalPath()',
    'displayMetrics()',
    'generateInsights()',
    'trackProgress()',
    'mobileOptimizedDecision()',
    'touchOptimizedInterface()',
    'executiveAnalyticsTracking()',
  ],
  hypotheses: ['H7', 'H10'],
  testCases: ['TC-H7-001', 'TC-H7-002', 'TC-H10-001'],
};

// Decision status enumeration
enum DecisionStatus {
  PENDING = 'pending',
  APPROVED = 'approved',
  DECLINED = 'declined',
  CONDITIONAL = 'conditional',
  DELEGATED = 'delegated',
  CHANGES_REQUESTED = 'changes_requested',
}

// Proposal status enumeration
enum ProposalStatus {
  READY = 'ready',
  AT_RISK = 'at_risk',
  UNDER_REVIEW = 'under_review',
  BLOCKED = 'blocked',
}

// Executive proposal interface
interface ExecutiveProposal {
  id: string;
  title: string;
  customer: string;
  value: number;
  deadline: Date;
  status: ProposalStatus;
  complexity: 'low' | 'medium' | 'high';
  priority: number;
  winProbability: number;
  deliveryConfidence: number;
  resourceAvailability: number;
  strategicAlignment: number;
  summary: {
    description: string;
    margin: number;
    competitorCount: number;
    duration: string;
    keyObjectives: string[];
  };
  criticalPath: CriticalPathItem[];
  aiInsights: AIInsight[];
  team: {
    proposalManager: string;
    leadSME: string;
    salesRep: string;
  };
}

// Critical path item interface
interface CriticalPathItem {
  id: string;
  step: string;
  status: 'completed' | 'in_progress' | 'pending' | 'at_risk';
  completedAt?: Date;
  assignee?: string;
}

// AI insight interface
interface AIInsight {
  id: string;
  type: 'risk' | 'opportunity' | 'recommendation';
  severity: 'low' | 'medium' | 'high';
  title: string;
  description: string;
  recommendation?: string;
  confidence: number;
}

// Decision record interface
interface DecisionRecord {
  id: string;
  proposalId: string;
  decision: DecisionStatus;
  executiveId: string;
  executiveName: string;
  timestamp: Date;
  conditions?: string;
  notes?: string;
  signature: string;
  decisionTime: number; // milliseconds
}

// Executive metrics for H7 validation
interface ExecutiveMetrics {
  proposalId: string;
  decisionTime: number;
  complexityScore: number;
  timelineImpact: number;
  criticalPathPosition: boolean;
  queuePosition: number;
  priorityScore: number;
  dependenciesConsidered: number;
  riskLevel: string;
  decisionType: string;
  contextCompleteness: number;
  aiRecommendationAccuracy: number;
  delegationFrequency: number;
  signatureTime: number;
}

export default function ExecutiveReviewPortal() {
  const router = useRouter();
  const [proposals, setProposals] = useState<ExecutiveProposal[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedProposalId, setSelectedProposalId] = useState<string | null>(null);
  const [decision, setDecision] = useState<DecisionStatus | null>(null);
  const [activeTab, setActiveTab] = useState<'pending' | 'team' | 'history' | 'kpis'>('pending');
  const [decisionInProgress, setDecisionInProgress] = useState(false);
  const [selectedDecision, setSelectedDecision] = useState<DecisionStatus | null>(null);
  const [conditions, setConditions] = useState('');
  const [signature, setSignature] = useState('');
  const [sessionStartTime] = useState(Date.now());
  const [searchTerm, setSearchTerm] = useState('');

  // Mobile-specific state
  const [isMobile, setIsMobile] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [touchStartTime, setTouchStartTime] = useState<number | null>(null);

  // Error handling and analytics initialization
  const errorHandlingService = ErrorHandlingService.getInstance();
  const throwError = useErrorHandler();
  const analytics = useAnalytics();

  // Mobile detection effect
  useEffect(() => {
    const checkMobile = () => {
      const mobile = window.innerWidth < 768;
      setIsMobile(mobile);

      // Track mobile access for hypothesis validation
      if (mobile) {
        analytics.track('executive_mobile_access', {
          userStories: ['US-8.1'],
          hypotheses: ['H10'],
          deviceType: 'mobile',
          screenWidth: window.innerWidth,
          timestamp: Date.now(),
        });
      }
    };

    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, [analytics]);

  // Enhanced fetch with error handling
  useEffect(() => {
    const fetchProposals = async () => {
      try {
        setLoading(true);
        const startTime = performance.now();

        const response = await fetch('/api/executive/proposals');
        if (!response.ok) {
          const errorMessage = `Failed to fetch executive proposals: ${response.status}`;
          const processedError = errorHandlingService.processError(
            new Error(errorMessage),
            'Unable to load executive proposals',
            ErrorCodes.API.REQUEST_FAILED,
            {
              component: 'ExecutiveReviewPortal',
              operation: 'fetchProposals',
              userStories: ['US-4.1', 'US-8.1'],
              hypotheses: ['H7', 'H10'],
              responseStatus: response.status,
              isMobile,
              timestamp: Date.now(),
            }
          );
          throw processedError;
        }

        const data = await response.json();
        setProposals(data);
        if (data.length > 0) {
          setSelectedProposalId(data[0].id);
        }

        // Analytics: Track successful load time for hypothesis validation
        const loadTime = performance.now() - startTime;
        analytics.track('executive_proposals_loaded', {
          userStories: ['US-4.1', 'US-8.1'],
          hypotheses: ['H7', 'H10'],
          loadTime,
          proposalCount: data.length,
          isMobile,
          deviceType: isMobile ? 'mobile' : 'desktop',
          timestamp: Date.now(),
        });
      } catch (err) {
        const userFriendlyMessage = errorHandlingService.getUserFriendlyMessage(err);
        setError(userFriendlyMessage);

        // Track error for analytics
        analytics.track('executive_proposals_load_error', {
          userStories: ['US-4.1', 'US-8.1'],
          hypotheses: ['H7', 'H10'],
          errorType: err instanceof Error ? err.message : 'Unknown error',
          isMobile,
          timestamp: Date.now(),
        });
      } finally {
        setLoading(false);
      }
    };

    fetchProposals();
  }, [errorHandlingService, analytics, isMobile]);

  const selectedProposal = useMemo(
    () => proposals.find(p => p.id === selectedProposalId),
    [proposals, selectedProposalId]
  );

  // Sort proposals by priority and deadline
  const sortedProposals = useMemo(() => {
    return [...proposals].sort((a, b) => {
      // First by priority (higher first)
      if (a.priority !== b.priority) {
        return b.priority - a.priority;
      }
      // Then by deadline (sooner first)
      return a.deadline.getTime() - b.deadline.getTime();
    });
  }, [proposals]);

  // Calculate dashboard metrics
  const dashboardMetrics = useMemo(() => {
    const pending = proposals.filter(p => !p.id.includes('decided')).length;
    const totalValue = proposals.reduce((sum, p) => sum + p.value, 0);
    const avgWinProb = proposals.reduce((sum, p) => sum + p.winProbability, 0) / proposals.length;
    const atRisk = proposals.filter(p => p.status === ProposalStatus.AT_RISK).length;

    return {
      pending,
      totalValue,
      avgWinProb: Math.round(avgWinProb),
      atRisk,
    };
  }, [proposals]);

  // Analytics tracking
  const trackAction = useCallback(
    (action: string, metadata: any = {}) => {
      console.log('Executive Review Analytics:', {
        action,
        metadata,
        timestamp: Date.now(),
        proposalId: selectedProposal?.id,
        sessionDuration: Date.now() - sessionStartTime,
      });
    },
    [selectedProposal?.id, sessionStartTime]
  );

  // Handle proposal selection
  const handleProposalSelect = useCallback(
    (proposal: ExecutiveProposal) => {
      setSelectedProposalId(proposal.id);
      setSelectedDecision(null);
      setConditions('');
      setSignature('');

      trackAction('proposal_selected', {
        proposalId: proposal.id,
        proposalValue: proposal.value,
        complexity: proposal.complexity,
        priority: proposal.priority,
      });
    },
    [trackAction]
  );

  // Enhanced decision handling with mobile analytics
  const handleDecision = useCallback(
    async (decisionType: DecisionStatus) => {
      if (!selectedProposal || !signature.trim()) {
        const errorMessage = 'Please provide your digital signature before making a decision';
        setError(errorMessage);

        analytics.track('executive_decision_validation_error', {
          userStories: ['US-4.1', 'US-8.1'],
          hypotheses: ['H7', 'H10'],
          errorType: 'missing_signature',
          decisionType,
          isMobile,
          timestamp: Date.now(),
        });
        return;
      }

      try {
        setDecisionInProgress(true);
        setTouchStartTime(Date.now());

        const decisionStartTime = Date.now();
        const sessionDuration = decisionStartTime - sessionStartTime;

        const response = await fetch('/api/executive/decisions', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            proposalId: selectedProposal.id,
            decision: decisionType,
            conditions: conditions.trim(),
            signature: signature.trim(),
            sessionDuration,
            isMobile,
            touchInteraction: !!touchStartTime,
          }),
        });

        if (!response.ok) {
          const errorMessage = `Decision submission failed: ${response.status}`;
          const processedError = errorHandlingService.processError(
            new Error(errorMessage),
            'Unable to submit your decision',
            ErrorCodes.API.REQUEST_FAILED,
            {
              component: 'ExecutiveReviewPortal',
              operation: 'handleDecision',
              userStories: ['US-4.1', 'US-8.1'],
              hypotheses: ['H7', 'H10'],
              decisionType,
              proposalId: selectedProposal.id,
              isMobile,
              touchInteraction: !!touchStartTime,
              responseStatus: response.status,
              timestamp: Date.now(),
            }
          );
          throw processedError;
        }

        const decisionTime = Date.now() - decisionStartTime;

        // Enhanced analytics tracking for hypothesis validation
        analytics.track('executive_decision_submitted', {
          userStories: ['US-4.1', 'US-8.1'],
          hypotheses: ['H7', 'H10'],
          decisionType,
          proposalId: selectedProposal.id,
          proposalValue: selectedProposal.value,
          complexity: selectedProposal.complexity,
          decisionTime,
          sessionDuration,
          hasConditions: !!conditions.trim(),
          conditionsLength: conditions.trim().length,
          signatureProvided: !!signature.trim(),
          isMobile,
          touchInteraction: !!touchStartTime,
          deviceType: isMobile ? 'mobile' : 'desktop',
          aiInsightsConsidered: selectedProposal.aiInsights.length,
          winProbability: selectedProposal.winProbability,
          strategicAlignment: selectedProposal.strategicAlignment,
          timestamp: Date.now(),
        });

        setSelectedDecision(decisionType);
        setError(null);
      } catch (err) {
        const userFriendlyMessage = errorHandlingService.getUserFriendlyMessage(err);
        setError(userFriendlyMessage);

        analytics.track('executive_decision_submission_error', {
          userStories: ['US-4.1', 'US-8.1'],
          hypotheses: ['H7', 'H10'],
          errorType: err instanceof Error ? err.message : 'Unknown error',
          decisionType,
          isMobile,
          timestamp: Date.now(),
        });
      } finally {
        setDecisionInProgress(false);
        setTouchStartTime(null);
      }
    },
    [
      selectedProposal,
      signature,
      conditions,
      sessionStartTime,
      errorHandlingService,
      analytics,
      isMobile,
      touchStartTime,
    ]
  );

  // Mobile proposal selection tracking
  const handleProposalSelection = useCallback(
    (proposalId: string) => {
      setSelectedProposalId(proposalId);

      const proposal = proposals.find(p => p.id === proposalId);
      if (proposal) {
        analytics.track('executive_proposal_selected', {
          userStories: ['US-4.1', 'US-8.1'],
          hypotheses: ['H7', 'H10'],
          proposalId,
          proposalValue: proposal.value,
          complexity: proposal.complexity,
          status: proposal.status,
          priority: proposal.priority,
          isMobile,
          timestamp: Date.now(),
        });
      }
    },
    [proposals, analytics, isMobile]
  );

  // Get status badge JSX
  const getStatusDisplay = (status: ProposalStatus) => {
    let config;
    switch (status) {
      case ProposalStatus.READY:
        config = {
          icon: CheckCircleIcon,
          color: 'text-green-700',
          bg: 'bg-green-50 border-green-200',
          label: 'Ready',
        };
        break;
      case ProposalStatus.AT_RISK:
        config = {
          icon: ExclamationTriangleIcon,
          color: 'text-red-700',
          bg: 'bg-red-50 border-red-200',
          label: 'Risk',
        };
        break;
      case ProposalStatus.UNDER_REVIEW:
        config = {
          icon: ClockIcon,
          color: 'text-blue-700',
          bg: 'bg-blue-50 border-blue-200',
          label: 'Review',
        };
        break;
      case ProposalStatus.BLOCKED:
        config = {
          icon: XCircleIcon,
          color: 'text-gray-700',
          bg: 'bg-gray-50 border-gray-200',
          label: 'Blocked',
        };
        break;
      default:
        config = {
          icon: ClockIcon,
          color: 'text-gray-700',
          bg: 'bg-gray-50 border-gray-200',
          label: 'Unknown',
        };
    }

    const IconComponent = config.icon;
    return (
      <span
        className={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-medium border ${config.bg} ${config.color}`}
      >
        <IconComponent className="w-3 h-3" />
        {config.label}
      </span>
    );
  };

  // Get critical path status icon
  const getCriticalPathIcon = (status: CriticalPathItem['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircleIcon className="w-5 h-5 text-green-600" />;
      case 'in_progress':
        return <ClockIcon className="w-5 h-5 text-blue-600" />;
      case 'at_risk':
        return <ExclamationTriangleIcon className="w-5 h-5 text-red-600" />;
      default:
        return <div className="w-5 h-5 rounded-full bg-gray-300"></div>;
    }
  };

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  useEffect(() => {
    trackAction('executive_portal_accessed', {
      pendingProposals: dashboardMetrics.pending,
      totalValue: dashboardMetrics.totalValue,
    });
  }, [dashboardMetrics, trackAction]);

  // Mobile-optimized loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <h2 className="text-lg font-medium text-gray-900">Loading Executive Portal</h2>
          <p className="text-gray-600 mt-2">
            {isMobile ? 'Optimizing for mobile...' : 'Preparing your dashboard...'}
          </p>
        </div>
      </div>
    );
  }

  // Enhanced error state with mobile optimization
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="text-center max-w-md">
          <XCircleIcon className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-red-800 mb-2">Executive Portal Error</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          <div className="space-y-3">
            <Button
              onClick={() => window.location.reload()}
              className="w-full sm:w-auto"
              size={isMobile ? 'lg' : 'md'}
            >
              Retry Loading
            </Button>
            {isMobile && (
              <p className="text-xs text-gray-500">
                <DevicePhoneMobileIcon className="w-4 h-4 inline mr-1" />
                Mobile-optimized interface
              </p>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen bg-gray-50 ${isMobile ? 'pb-20' : ''}`}>
      {/* Mobile-optimized header */}
      <div className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              {isMobile && (
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                  className="p-2"
                  aria-label="Toggle mobile menu"
                >
                  <Bars3Icon className="w-5 h-5" />
                </Button>
              )}
              <h1 className={`font-bold text-gray-900 ${isMobile ? 'text-lg' : 'text-2xl'}`}>
                Executive Review
              </h1>
              {isMobile && (
                <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                  Mobile
                </span>
              )}
            </div>

            {/* Mobile proposal count */}
            {isMobile && <div className="text-sm text-gray-600">{proposals.length} pending</div>}
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <Card>
          {/* Mobile-first tab navigation */}
          <div className="border-b border-gray-200">
            <nav className={`-mb-px flex ${isMobile ? 'space-x-2 overflow-x-auto' : 'space-x-8'}`}>
              {(['pending', 'team', 'history', 'kpis'] as const).map(tab => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`${
                    activeTab === tab
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                    isMobile ? 'min-w-max px-3' : ''
                  }`}
                >
                  {tab.charAt(0).toUpperCase() + tab.slice(1)}
                  {tab === 'pending' && proposals.length > 0 && (
                    <span className="ml-2 bg-blue-100 text-blue-800 text-xs rounded-full px-2 py-1">
                      {proposals.length}
                    </span>
                  )}
                </button>
              ))}
            </nav>
          </div>

          <div className="p-6">
            {activeTab === 'pending' && (
              <div
                className={`grid ${isMobile ? 'grid-cols-1 gap-6' : 'grid-cols-1 lg:grid-cols-3 gap-8'}`}
              >
                {/* Mobile-optimized proposal list */}
                <div className={isMobile ? 'order-1' : 'lg:col-span-1'}>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h2
                        className={`font-medium text-gray-900 ${isMobile ? 'text-lg' : 'text-xl'}`}
                      >
                        Pending Decisions
                      </h2>
                      {isMobile && (
                        <span className="text-sm text-gray-500">
                          {sortedProposals.length} total
                        </span>
                      )}
                    </div>

                    <div className={`space-y-3 ${isMobile ? 'max-h-64 overflow-y-auto' : ''}`}>
                      {sortedProposals.map(proposal => (
                        <div
                          key={proposal.id}
                          onClick={() => handleProposalSelection(proposal.id)}
                          className={`p-4 rounded-lg border cursor-pointer transition-all duration-200 ${
                            selectedProposalId === proposal.id
                              ? 'border-blue-500 bg-blue-50 ring-2 ring-blue-200'
                              : 'border-gray-200 bg-white hover:border-gray-300 hover:shadow-sm'
                          } ${isMobile ? 'touch-manipulation' : ''}`}
                          style={isMobile ? { minHeight: '72px' } : {}}
                        >
                          <div className="flex items-start justify-between">
                            <div className="flex-1 min-w-0">
                              <h3
                                className={`font-medium text-gray-900 truncate ${isMobile ? 'text-base' : 'text-lg'}`}
                              >
                                {proposal.title}
                              </h3>
                              <p className="text-sm text-gray-600 mt-1">
                                {proposal.customer} • {formatCurrency(proposal.value)}
                              </p>
                              {isMobile && (
                                <div className="flex items-center mt-2 space-x-2">
                                  {getStatusDisplay(proposal.status)}
                                  <span className="text-xs text-gray-500">
                                    Due: {proposal.deadline.toLocaleDateString()}
                                  </span>
                                </div>
                              )}
                            </div>
                            {!isMobile && (
                              <div className="flex flex-col items-end space-y-2">
                                {getStatusDisplay(proposal.status)}
                                <span className="text-xs text-gray-500">
                                  Due: {proposal.deadline.toLocaleDateString()}
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Mobile-optimized proposal details */}
                <div className={isMobile ? 'order-2' : 'lg:col-span-2'}>
                  {selectedProposal ? (
                    <div className="space-y-6">
                      {/* Mobile executive summary */}
                      <Card>
                        <div className="p-6">
                          <div className="flex items-center justify-between mb-4">
                            <h3
                              className={`font-medium text-gray-900 ${isMobile ? 'text-lg' : 'text-xl'}`}
                            >
                              {selectedProposal.title}
                            </h3>
                            {!isMobile && getStatusDisplay(selectedProposal.status)}
                          </div>

                          {/* Mobile-first metrics grid */}
                          <div
                            className={`grid gap-4 mb-6 ${
                              isMobile ? 'grid-cols-2' : 'grid-cols-2 md:grid-cols-4'
                            }`}
                          >
                            <div className="text-center p-3 bg-gray-50 rounded-lg">
                              <div
                                className={`font-semibold text-gray-900 ${isMobile ? 'text-lg' : 'text-2xl'}`}
                              >
                                {selectedProposal.winProbability}%
                              </div>
                              <div className={`text-gray-600 ${isMobile ? 'text-xs' : 'text-sm'}`}>
                                Win Prob
                              </div>
                            </div>
                            <div className="text-center p-3 bg-gray-50 rounded-lg">
                              <div
                                className={`font-semibold text-gray-900 ${isMobile ? 'text-lg' : 'text-2xl'}`}
                              >
                                {selectedProposal.deliveryConfidence}%
                              </div>
                              <div className={`text-gray-600 ${isMobile ? 'text-xs' : 'text-sm'}`}>
                                Delivery
                              </div>
                            </div>
                            <div className="text-center p-3 bg-gray-50 rounded-lg">
                              <div
                                className={`font-semibold text-gray-900 ${isMobile ? 'text-lg' : 'text-2xl'}`}
                              >
                                {selectedProposal.resourceAvailability}%
                              </div>
                              <div className={`text-gray-600 ${isMobile ? 'text-xs' : 'text-sm'}`}>
                                Resources
                              </div>
                            </div>
                            <div className="text-center p-3 bg-gray-50 rounded-lg">
                              <div
                                className={`font-semibold text-gray-900 ${isMobile ? 'text-lg' : 'text-2xl'}`}
                              >
                                {selectedProposal.strategicAlignment}%
                              </div>
                              <div className={`text-gray-600 ${isMobile ? 'text-xs' : 'text-sm'}`}>
                                Alignment
                              </div>
                            </div>
                          </div>

                          {/* Executive summary content */}
                          <div className="space-y-4">
                            <div>
                              <h4 className="text-sm font-medium text-gray-900 mb-2">Summary</h4>
                              <p className={`text-gray-700 ${isMobile ? 'text-sm' : 'text-base'}`}>
                                {selectedProposal.summary.description}
                              </p>
                            </div>

                            <div
                              className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-2'}`}
                            >
                              <div>
                                <span className="text-sm font-medium text-gray-900">Value:</span>
                                <span className="ml-2 text-lg font-bold text-green-600">
                                  {formatCurrency(selectedProposal.value)}
                                </span>
                              </div>
                              <div>
                                <span className="text-sm font-medium text-gray-900">Margin:</span>
                                <span className="ml-2 text-lg font-bold text-blue-600">
                                  {selectedProposal.summary.margin}%
                                </span>
                              </div>
                              <div>
                                <span className="text-sm font-medium text-gray-900">Duration:</span>
                                <span className="ml-2 text-gray-700">
                                  {selectedProposal.summary.duration}
                                </span>
                              </div>
                              <div>
                                <span className="text-sm font-medium text-gray-900">
                                  Competitors:
                                </span>
                                <span className="ml-2 text-gray-700">
                                  {selectedProposal.summary.competitorCount}
                                </span>
                              </div>
                            </div>
                          </div>
                        </div>
                      </Card>

                      {/* Mobile-optimized AI insights */}
                      {selectedProposal.aiInsights.length > 0 && (
                        <Card>
                          <div className="p-6">
                            <h3
                              className={`font-medium text-gray-900 mb-4 ${isMobile ? 'text-lg' : 'text-xl'}`}
                            >
                              AI Decision Support
                            </h3>
                            <div className="space-y-4">
                              {selectedProposal.aiInsights.map(insight => (
                                <div
                                  key={insight.id}
                                  className={`p-4 rounded-lg border-l-4 ${
                                    insight.type === 'risk'
                                      ? 'border-red-500 bg-red-50'
                                      : insight.type === 'opportunity'
                                        ? 'border-green-500 bg-green-50'
                                        : 'border-blue-500 bg-blue-50'
                                  }`}
                                >
                                  <div className="flex items-start space-x-3">
                                    <div className="flex-shrink-0">
                                      {insight.type === 'risk' && (
                                        <ExclamationTriangleIcon className="w-5 h-5 text-red-600" />
                                      )}
                                      {insight.type === 'opportunity' && (
                                        <LightBulbIcon className="w-5 h-5 text-green-600" />
                                      )}
                                      {insight.type === 'recommendation' && (
                                        <LightBulbIcon className="w-5 h-5 text-blue-600" />
                                      )}
                                    </div>
                                    <div className="flex-1">
                                      <h4
                                        className={`font-medium text-gray-900 ${isMobile ? 'text-sm' : 'text-base'}`}
                                      >
                                        {insight.title}
                                      </h4>
                                      <p
                                        className={`text-gray-700 mt-1 ${isMobile ? 'text-xs' : 'text-sm'}`}
                                      >
                                        {insight.description}
                                      </p>
                                      {insight.recommendation && (
                                        <div
                                          className={`mt-2 p-2 bg-white rounded ${isMobile ? 'text-xs' : 'text-sm'}`}
                                        >
                                          <strong>Recommendation:</strong> {insight.recommendation}
                                        </div>
                                      )}
                                      <div
                                        className={`mt-2 text-gray-500 ${isMobile ? 'text-xs' : 'text-xs'}`}
                                      >
                                        Confidence: {insight.confidence}%
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        </Card>
                      )}

                      {/* Mobile-optimized decision actions */}
                      <Card>
                        <div className="p-6">
                          <h3
                            className={`font-medium text-gray-900 mb-4 ${isMobile ? 'text-lg' : 'text-xl'}`}
                          >
                            Decision Actions
                          </h3>

                          {!selectedDecision && !decisionInProgress && (
                            <div className="space-y-4">
                              {/* Mobile-first decision buttons with 44x44px touch targets */}
                              <div
                                className={`grid gap-4 ${
                                  isMobile ? 'grid-cols-1' : 'grid-cols-2 md:grid-cols-3'
                                }`}
                              >
                                <Button
                                  variant="primary"
                                  onClick={() => handleDecision(DecisionStatus.APPROVED)}
                                  className={`flex items-center justify-center ${
                                    isMobile ? 'h-12 text-base' : ''
                                  }`}
                                  size={isMobile ? 'lg' : 'md'}
                                >
                                  <HandThumbUpIcon className="w-5 h-5 mr-2" />
                                  Approve
                                </Button>
                                <Button
                                  variant="secondary"
                                  onClick={() => handleDecision(DecisionStatus.DECLINED)}
                                  className={`flex items-center justify-center ${
                                    isMobile ? 'h-12 text-base' : ''
                                  }`}
                                  size={isMobile ? 'lg' : 'md'}
                                >
                                  <HandThumbDownIcon className="w-5 h-5 mr-2" />
                                  Decline
                                </Button>
                                <Button
                                  variant="secondary"
                                  onClick={() => handleDecision(DecisionStatus.CONDITIONAL)}
                                  className={`flex items-center justify-center ${
                                    isMobile ? 'h-12 text-base' : ''
                                  }`}
                                  size={isMobile ? 'lg' : 'md'}
                                >
                                  <ExclamationTriangleIcon className="w-5 h-5 mr-2" />
                                  Conditional
                                </Button>
                                {!isMobile && (
                                  <>
                                    <Button
                                      variant="secondary"
                                      onClick={() =>
                                        handleDecision(DecisionStatus.CHANGES_REQUESTED)
                                      }
                                      className="flex items-center justify-center"
                                    >
                                      <PencilIcon className="w-5 h-5 mr-2" />
                                      Changes
                                    </Button>
                                    <Button
                                      variant="secondary"
                                      onClick={() => handleDecision(DecisionStatus.DELEGATED)}
                                      className="flex items-center justify-center md:col-span-2"
                                    >
                                      <UserIcon className="w-5 h-5 mr-2" />
                                      Delegate
                                    </Button>
                                  </>
                                )}
                              </div>

                              {/* Mobile: Additional actions in expandable section */}
                              {isMobile && (
                                <div className="space-y-3">
                                  <Button
                                    variant="secondary"
                                    onClick={() => handleDecision(DecisionStatus.CHANGES_REQUESTED)}
                                    className="w-full h-12 flex items-center justify-center text-base"
                                    size="lg"
                                  >
                                    <PencilIcon className="w-5 h-5 mr-2" />
                                    Request Changes
                                  </Button>
                                  <Button
                                    variant="secondary"
                                    onClick={() => handleDecision(DecisionStatus.DELEGATED)}
                                    className="w-full h-12 flex items-center justify-center text-base"
                                    size="lg"
                                  >
                                    <UserIcon className="w-5 h-5 mr-2" />
                                    Delegate Decision
                                  </Button>
                                </div>
                              )}

                              {/* Conditions input - mobile optimized */}
                              <div>
                                <label
                                  className={`block font-medium text-gray-700 mb-2 ${
                                    isMobile ? 'text-sm' : 'text-sm'
                                  }`}
                                >
                                  Conditions or Notes (Optional)
                                </label>
                                <textarea
                                  value={conditions}
                                  onChange={e => setConditions(e.target.value)}
                                  placeholder="Enter any conditions, notes, or feedback..."
                                  className={`w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ${
                                    isMobile ? 'text-base min-h-[80px]' : ''
                                  }`}
                                  rows={isMobile ? 3 : 3}
                                />
                              </div>

                              {/* Digital signature - mobile optimized */}
                              <div>
                                <label
                                  className={`block font-medium text-gray-700 mb-2 ${
                                    isMobile ? 'text-sm' : 'text-sm'
                                  }`}
                                >
                                  Digital Signature <span className="text-red-500">*</span>
                                </label>
                                <Input
                                  type="text"
                                  value={signature}
                                  onChange={e => setSignature(e.target.value)}
                                  placeholder="Type your full name to sign digitally"
                                  className={`${isMobile ? 'text-base h-12' : 'max-w-md'}`}
                                  required
                                />
                                {isMobile && (
                                  <p className="text-xs text-gray-500 mt-1">
                                    Required for all executive decisions
                                  </p>
                                )}
                              </div>
                            </div>
                          )}

                          {/* Decision processing state */}
                          {decisionInProgress && (
                            <div className="text-center py-8">
                              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                              <p className="text-gray-600">
                                {isMobile
                                  ? 'Processing decision...'
                                  : 'Processing your decision...'}
                              </p>
                            </div>
                          )}

                          {/* Decision success state */}
                          {selectedDecision && !decisionInProgress && (
                            <div className="text-center py-8">
                              <CheckCircleIcon className="w-16 h-16 text-green-600 mx-auto mb-4" />
                              <h4
                                className={`font-medium text-gray-900 mb-2 ${
                                  isMobile ? 'text-lg' : 'text-lg'
                                }`}
                              >
                                Decision Recorded:{' '}
                                {selectedDecision.replace('_', ' ').toUpperCase()}
                              </h4>
                              <p className={`text-gray-600 ${isMobile ? 'text-sm' : ''}`}>
                                Your decision has been recorded and the proposal workflow will
                                continue.
                              </p>
                              {isMobile && (
                                <Button
                                  onClick={() => {
                                    setSelectedDecision(null);
                                    setSignature('');
                                    setConditions('');
                                  }}
                                  className="mt-4 w-full"
                                  size="lg"
                                >
                                  Next Proposal
                                </Button>
                              )}
                            </div>
                          )}
                        </div>
                      </Card>
                    </div>
                  ) : (
                    <div className="text-center py-12">
                      <DocumentTextIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                      <h3
                        className={`font-medium text-gray-900 mb-2 ${isMobile ? 'text-lg' : 'text-lg'}`}
                      >
                        {isMobile ? 'Select a proposal' : 'Select a proposal to review'}
                      </h3>
                      <p className={`text-gray-600 ${isMobile ? 'text-sm' : ''}`}>
                        {isMobile
                          ? 'Choose from the list above to review details and decide.'
                          : 'Choose a proposal from the list to view details and make a decision.'}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Other tabs with mobile optimization */}
            {activeTab !== 'pending' && (
              <div className="text-center py-12">
                <CogIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <h3
                  className={`font-medium text-gray-900 mb-2 ${isMobile ? 'text-lg' : 'text-lg'}`}
                >
                  {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} View
                </h3>
                <p className={`text-gray-600 ${isMobile ? 'text-sm' : ''}`}>
                  This section is available for future implementation.
                </p>
                {isMobile && (
                  <Button onClick={() => setActiveTab('pending')} className="mt-4" size="lg">
                    Back to Pending Decisions
                  </Button>
                )}
              </div>
            )}
          </div>
        </Card>
      </div>
    </div>
  );
}
