name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CI: true
  NODE_ENV: test
  NEXT_TELEMETRY_DISABLED: 1
  DATABASE_URL: sqlite://memory
  USE_REDIS: 'false'

jobs:
  # 🔍 Security & Type Safety Checks
  security-and-types:
    name: '🔒 Security & Type Checks'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 🔍 TypeScript Type Check
        run: npm run type-check

      - name: 🛡️ Security Vulnerability Scan
        run: npm audit --audit-level high
        continue-on-error: true

      - name: 🔒 Dependency Security Check
        run: |
          npm audit --json | jq -e '.vulnerabilities.high or .vulnerabilities.critical' && exit 1 || echo "✅ No high/critical vulnerabilities found"

      - name: 🔐 CodeQL Security Scan
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
        continue-on-error: true

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      - name: 🛡️ Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📤 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: 📋 Schema Validation
        run: npm run db:validate

      - name: 🏗️ Build Verification
        run: npm run build

      - name: 📊 Bundle Analysis
        run: npm run ci:bundle
        continue-on-error: true

  # 🎯 Code Quality & Linting
  quality:
    name: '✨ Code Quality'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 🎨 Code Formatting Check
        run: npm run format:check

      - name: 🔍 Linting
        run: npm run lint

      - name: 📊 Bundle Budget Check
        run: npm run ci:bundle
        continue-on-error: true

      - name: 🔍 Duplicate Detection
        run: npm run audit:duplicates

      - name: 🏗️ Architecture Validation
        run: npm run audit:patterns
        continue-on-error: true

  # 🧪 Testing Suite
  test:
    name: '🧪 Tests'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 🗄️ Setup Database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 🧪 Unit Tests
        run: npm run test:ci:unit

      - name: 🔒 Security Tests
        run: npm run test:security

      - name: ♿ Accessibility Tests
        run: npm run test:accessibility

      - name: 🔍 Critical Gaps Tests
        run: npm run test:critical-gaps

      - name: 🚀 API Routes Tests
        run: npm run test:api-routes

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # 🏗️ Build & Deploy Checks
  build:
    name: '🏗️ Build & Deploy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 🏗️ Production Build
        run: npm run build

      - name: 📦 Bundle Analysis
        run: npm run analyze
        continue-on-error: true

      - name: 🚀 Build Size Check
        run: |
          BUNDLE_SIZE=$(du -sh .next | cut -f1)
          echo "📦 Bundle size: $BUNDLE_SIZE"
          # Warn if bundle is too large
          if [[ $(du -s .next | cut -f1) -gt 100000 ]]; then
            echo "⚠️ Bundle size is large, consider optimization"
          fi

      - name: 📝 Type Check Build
        run: npm run type-check

  # 🔍 Integration Tests
  integration:
    name: '🔗 Integration Tests'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 🗄️ Setup Database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: 🔗 Integration Tests
        run: npm run test:integration

      - name: 🎯 Real World Tests
        run: npm run test:real-world
        continue-on-error: true

      - name: 🎨 Mobile Tests
        run: npm run test:mobile

  # 📊 Performance Monitoring
  performance:
    name: '⚡ Performance'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: 🏗️ Build for Performance Testing
        run: npm run build

      - name: ⚡ Performance Tests
        run: npm run test:performance
        continue-on-error: true

      - name: 📊 Bundle Budget Check
        run: npm run ci:bundle
        continue-on-error: true

  # 🎯 Final Quality Gate
  quality-gate:
    name: '🎯 Quality Gate'
    runs-on: ubuntu-latest
    needs: [security-and-types, quality, test, build, integration]
    if: always()
    steps:
      - name: Quality Gate Check
        run: |
          if [[ "${{ needs.security-and-types.result }}" != "success" ]]; then
            echo "❌ Security & Type checks failed"
            exit 1
          fi

          if [[ "${{ needs.quality.result }}" != "success" ]]; then
            echo "❌ Code quality checks failed"
            exit 1
          fi

          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Test suite failed"
            exit 1
          fi

          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build verification failed"
            exit 1
          fi

          if [[ "${{ needs.integration.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi

          echo "🎉 All quality gates passed!"
