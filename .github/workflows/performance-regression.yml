name: Performance Regression Testing

on:
  push:
    branches: [ main, modern-implementation ]
  pull_request:
    branches: [ main, modern-implementation ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of performance test to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - baseline

jobs:
  performance-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: posalpro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/posalpro_test

      - name: Build application
        run: npm run build

      - name: Start test server
        run: |
          npm run dev:smart &
          sleep 30
          curl -f http://localhost:3000/api/health || exit 1

      - name: Run performance regression tests
        run: |
          if [ "${{ github.event.inputs.test_type }}" = "baseline" ]; then
            node scripts/performance-regression-test.js baseline
          elif [ "${{ github.event.inputs.test_type }}" = "quick" ]; then
            node scripts/load-testing.js
          else
            node scripts/performance-regression-test.js test
          fi
        env:
          NEXT_PUBLIC_APP_URL: http://localhost:3000

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: |
            performance-report.json
            performance-regression-report.json
            performance-baseline.json

      - name: Performance regression check
        run: |
          if [ -f "performance-regression-report.json" ]; then
            # Check for critical regressions
            if grep -q '"severity": "CRITICAL"' performance-regression-report.json; then
              echo "🚨 CRITICAL PERFORMANCE REGRESSION DETECTED!"
              echo "Review the performance regression report for details."
              exit 1
            fi

            # Check for significant regressions
            if grep -q '"severity": "WARNING"' performance-regression-report.json; then
              echo "⚠️  PERFORMANCE REGRESSION WARNING DETECTED!"
              echo "Review the performance regression report for details."
            fi
          fi

  performance-alert:
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: performance-regression

    steps:
      - name: Performance regression alert
        run: |
          echo "🚨 Performance Regression Detected!"
          echo "Performance tests have failed on the main branch."
          echo "Please review the performance reports and address any regressions before merging."

      - name: Download performance reports
        uses: actions/download-artifact@v4
        with:
          name: performance-report

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '🚨 **Performance Regression Detected!**\n\n';
            comment += 'Performance tests have detected potential regressions. ';
            comment += 'Please review the attached performance reports and address any issues.\n\n';

            // Try to read the regression report
            try {
              const report = JSON.parse(fs.readFileSync('performance-regression-report.json', 'utf8'));

              if (report.regressions && report.regressions.length > 0) {
                comment += '**Critical Regressions:**\n';
                report.regressions.forEach(reg => {
                  comment += `• ${reg.test}: ${reg.avgChange} degradation\n`;
                });
              }

              if (report.improvements && report.improvements.length > 0) {
                comment += '\n**Performance Improvements:**\n';
                report.improvements.forEach(imp => {
                  comment += `• ${imp.test}: ${imp.avgChange} improvement\n`;
                });
              }
            } catch (e) {
              comment += 'Unable to parse detailed regression data.\n';
            }

            comment += '\n📊 [View Performance Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
